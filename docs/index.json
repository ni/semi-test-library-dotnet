{
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.BurstPattern.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.BurstPattern.html",
    "title": "Method BurstPattern | Semiconductor Test Library",
    "keywords": "Method BurstPattern Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll BurstPattern(ISemiconductorModuleContext, string[], string) Bursts a pattern and publishes the pass/fail results as well as the fail count. public static void BurstPattern(ISemiconductorModuleContext tsmContext, string[] pinsOrPinGroups, string patternName) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. pinsOrPinGroups string[] The pins or pin groups. patternName string The name of the pattern to burst."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.ContinuityTest.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.ContinuityTest.html",
    "title": "Method ContinuityTest | Semiconductor Test Library",
    "keywords": "Method ContinuityTest Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll ContinuityTest(ISemiconductorModuleContext, string[], double[], string[], double[], double[], double[], double, double) Performs a basic continuity test. It serially checks either upper or lower protection diodes DUT pins, regardless of if they are mapped to digital or SMU instruments. The test will first set 0V on all the pins and then source a small amount of current on the targeted continuity pins to validate the voltage drop across the protection diode. After current is applied, the targeted pin(s) will be forced back to 0V before continuing on to the next pin. Note that each continuity pin will be tested one pin at a time. Pins mapped to either an NI SMU or NI PPMU(s) instrument channel are supported. public static void ContinuityTest(ISemiconductorModuleContext tsmContext, string[] supplyPinsOrPinGroups, double[] currentLimitsPerSupplyPinOrPinGroup, string[] continuityPinsOrPinGroups, double[] currentLevelPerContinuityPinOrPinGroup, double[] voltageLimitHighPerContinuityPinOrPinGroup, double[] voltageLimitLowPerContinuityPinOrPinGroup, double apertureTime, double settlingTime) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. supplyPinsOrPinGroups string[] The supply pins or pin groups. currentLimitsPerSupplyPinOrPinGroup double[] The current limits for every supply pin or pin group, in amperes. continuityPinsOrPinGroups string[] The continuity pins or pin groups. currentLevelPerContinuityPinOrPinGroup double[] The current levels for every continuity pin or pin group, in amperes. voltageLimitHighPerContinuityPinOrPinGroup double[] The voltage limit high for every continuity pin or pin group, in volts. voltageLimitLowPerContinuityPinOrPinGroup double[] The voltage limit low for every continuity pin or pin group, in volts. apertureTime double The measurement aperture time in seconds. settlingTime double The amount of time to wait before measuring the voltage, in seconds."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.DutPowerDown.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.DutPowerDown.html",
    "title": "Method DutPowerDown | Semiconductor Test Library",
    "keywords": "Method DutPowerDown Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll DutPowerDown(ISemiconductorModuleContext, string[], double, bool, bool) Forces DC voltage to Zero on the specified DUT supply pins. If the powerDownSuppliesSerially Boolean is set to True, the DUT supplies will be powered down sequentially in the order provided, and the settlingTime input will be used after power down each pin. If forceLowestCurrentLimit is set to false, the dutSupplyPinsOrPinGroups will be configured to force 0V at the currently programmed current limit and range, which may not be desirable. Otherwise, it will default to true, which will ensure the pins are configured to force 0V at the lowest possible current limit to mimic high-impedance. The actual current limit selected is dependent on the mapped hardware channel. Both DCPower and Digital PPMU pins are supported. public static void DutPowerDown(ISemiconductorModuleContext tsmContext, string[] dutSupplyPinsOrPinGroups, double settlingTime = 0, bool powerDownSuppliesSerially = false, bool forceLowestCurrentLimit = true) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. dutSupplyPinsOrPinGroups string[] The DUT supply pins or pin groups. settlingTime double The amount of time to wait before continuing, in seconds. powerDownSuppliesSerially bool Whether to power down DUT supplies sequentially. forceLowestCurrentLimit bool Whether to force lowest current limit (100nA) for safety considerations."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.DutPowerUp.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.DutPowerUp.html",
    "title": "Method DutPowerUp | Semiconductor Test Library",
    "keywords": "Method DutPowerUp Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll DutPowerUp(ISemiconductorModuleContext, string[], double[], double[], double, bool) Forces DC voltage on the specified DUT supply pins. Must provide voltages and current limit values for each of the DUT supply pins. If the powerUpSuppliesSerially Boolean is set to True, the DUT supplies will be powered up sequentially in the order provided, and the settlingTime input will be used after power up each pin. Both DCPower and Digital PPMU pins are supported. public static void DutPowerUp(ISemiconductorModuleContext tsmContext, string[] dutSupplyPinsOrPinGroups, double[] perSupplyPinOrPinGroupVoltages, double[] perSupplyPinOrPinGroupCurrentLimits, double settlingTime = 0, bool powerUpSuppliesSerially = false) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. dutSupplyPinsOrPinGroups string[] The DUT supply pins or pin groups. perSupplyPinOrPinGroupVoltages double[] The DC voltage level to force on each DUT supply pin or pin group, in volts. perSupplyPinOrPinGroupCurrentLimits double[] The current limit for each DUT supply pin or pin group, in amperes. settlingTime double The amount of time to wait before continuing, in seconds. powerUpSuppliesSerially bool Whether to power up DUT supplies sequentially."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.ForceCurrentMeasureVoltage.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.ForceCurrentMeasureVoltage.html",
    "title": "Method ForceCurrentMeasureVoltage | Semiconductor Test Library",
    "keywords": "Method ForceCurrentMeasureVoltage Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll ForceCurrentMeasureVoltage(ISemiconductorModuleContext, string[], double, double, double, double) Forces the specified DC current on all pins and/or pin groups specified, waits the specified amount of settling time, and then measures the voltage on those pins and publishes the results to TestStand. Both DCPower and Digital PPMU pins are supported. Both the settlingTime and apertureTime inputs are expected to be provided in Seconds. By default the apertureTime input is set to -1, which will cause this input to be ignored and the device will use any pre-configured aperture time set by a proceeding set, such as the Setup NI-DCPower Instrumentation step. public static void ForceCurrentMeasureVoltage(ISemiconductorModuleContext tsmContext, string[] pinsOrPinGroups, double currentLevel, double voltageLimit, double settlingTime = 0, double apertureTime = -1) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. pinsOrPinGroups string[] The pins or pin groups to force DC voltage on. currentLevel double The DC current level to force, in amperes. voltageLimit double The voltage limit in volts. settlingTime double The amount of time to wait before continuing, in seconds. apertureTime double The measurement aperture time in seconds."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.ForceDcCurrent.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.ForceDcCurrent.html",
    "title": "Method ForceDcCurrent | Semiconductor Test Library",
    "keywords": "Method ForceDcCurrent Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll ForceDcCurrent(ISemiconductorModuleContext, string[], double, double, double) Forces the specified DC current on all pins and/or pin groups specified. Both DCPower and Digital PPMU pins are supported. If a value is provided to the settlingTimeInSeconds input, the method will wait the specified amount of settling time before continuing. public static void ForceDcCurrent(ISemiconductorModuleContext tsmContext, string[] pinsOrPinGroups, double currentLevel, double voltageLimit, double settlingTime = 0) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. pinsOrPinGroups string[] The pins or pin groups to force DC voltage on. currentLevel double The DC current level to force, in amperes. voltageLimit double The voltage limit in volts. settlingTime double The amount of time to wait before continuing, in seconds."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.ForceDcVoltage.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.ForceDcVoltage.html",
    "title": "Method ForceDcVoltage | Semiconductor Test Library",
    "keywords": "Method ForceDcVoltage Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll ForceDcVoltage(ISemiconductorModuleContext, string[], double, double, double) Forces the specified DC voltage on all pins and/or pin groups specified. Both DCPower and Digital PPMU pins are supported. If a value is provided to the settlingTimeInSeconds input, the method will wait the specified amount of settling time before continuing. public static void ForceDcVoltage(ISemiconductorModuleContext tsmContext, string[] pinsOrPinGroups, double voltageLevel, double currentLimit, double settlingTime = 0) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. pinsOrPinGroups string[] The pins or pin groups to force DC voltage on. voltageLevel double The DC voltage level to force, in volts. currentLimit double The current limit in amperes. settlingTime double The amount of time to wait before continuing, in seconds."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.ForceVoltageMeasureCurrent.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.ForceVoltageMeasureCurrent.html",
    "title": "Method ForceVoltageMeasureCurrent | Semiconductor Test Library",
    "keywords": "Method ForceVoltageMeasureCurrent Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll ForceVoltageMeasureCurrent(ISemiconductorModuleContext, string[], double, double, double, double) Forces the specified DC voltage on all pins and/or pin groups specified, waits the specified amount of settling time, and then measures the current on those pins and publishes the results to TestStand. Both DCPower and Digital PPMU pins are supported. Both the settlingTime and apertureTime inputs are expected to be provided in Seconds. By default the apertureTime input is set to -1, which will cause this input to be ignored and the device will use any pre-configured aperture time set by a proceeding set, such as the Setup NI-DCPower Instrumentation step. public static void ForceVoltageMeasureCurrent(ISemiconductorModuleContext tsmContext, string[] pinsOrPinGroups, double voltageLevel, double currentLimit, double settlingTime = 0, double apertureTime = -1) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. pinsOrPinGroups string[] The pins or pin groups to force DC voltage on. voltageLevel double The DC voltage level to force, in volts. currentLimit double The current limit in amperes. settlingTime double The amount of time to wait before continuing, in seconds. apertureTime double The measurement aperture time in seconds."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.LeakageTest.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.LeakageTest.html",
    "title": "Method LeakageTest | Semiconductor Test Library",
    "keywords": "Method LeakageTest Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll LeakageTest(ISemiconductorModuleContext, string[], double, double, double, double, bool) Performs a single leakage measurement. The test configures the instruments connected to the pins specified, sources voltage on each pin, and then measures the current on all pins simultaneously. Provide input values to the method to specify the voltage to source and the current limit for the leakage measurement. The leakage current measurements are published separately for each pin, regardless of if a pin group is provided. Configure test evaluations on the Tests tab of the Step Settings pane in TestStand to evaluate the results of these measurements. If the forced voltage cannot be applied to pins simultaneously, you can set the serialOperationEnabled Boolean input to true (false by default). When the serialOperationEnabled Boolean input is set to true and a pin group is provided, this will still perform parallel operations across all pins in the pin group. Take advantage of this functionality for when leakage can be performed on some DUT pins in parallel, but not others, and define those pins within separate pin groups (i.e. LeakageOddPins and LeakageEvenPins). Pins mapped to either an NI SMU or NI PPMU(s) instrument channel are supported. public static void LeakageTest(ISemiconductorModuleContext tsmContext, string[] pinsOrPinGroups, double voltageLevel, double currentLimit, double apertureTime, double settlingTime, bool serialOperationEnabled = false) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. pinsOrPinGroups string[] The pins or pin groups. voltageLevel double The DC voltage level to force, in volts. currentLimit double The current limit in amperes. apertureTime double The measurement aperture time in seconds. settlingTime double The amount of time to wait before measuring the current, in seconds. serialOperationEnabled bool Whether to force voltage sequentially."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.CommonSteps.html",
    "title": "Class CommonSteps | Semiconductor Test Library",
    "keywords": "Class CommonSteps Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll s public static class CommonSteps Inheritance object CommonSteps Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods BurstPattern(ISemiconductorModuleContext, string[], string) Bursts a pattern and publishes the pass/fail results as well as the fail count. ContinuityTest(ISemiconductorModuleContext, string[], double[], string[], double[], double[], double[], double, double) Performs a basic continuity test. It serially checks either upper or lower protection diodes DUT pins, regardless of if they are mapped to digital or SMU instruments. The test will first set 0V on all the pins and then source a small amount of current on the targeted continuity pins to validate the voltage drop across the protection diode. After current is applied, the targeted pin(s) will be forced back to 0V before continuing on to the next pin. Note that each continuity pin will be tested one pin at a time. Pins mapped to either an NI SMU or NI PPMU(s) instrument channel are supported. DutPowerDown(ISemiconductorModuleContext, string[], double, bool, bool) Forces DC voltage to Zero on the specified DUT supply pins. If the powerDownSuppliesSerially Boolean is set to True, the DUT supplies will be powered down sequentially in the order provided, and the settlingTime input will be used after power down each pin. If forceLowestCurrentLimit is set to false, the dutSupplyPinsOrPinGroups will be configured to force 0V at the currently programmed current limit and range, which may not be desirable. Otherwise, it will default to true, which will ensure the pins are configured to force 0V at the lowest possible current limit to mimic high-impedance. The actual current limit selected is dependent on the mapped hardware channel. Both DCPower and Digital PPMU pins are supported. DutPowerUp(ISemiconductorModuleContext, string[], double[], double[], double, bool) Forces DC voltage on the specified DUT supply pins. Must provide voltages and current limit values for each of the DUT supply pins. If the powerUpSuppliesSerially Boolean is set to True, the DUT supplies will be powered up sequentially in the order provided, and the settlingTime input will be used after power up each pin. Both DCPower and Digital PPMU pins are supported. ForceCurrentMeasureVoltage(ISemiconductorModuleContext, string[], double, double, double, double) Forces the specified DC current on all pins and/or pin groups specified, waits the specified amount of settling time, and then measures the voltage on those pins and publishes the results to TestStand. Both DCPower and Digital PPMU pins are supported. Both the settlingTime and apertureTime inputs are expected to be provided in Seconds. By default the apertureTime input is set to -1, which will cause this input to be ignored and the device will use any pre-configured aperture time set by a proceeding set, such as the Setup NI-DCPower Instrumentation step. ForceDcCurrent(ISemiconductorModuleContext, string[], double, double, double) Forces the specified DC current on all pins and/or pin groups specified. Both DCPower and Digital PPMU pins are supported. If a value is provided to the settlingTimeInSeconds input, the method will wait the specified amount of settling time before continuing. ForceDcVoltage(ISemiconductorModuleContext, string[], double, double, double) Forces the specified DC voltage on all pins and/or pin groups specified. Both DCPower and Digital PPMU pins are supported. If a value is provided to the settlingTimeInSeconds input, the method will wait the specified amount of settling time before continuing. ForceVoltageMeasureCurrent(ISemiconductorModuleContext, string[], double, double, double, double) Forces the specified DC voltage on all pins and/or pin groups specified, waits the specified amount of settling time, and then measures the current on those pins and publishes the results to TestStand. Both DCPower and Digital PPMU pins are supported. Both the settlingTime and apertureTime inputs are expected to be provided in Seconds. By default the apertureTime input is set to -1, which will cause this input to be ignored and the device will use any pre-configured aperture time set by a proceeding set, such as the Setup NI-DCPower Instrumentation step. LeakageTest(ISemiconductorModuleContext, string[], double, double, double, double, bool) Performs a single leakage measurement. The test configures the instruments connected to the pins specified, sources voltage on each pin, and then measures the current on all pins simultaneously. Provide input values to the method to specify the voltage to source and the current limit for the leakage measurement. The leakage current measurements are published separately for each pin, regardless of if a pin group is provided. Configure test evaluations on the Tests tab of the Step Settings pane in TestStand to evaluate the results of these measurements. If the forced voltage cannot be applied to pins simultaneously, you can set the serialOperationEnabled Boolean input to true (false by default). When the serialOperationEnabled Boolean input is set to true and a pin group is provided, this will still perform parallel operations across all pins in the pin group. Take advantage of this functionality for when leakage can be performed on some DUT pins in parallel, but not others, and define those pins within separate pin groups (i.e. LeakageOddPins and LeakageEvenPins). Pins mapped to either an NI SMU or NI PPMU(s) instrument channel are supported."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.DMMMeasurementSettings.-ctor.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.DMMMeasurementSettings.-ctor.html",
    "title": "Constructor DMMMeasurementSettings | Semiconductor Test Library",
    "keywords": "Constructor DMMMeasurementSettings Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll DMMMeasurementSettings(DmmMeasurementFunction, double, double) Initializes a new instance of the DMMMeasurementSettings struct. public DMMMeasurementSettings(DmmMeasurementFunction measurementFunction, double range, double resolutionDigits) Parameters measurementFunction DmmMeasurementFunction The measurement function. range double The measurement range. resolutionDigits double The resolution in digits."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.DMMMeasurementSettings.MeasurementFunction.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.DMMMeasurementSettings.MeasurementFunction.html",
    "title": "Property MeasurementFunction | Semiconductor Test Library",
    "keywords": "Property MeasurementFunction Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll MeasurementFunction The measurement function. public DmmMeasurementFunction MeasurementFunction { get; } Property Value DmmMeasurementFunction"
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.DMMMeasurementSettings.Range.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.DMMMeasurementSettings.Range.html",
    "title": "Property Range | Semiconductor Test Library",
    "keywords": "Property Range Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll Range The measurement range. public double Range { get; } Property Value double"
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.DMMMeasurementSettings.ResolutionDigits.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.DMMMeasurementSettings.ResolutionDigits.html",
    "title": "Property ResolutionDigits | Semiconductor Test Library",
    "keywords": "Property ResolutionDigits Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll ResolutionDigits The resolution in digits. public double ResolutionDigits { get; } Property Value double"
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.DMMMeasurementSettings.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.DMMMeasurementSettings.html",
    "title": "Struct DMMMeasurementSettings | Semiconductor Test Library",
    "keywords": "Struct DMMMeasurementSettings Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll Defines DMM measurement settings. public struct DMMMeasurementSettings Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors DMMMeasurementSettings(DmmMeasurementFunction, double, double) Initializes a new instance of the DMMMeasurementSettings struct. Properties MeasurementFunction The measurement function. Range The measurement range. ResolutionDigits The resolution in digits."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.CleanupInstrumentation.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.CleanupInstrumentation.html",
    "title": "Method CleanupInstrumentation | Semiconductor Test Library",
    "keywords": "Method CleanupInstrumentation Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll CleanupInstrumentation(ISemiconductorModuleContext, bool, NIInstrumentType) Closes any open instrument sessions associated with the pin map. If the resetDevice input is set to True, then the instrument will be reset before closing the session (default = False). The sessions will always be closed in parallel. By default, the instrumentType input is set to All, which closes sessions for all instrument types in parallel. This can be configured to target a specific instrument type, which can be useful for debugging purposes and/or if there is a need to ensure sessions are closed sequentially (requiring multiple instances of this step). Note that the following types are supported: niDCPower, niDigitalPattern, niRelayDriver, niDAQmx, niDMM, niScope, niFGen, and niSync. public static void CleanupInstrumentation(ISemiconductorModuleContext tsmContext, bool resetDevice = false, SetupAndCleanupSteps.NIInstrumentType instrumentType = NIInstrumentType.All) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to reset device during initialization. instrumentType SetupAndCleanupSteps.NIInstrumentType The type of instrument to close."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.NIInstrumentType.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.NIInstrumentType.html",
    "title": "Enum SetupAndCleanupSteps.NIInstrumentType | Semiconductor Test Library",
    "keywords": "Enum SetupAndCleanupSteps.NIInstrumentType Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll Defines NI instrument types the NI Semiconductor Test Library supports. public enum SetupAndCleanupSteps.NIInstrumentType Fields All = 0 All NI instruments. NIDAQmx = 4 An NI-DAQmx task. NIDCPower = 1 An NI-DCPower instrument. NIDMM = 5 An NI-DMM instrument. NIDigitalPattern = 2 An NI-Digital Pattern instrument. NIFGen = 6 An NI-FGEN instrument. NIRelayDriver = 3 A relay driver module (NI-SWITCH instrument). NIScope = 7 An NI-SCOPE instrument. NISync = 8 An NI-Sync instrument."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.ResetInstrumentation.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.ResetInstrumentation.html",
    "title": "Method ResetInstrumentation | Semiconductor Test Library",
    "keywords": "Method ResetInstrumentation Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll ResetInstrumentation(ISemiconductorModuleContext, bool, NIInstrumentType) Resets the instrument sessions for the specified instrumentType associated with the pin map by invoking the Reset() method of the supported instrument driver. By default, the instrumentType input is set to All, which targets all supported instrument types in parallel. This can be configured to target a specific instrument type, which can be useful for debugging purposes and/or if there is a need to ensure instruments are reset individually or sequentially (requiring multiple instances of this step). Note that the following types are supported: niDCPower, niDigitalPattern, niRelayDriver, niDMM, niScope, niFGen, and niSync. For instrumentation that also have the ResetDevice() method (hard reset), this can optionally be invoked instead of the Reset() method (soft-reset) if the resetDevice input is set True (default = False): niDCPower, niDigitalPattern, niScope, and niFGen. Refer to the individual instrument driver documentation for more details. public static void ResetInstrumentation(ISemiconductorModuleContext tsmContext, bool resetDevice = false, SetupAndCleanupSteps.NIInstrumentType instrumentType = NIInstrumentType.All) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to perform a hard reset on the device. instrumentType SetupAndCleanupSteps.NIInstrumentType The type of instrument to reset."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.SetupNIDCPowerInstrumentation.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.SetupNIDCPowerInstrumentation.html",
    "title": "Method SetupNIDCPowerInstrumentation | Semiconductor Test Library",
    "keywords": "Method SetupNIDCPowerInstrumentation Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll SetupNIDCPowerInstrumentation(ISemiconductorModuleContext, bool, double, DCPowerMeasureApertureTimeUnits, DCPowerMeasurementWhen, DCPowerMeasurementSense, double, double) Initializes the NI DCPower instrument sessions associated with the pin map. If the resetDevice input is set to True, then the instrument will be reset as the session is initialized (default = False). If the sourceDelay is set to -1 the method will not set the source delay property, and will assume the initialized default value from the driver, which is expected to be the inverse of the power line frequency. If the powerLineFrequency is set to -1, the method will attempt to automatically determine the power line frequency and set the power line frequency property for the respective driver sessions. If the power line frequency cannot be determined, the property will not be set and the driver will use the default value of this property (60 Hz). This is currently only supported by systems that use a PXIe-109x chassis or newer. public static void SetupNIDCPowerInstrumentation(ISemiconductorModuleContext tsmContext, bool resetDevice = false, double apertureTime = 1, DCPowerMeasureApertureTimeUnits apertureTimeUnits = DCPowerMeasureApertureTimeUnits.PowerLineCycles, DCPowerMeasurementWhen measureWhen = DCPowerMeasurementWhen.OnDemand, DCPowerMeasurementSense measurementSense = DCPowerMeasurementSense.Remote, double sourceDelay = -1, double powerLineFrequency = -1) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to reset device during initialization. apertureTime double The aperture time. apertureTimeUnits DCPowerMeasureApertureTimeUnits The aperture time units. measureWhen DCPowerMeasurementWhen When to do measurement. measurementSense DCPowerMeasurementSense The measurement sense to use. sourceDelay double The source delay in seconds. powerLineFrequency double The power line frequency."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.SetupNIDMMInstrumentation.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.SetupNIDMMInstrumentation.html",
    "title": "Method SetupNIDMMInstrumentation | Semiconductor Test Library",
    "keywords": "Method SetupNIDMMInstrumentation Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll SetupNIDMMInstrumentation(ISemiconductorModuleContext, bool, DmmApertureTimeUnits, double, double, double, DMMMeasurementSettings?) Initializes NI DMM instrument sessions associated with the pin map. If the resetDevice input is set to True, then the instrument will be reset as the session is initialized (default = False). If the powerLineFrequency is set to -1, the method will attempt to automatically determine the power line frequency and set the power line frequency property for the respective driver sessions. If the power line frequency cannot be determined, the property will not be set and the driver will use the default value of this property (60Hz). This is currently only supported by systems that use a PXIe-109x chassis or newer. If the initialMeasurmentSettings is specified, all DMM sessions will be configured to the specified measurement function (not configured by default). public static void SetupNIDMMInstrumentation(ISemiconductorModuleContext tsmContext, bool resetDevice = false, DmmApertureTimeUnits apertureTimeUnits = DmmApertureTimeUnits.PowerLineCycles, double apertureTime = 1, double settleTime = 0.01, double powerLineFrequency = -1, DMMMeasurementSettings? initialMeasurmentSettings = null) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to reset device during initialization. apertureTimeUnits DmmApertureTimeUnits The aperture time units. apertureTime double The aperture time. settleTime double The settle time. powerLineFrequency double The power line frequency. initialMeasurmentSettings DMMMeasurementSettings? The initial measurement settings."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.SetupNIDigitalPatternInstrumentation.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.SetupNIDigitalPatternInstrumentation.html",
    "title": "Method SetupNIDigitalPatternInstrumentation | Semiconductor Test Library",
    "keywords": "Method SetupNIDigitalPatternInstrumentation Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll SetupNIDigitalPatternInstrumentation(ISemiconductorModuleContext, bool, string, string) Initializes an NI Digital Pattern instrument sessions associated with the pin map. It loads in all digital project files associated with the digital project configured for the test program, this includes the: pin map, specifications, patterns, source waveforms, capture waveforms, timing sheets, and levels sheets. No sheets will be applied during this setup step unless specified by the levelsSheetToApply and/or timingSheetToApply inputs. Otherwise, the program will not assume to know loaded sheet to apply and will expect that the users program will apply the appropriate sheet(s) within a proceeding step. If the resetDevice input is set to True, then the instrument will be reset as the session is initialized (default = False). public static void SetupNIDigitalPatternInstrumentation(ISemiconductorModuleContext tsmContext, bool resetDevice = false, string levelsSheetToApply = \"\", string timingSheetToApply = \"\") Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to reset device during initialization. levelsSheetToApply string The name of the levels sheet to apply. timingSheetToApply string The name of the timing sheet to apply."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.SetupNIFGenInstrumentation.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.SetupNIFGenInstrumentation.html",
    "title": "Method SetupNIFGenInstrumentation | Semiconductor Test Library",
    "keywords": "Method SetupNIFGenInstrumentation Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll SetupNIFGenInstrumentation(ISemiconductorModuleContext, bool) Initializes NI FGEN instrument sessions associated with the pin map. If the resetDevice input is set to True, then the instrument will be reset as the session is initialized (default = False). public static void SetupNIFGenInstrumentation(ISemiconductorModuleContext tsmContext, bool resetDevice = false) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to reset device during initialization."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.SetupNIRelayModules.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.SetupNIRelayModules.html",
    "title": "Method SetupNIRelayModules | Semiconductor Test Library",
    "keywords": "Method SetupNIRelayModules Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll SetupNIRelayModules(ISemiconductorModuleContext, bool, string) Initializes NI Switch instrument sessions and NI DAQmx tasks associated with relay modules within the pin map. If the resetDevice input is set to True, then the instrument will be reset as the session is initialized (default = False). If the initialRelayConfigurationToApply input is provided, the step will apply the specified relay configuration. Note that the relay configuration must be defined within the pin map, otherwise the step will throw an exception. Supported devices: PXI-2567 and PXIe-6368. public static void SetupNIRelayModules(ISemiconductorModuleContext tsmContext, bool resetDevice = false, string initialRelayConfigurationToApply = \"\") Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to reset device during initialization. initialRelayConfigurationToApply string The initial relay configuration to apply."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.SetupNIScopeInstrumentation.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.SetupNIScopeInstrumentation.html",
    "title": "Method SetupNIScopeInstrumentation | Semiconductor Test Library",
    "keywords": "Method SetupNIScopeInstrumentation Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll SetupNIScopeInstrumentation(ISemiconductorModuleContext, bool) Initializes NI Scope instrument sessions associated with the pin map. If the resetDevice input is set to True, then the instrument will be reset as the session is initialized (default = False). public static void SetupNIScopeInstrumentation(ISemiconductorModuleContext tsmContext, bool resetDevice = false) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to reset device during initialization."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.SetupNISyncInstrumentation.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.SetupNISyncInstrumentation.html",
    "title": "Method SetupNISyncInstrumentation | Semiconductor Test Library",
    "keywords": "Method SetupNISyncInstrumentation Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll SetupNISyncInstrumentation(ISemiconductorModuleContext, bool) Initializes the NI Sync instrument sessions associated with the pin map. If the resetDevice input is set to True, then the instrument will be reset as the session is initialized (default = False). public static void SetupNISyncInstrumentation(ISemiconductorModuleContext tsmContext, bool resetDevice = false) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to reset device during initialization."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.SetupAndCleanupSteps.html",
    "title": "Class SetupAndCleanupSteps | Semiconductor Test Library",
    "keywords": "Class SetupAndCleanupSteps Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll Defines entry points for semiconductor setup and cleanup steps. public static class SetupAndCleanupSteps Inheritance object SetupAndCleanupSteps Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CleanupInstrumentation(ISemiconductorModuleContext, bool, NIInstrumentType) Closes any open instrument sessions associated with the pin map. If the resetDevice input is set to True, then the instrument will be reset before closing the session (default = False). The sessions will always be closed in parallel. By default, the instrumentType input is set to All, which closes sessions for all instrument types in parallel. This can be configured to target a specific instrument type, which can be useful for debugging purposes and/or if there is a need to ensure sessions are closed sequentially (requiring multiple instances of this step). Note that the following types are supported: niDCPower, niDigitalPattern, niRelayDriver, niDAQmx, niDMM, niScope, niFGen, and niSync. ResetInstrumentation(ISemiconductorModuleContext, bool, NIInstrumentType) Resets the instrument sessions for the specified instrumentType associated with the pin map by invoking the Reset() method of the supported instrument driver. By default, the instrumentType input is set to All, which targets all supported instrument types in parallel. This can be configured to target a specific instrument type, which can be useful for debugging purposes and/or if there is a need to ensure instruments are reset individually or sequentially (requiring multiple instances of this step). Note that the following types are supported: niDCPower, niDigitalPattern, niRelayDriver, niDMM, niScope, niFGen, and niSync. For instrumentation that also have the ResetDevice() method (hard reset), this can optionally be invoked instead of the Reset() method (soft-reset) if the resetDevice input is set True (default = False): niDCPower, niDigitalPattern, niScope, and niFGen. Refer to the individual instrument driver documentation for more details. SetupNIDCPowerInstrumentation(ISemiconductorModuleContext, bool, double, DCPowerMeasureApertureTimeUnits, DCPowerMeasurementWhen, DCPowerMeasurementSense, double, double) Initializes the NI DCPower instrument sessions associated with the pin map. If the resetDevice input is set to True, then the instrument will be reset as the session is initialized (default = False). If the sourceDelay is set to -1 the method will not set the source delay property, and will assume the initialized default value from the driver, which is expected to be the inverse of the power line frequency. If the powerLineFrequency is set to -1, the method will attempt to automatically determine the power line frequency and set the power line frequency property for the respective driver sessions. If the power line frequency cannot be determined, the property will not be set and the driver will use the default value of this property (60 Hz). This is currently only supported by systems that use a PXIe-109x chassis or newer. SetupNIDMMInstrumentation(ISemiconductorModuleContext, bool, DmmApertureTimeUnits, double, double, double, DMMMeasurementSettings?) Initializes NI DMM instrument sessions associated with the pin map. If the resetDevice input is set to True, then the instrument will be reset as the session is initialized (default = False). If the powerLineFrequency is set to -1, the method will attempt to automatically determine the power line frequency and set the power line frequency property for the respective driver sessions. If the power line frequency cannot be determined, the property will not be set and the driver will use the default value of this property (60Hz). This is currently only supported by systems that use a PXIe-109x chassis or newer. If the initialMeasurmentSettings is specified, all DMM sessions will be configured to the specified measurement function (not configured by default). SetupNIDigitalPatternInstrumentation(ISemiconductorModuleContext, bool, string, string) Initializes an NI Digital Pattern instrument sessions associated with the pin map. It loads in all digital project files associated with the digital project configured for the test program, this includes the: pin map, specifications, patterns, source waveforms, capture waveforms, timing sheets, and levels sheets. No sheets will be applied during this setup step unless specified by the levelsSheetToApply and/or timingSheetToApply inputs. Otherwise, the program will not assume to know loaded sheet to apply and will expect that the users program will apply the appropriate sheet(s) within a proceeding step. If the resetDevice input is set to True, then the instrument will be reset as the session is initialized (default = False). SetupNIFGenInstrumentation(ISemiconductorModuleContext, bool) Initializes NI FGEN instrument sessions associated with the pin map. If the resetDevice input is set to True, then the instrument will be reset as the session is initialized (default = False). SetupNIRelayModules(ISemiconductorModuleContext, bool, string) Initializes NI Switch instrument sessions and NI DAQmx tasks associated with relay modules within the pin map. If the resetDevice input is set to True, then the instrument will be reset as the session is initialized (default = False). If the initialRelayConfigurationToApply input is provided, the step will apply the specified relay configuration. Note that the relay configuration must be defined within the pin map, otherwise the step will throw an exception. Supported devices: PXI-2567 and PXIe-6368. SetupNIScopeInstrumentation(ISemiconductorModuleContext, bool) Initializes NI Scope instrument sessions associated with the pin map. If the resetDevice input is set to True, then the instrument will be reset as the session is initialized (default = False). SetupNISyncInstrumentation(ISemiconductorModuleContext, bool) Initializes the NI Sync instrument sessions associated with the pin map. If the resetDevice input is set to True, then the instrument will be reset as the session is initialized (default = False)."
  },
  "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.html": {
    "href": "SemiconductorTestLibrary.TestStandSteps/NationalInstruments.SemiconductorTestLibrary.TestStandSteps.html",
    "title": "Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps | Semiconductor Test Library",
    "keywords": "Namespace NationalInstruments.SemiconductorTestLibrary.TestStandSteps Classes CommonSteps s SetupAndCleanupSteps Defines entry points for semiconductor setup and cleanup steps. Structs DMMMeasurementSettings Defines DMM measurement settings. Enums SetupAndCleanupSteps.NIInstrumentType Defines NI instrument types the NI Semiconductor Test Library supports."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.MeasurementType.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.MeasurementType.html",
    "title": "Enum MeasurementType | Semiconductor Test Library",
    "keywords": "Enum MeasurementType Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines whether to measure voltage or current. public enum MeasurementType Fields Current = 1 Measure current Voltage = 0 Measure voltage"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.NISemiconductorTestException.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.NISemiconductorTestException.-ctor.html",
    "title": "Constructor NISemiconductorTestException | Semiconductor Test Library",
    "keywords": "Constructor NISemiconductorTestException Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll NISemiconductorTestException() Initializes a new instance of the NISemiconductorTestException class. public NISemiconductorTestException() NISemiconductorTestException(string) Initializes a new instance of the NISemiconductorTestException class with an error message. public NISemiconductorTestException(string message) Parameters message string The error message that explains the reason for the exception. NISemiconductorTestException(string, Exception) Initializes a new instance of the NISemiconductorTestException class with an error message and a reference to the inner exception resulting in this exception. public NISemiconductorTestException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception resulting in the current exception. NISemiconductorTestException(int, Exception) Initializes an instance of NISemiconductorTestException with an error code and an inner exception. public NISemiconductorTestException(int errorCode, Exception innerException) Parameters errorCode int The error code to be included. innerException Exception The exception to be embedded."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.NISemiconductorTestException.Throw.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.NISemiconductorTestException.Throw.html",
    "title": "Method Throw | Semiconductor Test Library",
    "keywords": "Method Throw Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Throw(Exception) Wraps an exception into a NISemiconductorTestException and throws. public static void Throw(Exception e) Parameters e Exception The exception to be wrapped."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.NISemiconductorTestException.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.NISemiconductorTestException.html",
    "title": "Class NISemiconductorTestException | Semiconductor Test Library",
    "keywords": "Class NISemiconductorTestException Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines a specific exception for NI Semiconductor Test Library. public sealed class NISemiconductorTestException : Exception, ISerializable, _Exception Inheritance object Exception NISemiconductorTestException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors NISemiconductorTestException() Initializes a new instance of the NISemiconductorTestException class. NISemiconductorTestException(int, Exception) Initializes an instance of NISemiconductorTestException with an error code and an inner exception. NISemiconductorTestException(string) Initializes a new instance of the NISemiconductorTestException class with an error message. NISemiconductorTestException(string, Exception) Initializes a new instance of the NISemiconductorTestException class with an error message and a reference to the inner exception resulting in this exception. Methods Throw(Exception) Wraps an exception into a NISemiconductorTestException and throws."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.ParallelExecution.Do.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.ParallelExecution.Do.html",
    "title": "Method Do | Semiconductor Test Library",
    "keywords": "Method Do Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation>) Does an operation on all sessions in parallel with the same inputs. public static void Do<TSessionInformation>(this ISessionsBundle<TSessionInformation> sessionsBundle, Action<TSessionInformation> action) Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. action Action<TSessionInformation> The operation to happen on each session info. Type Parameters TSessionInformation The type of the session info. Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int>) Does an operation on all sessions in parallel with session specific inputs. public static void Do<TSessionInformation>(this ISessionsBundle<TSessionInformation> sessionsBundle, Action<TSessionInformation, int> action) Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. action Action<TSessionInformation, int> The operation to happen on each session info. The second parameter is the session index. Type Parameters TSessionInformation The type of the session info. Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, SitePinInfo>) Does an operation on all sessions and channels in parallel. public static void Do<TSessionInformation>(this ISessionsBundle<TSessionInformation> sessionsBundle, Action<TSessionInformation, SitePinInfo> action) Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. action Action<TSessionInformation, SitePinInfo> The operation to happen on each session info. The second parameter is the SitePinInfo associated with a single channel. Type Parameters TSessionInformation The type of the session info. Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int, SitePinInfo>) Does an operation on all sessions in parallel. public static void Do<TSessionInformation>(this ISessionsBundle<TSessionInformation> sessionsBundle, Action<TSessionInformation, int, SitePinInfo> action) Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. action Action<TSessionInformation, int, SitePinInfo> The operation to happen on each session info. The second parameter is the session index. The third parameter is the SitePinInfo associates with a single channel. Type Parameters TSessionInformation The type of the session info."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.ParallelExecution.DoAndPublishResults.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.ParallelExecution.DoAndPublishResults.html",
    "title": "Method DoAndPublishResults | Semiconductor Test Library",
    "keywords": "Method DoAndPublishResults Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double>, string) Does an operation and publishes the results. public static double[] DoAndPublishResults<TSessionInformation>(this ISessionsBundle<TSessionInformation> sessionsBundle, Func<TSessionInformation, double> function, string publishedDataId = \"\") Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. function Func<TSessionInformation, double> The operation to happen on each session info. publishedDataId string The unique data id to use when publishing. Returns double[] The per-instrument operation results. Type Parameters TSessionInformation The type of the session info. DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double[]>, string) Does an operation and publishes the results. public static double[][] DoAndPublishResults<TSessionInformation>(this ISessionsBundle<TSessionInformation> sessionsBundle, Func<TSessionInformation, double[]> function, string publishedDataId = \"\") Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. function Func<TSessionInformation, double[]> The operation to happen on each session info. publishedDataId string The unique data id to use when publishing. Returns double[][] The per-instrument per-channel operation results as a jagged array. Where, the first dimension represents the instrument sessions, and the second dimension represents the instrument channels within an instrument session. Type Parameters TSessionInformation The type of the session info. DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool>, string) Does an operation and publishes the results. public static bool[] DoAndPublishResults<TSessionInformation>(this ISessionsBundle<TSessionInformation> sessionsBundle, Func<TSessionInformation, bool> function, string publishedDataId = \"\") Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. function Func<TSessionInformation, bool> The operation to happen on each session info. publishedDataId string The unique data id to use when publishing. Returns bool[] The per-instrument operation results. Type Parameters TSessionInformation The type of the session info. DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool[]>, string) Does an operation and publishes the results. public static bool[][] DoAndPublishResults<TSessionInformation>(this ISessionsBundle<TSessionInformation> sessionsBundle, Func<TSessionInformation, bool[]> function, string publishedDataId = \"\") Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. function Func<TSessionInformation, bool[]> The operation to happen on each session info. publishedDataId string The unique data id to use when publishing. Returns bool[][] The per-instrument per-channel operation results as a jagged array. Where, the first dimension represents the instrument sessions, and the second dimension represents the instrument channels within an instrument session. Type Parameters TSessionInformation The type of the session info. DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<double[], double[]>>, string, string) Does an operation and publishes the results. public static Tuple<double[][], double[][]> DoAndPublishResults<TSessionInformation>(this ISessionsBundle<TSessionInformation> sessionsBundle, Func<TSessionInformation, Tuple<double[], double[]>> function, string publishedDataId1 = \"\", string publishedDataId2 = \"\") Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. function Func<TSessionInformation, Tuple<double[], double[]>> The operation to happen on each session info. This operation returns two results. publishedDataId1 string The unique data id to use when publishing the first operation result. publishedDataId2 string The unique data id to use when publishing the second operation result. Returns Tuple<double[][], double[][]> The two per-instrument per-channel operation results as a tuple of two jagged arrays, one for each set of results. Where, the first dimension of each jagged array represents the instrument sessions, and the second dimension represents the instrument channels within an instrument session. Type Parameters TSessionInformation The type of the session info."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.ParallelExecution.DoAndReturnPerInstrumentPerChannelResults.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.ParallelExecution.DoAndReturnPerInstrumentPerChannelResults.html",
    "title": "Method DoAndReturnPerInstrumentPerChannelResults | Semiconductor Test Library",
    "keywords": "Method DoAndReturnPerInstrumentPerChannelResults Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult>) Does an operation on all sessions in parallel with the same inputs and returns per-instrument per-channel results. public static TResult[] DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(this ISessionsBundle<TSessionInformation> sessionsBundle, Func<TSessionInformation, TResult> function) Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. function Func<TSessionInformation, TResult> The operation to happen on each session info. Returns TResult[] An array of the operation results for all sessions. Type Parameters TSessionInformation The type of the session info. TResult The type of the operation result. DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) Does an operation on all sessions and channels in parallel and returns per-instrument per-channel results. public static TResult[][] DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(this ISessionsBundle<TSessionInformation> sessionsBundle, Func<TSessionInformation, SitePinInfo, TResult> function) Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. function Func<TSessionInformation, SitePinInfo, TResult> The operation to happen on each session info. The second parameter is the SitePinInfo associated with a single channel. Returns TResult[][] An array of the operation results for all sessions. Type Parameters TSessionInformation The type of the session info. TResult The type of the operation result. DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1, TResult2>>) Does an operation on all sessions in parallel with the same inputs and returns per-instrument per-channel results. public static Tuple<TResult1[], TResult2[]> DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult1, TResult2>(this ISessionsBundle<TSessionInformation> sessionsBundle, Func<TSessionInformation, Tuple<TResult1, TResult2>> function) Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. function Func<TSessionInformation, Tuple<TResult1, TResult2>> The operation to happen on each session info. Returns Tuple<TResult1[], TResult2[]> Two arrays of the operation results for all sessions. Type Parameters TSessionInformation The type of the session info. TResult1 The type of the first item of the operation result. TResult2 The type of the second item of the operation result."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.ParallelExecution.DoAndReturnPerSitePerPinResults.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.ParallelExecution.DoAndReturnPerSitePerPinResults.html",
    "title": "Method DoAndReturnPerSitePerPinResults | Semiconductor Test Library",
    "keywords": "Method DoAndReturnPerSitePerPinResults Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[]>) Does an operation on all sessions in parallel with the same inputs and returns per-site per-pin results. public static PinSiteData<TResult> DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(this ISessionsBundle<TSessionInformation> sessionsBundle, Func<TSessionInformation, TResult[]> function) Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. function Func<TSessionInformation, TResult[]> The operation to happen on each session info. Returns PinSiteData<TResult> The per-site per-pin results of the operation. Type Parameters TSessionInformation The type of the session info. TResult The type of the operation result. Remarks The output parameter of the function is the per-instrument all channels result. DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) Does an operation on all sessions and channels in parallel and returns per-site per-pin results. public static PinSiteData<TResult> DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(this ISessionsBundle<TSessionInformation> sessionsBundle, Func<TSessionInformation, SitePinInfo, TResult> function) Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. function Func<TSessionInformation, SitePinInfo, TResult> The operation to happen on each session info. The second parameter is the SitePinInfo associated with a single channel. Returns PinSiteData<TResult> The per-site per-pin results of the operation. Type Parameters TSessionInformation The type of the session info. TResult The type of the operation result. Remarks The output parameter of the function is the per-instrument per channel result. DoAndReturnPerSitePerPinResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1[], TResult2[]>>) Does an operation on all sessions in parallel with the same inputs and returns per-site per-pin results. public static Tuple<PinSiteData<TResult1>, PinSiteData<TResult2>> DoAndReturnPerSitePerPinResults<TSessionInformation, TResult1, TResult2>(this ISessionsBundle<TSessionInformation> sessionsBundle, Func<TSessionInformation, Tuple<TResult1[], TResult2[]>> function) Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. function Func<TSessionInformation, Tuple<TResult1[], TResult2[]>> The operation to happen on each session info. Returns Tuple<PinSiteData<TResult1>, PinSiteData<TResult2>> The per-site per-pin results of the operation. Type Parameters TSessionInformation The type of the session info. TResult1 The element type of the first array item of the operation result. TResult2 The element type of the second array item of the operation result. Remarks The output parameter of the function is the per-instrument all channels result. DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[,]>) Does an operation on all sessions in parallel with the same inputs and returns per-site per-pin results. public static PinSiteData<TResult[]> DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(this ISessionsBundle<TSessionInformation> sessionsBundle, Func<TSessionInformation, TResult[,]> function) Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. function Func<TSessionInformation, TResult[,]> The operation to happen on each session info. Returns PinSiteData<TResult[]> The per-site per-pin results of the operation. Type Parameters TSessionInformation The type of the session info. TResult The type of the operation result. Remarks The output parameter of the function is the per-instrument all channels result. DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, int, TResult[]>) Does an operation on all sessions in parallel with the same inputs and returns per-site per-pin results. public static PinSiteData<TResult> DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(this ISessionsBundle<TSessionInformation> sessionsBundle, Func<TSessionInformation, int, TResult[]> function) Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. function Func<TSessionInformation, int, TResult[]> The operation to happen on each session info. The second parameter is the session index. The output parameter is the per-instrument result. Returns PinSiteData<TResult> The per-site per-pin results of the operation. Type Parameters TSessionInformation The type of the session info. TResult The type of the operation result."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.ParallelExecution.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.ParallelExecution.html",
    "title": "Class ParallelExecution | Semiconductor Test Library",
    "keywords": "Class ParallelExecution Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines utility methods for handling parallel execution. public static class ParallelExecution Inheritance object ParallelExecution Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool[]>, string) Does an operation and publishes the results. DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool>, string) Does an operation and publishes the results. DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double[]>, string) Does an operation and publishes the results. DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double>, string) Does an operation and publishes the results. DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<double[], double[]>>, string, string) Does an operation and publishes the results. DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) Does an operation on all sessions and channels in parallel and returns per-instrument per-channel results. DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult>) Does an operation on all sessions in parallel with the same inputs and returns per-instrument per-channel results. DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1, TResult2>>) Does an operation on all sessions in parallel with the same inputs and returns per-instrument per-channel results. DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) Does an operation on all sessions and channels in parallel and returns per-site per-pin results. DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, int, TResult[]>) Does an operation on all sessions in parallel with the same inputs and returns per-site per-pin results. DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[,]>) Does an operation on all sessions in parallel with the same inputs and returns per-site per-pin results. DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[]>) Does an operation on all sessions in parallel with the same inputs and returns per-site per-pin results. DoAndReturnPerSitePerPinResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1[], TResult2[]>>) Does an operation on all sessions in parallel with the same inputs and returns per-site per-pin results. Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, SitePinInfo>) Does an operation on all sessions and channels in parallel. Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int, SitePinInfo>) Does an operation on all sessions in parallel. Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int>) Does an operation on all sessions in parallel with session specific inputs. Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation>) Does an operation on all sessions in parallel with the same inputs."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Publish.PublishResults.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Publish.PublishResults.html",
    "title": "Method PublishResults | Semiconductor Test Library",
    "keywords": "Method PublishResults Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll PublishResults<T>(ISemiconductorModuleContext, PinSiteData<T>, string) Publishes measurement results. public static void PublishResults<T>(this ISemiconductorModuleContext tsmContext, PinSiteData<T> results, string publishedDataId) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. results PinSiteData<T> The measurement results to publish. publishedDataId string The unique data id to use when publishing. Type Parameters T The type of the measurement data. PublishResults<T>(ISemiconductorModuleContext, SiteData<T>, string, string) Publishes measurement results for a specific pin. public static void PublishResults<T>(this ISemiconductorModuleContext tsmContext, SiteData<T> results, string publishedDataId, string pin = \"\") Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. results SiteData<T> The measurement results to publish. publishedDataId string The unique data id to use when publishing. pin string The pin to publish results for. Type Parameters T The type of the measurement data. PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[][], string) Publishes measurement results. public static void PublishResults<TSessionInformation, TData>(this ISessionsBundle<TSessionInformation> sessionsBundle, TData[][] results, string publishedDataId) Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. results TData[][] The multisite measurement results from multiple pins connected to multiple instrument sessions. The data is in the form of an array of arrays. Each element in the data array is an array that contains the measurement results for the channels of a single instrument session. publishedDataId string The unique data id to use when publishing. Type Parameters TSessionInformation The session information object. TData The type of the measurement data. PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[], string) Publishes measurement results. public static void PublishResults<TSessionInformation, TData>(this ISessionsBundle<TSessionInformation> sessionsBundle, TData[] results, string publishedDataId) Parameters sessionsBundle ISessionsBundle<TSessionInformation> The sessions bundle object. results TData[] The multisite measurement results from multiple pins connected to multiple instrument sessions. Each element in the array represents a measurement made for a single channel from each instrument session. publishedDataId string The unique data id to use when publishing. Type Parameters TSessionInformation The session information object. TData The type of the measurement data."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Publish.PublishSingleSiteResult.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Publish.PublishSingleSiteResult.html",
    "title": "Method PublishSingleSiteResult | Semiconductor Test Library",
    "keywords": "Method PublishSingleSiteResult Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll PublishSingleSiteResult<T>(ISemiconductorModuleContext, T, string, string) Publishes measurement result for a specific site-pin pair. public static void PublishSingleSiteResult<T>(this ISemiconductorModuleContext tsmSingleSiteContext, T result, string publishedDataId, string pin = \"\") Parameters tsmSingleSiteContext ISemiconductorModuleContext The single site NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. result T The measurement result to publish. publishedDataId string The unique data id to use when publishing. pin string The pin to publish results for. Type Parameters T The type of the measurement data. Remarks Use this method with a single site context only."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Publish.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Publish.html",
    "title": "Class Publish | Semiconductor Test Library",
    "keywords": "Class Publish Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines measurement results publish methods. public static class Publish Inheritance object Publish Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods PublishResults<T>(ISemiconductorModuleContext, PinSiteData<T>, string) Publishes measurement results. PublishResults<T>(ISemiconductorModuleContext, SiteData<T>, string, string) Publishes measurement results for a specific pin. PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[], string) Publishes measurement results. PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[][], string) Publishes measurement results. PublishSingleSiteResult<T>(ISemiconductorModuleContext, T, string, string) Publishes measurement result for a specific site-pin pair."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SitePinInfo.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SitePinInfo.-ctor.html",
    "title": "Constructor SitePinInfo | Semiconductor Test Library",
    "keywords": "Constructor SitePinInfo Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll SitePinInfo(string) Constructs a site-pin pair. public SitePinInfo(string sitePinString) Parameters sitePinString string The site-pin pair in \"site0/A\" format. SitePinInfo(int, string) Constructs a site-pin pair. public SitePinInfo(int siteNumber, string pinName) Parameters siteNumber int The site number. Specify -1 for a system pin. pinName string The pin name. SitePinInfo(int, string, string, string) Constructs a site-pin pair. public SitePinInfo(int siteNumber, string pinName, string invididualChannelString, string modelString = \"\") Parameters siteNumber int The site number. Specify -1 for a system pin. pinName string The pin name. invididualChannelString string The individual channel string. modelString string The model string of the owning instrument."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SitePinInfo.IndividualChannelString.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SitePinInfo.IndividualChannelString.html",
    "title": "Property IndividualChannelString | Semiconductor Test Library",
    "keywords": "Property IndividualChannelString Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll IndividualChannelString The individual channel string in \"SMU_4147_C1_S06/1\" format. public string IndividualChannelString { get; } Property Value string Remarks This is used to work with site-pin unaware drivers."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SitePinInfo.ModelString.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SitePinInfo.ModelString.html",
    "title": "Property ModelString | Semiconductor Test Library",
    "keywords": "Property ModelString Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ModelString The model string of the owning instrument of the channel associated with this site-pin pair. public string ModelString { get; } Property Value string"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SitePinInfo.PinName.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SitePinInfo.PinName.html",
    "title": "Property PinName | Semiconductor Test Library",
    "keywords": "Property PinName Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll PinName The pin name. public string PinName { get; } Property Value string"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SitePinInfo.SiteNumber.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SitePinInfo.SiteNumber.html",
    "title": "Property SiteNumber | Semiconductor Test Library",
    "keywords": "Property SiteNumber Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll SiteNumber The site number. public int SiteNumber { get; } Property Value int Remarks Site number -1 means it's a system pin."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SitePinInfo.SiteNumberNone.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SitePinInfo.SiteNumberNone.html",
    "title": "Field SiteNumberNone | Semiconductor Test Library",
    "keywords": "Field SiteNumberNone Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines the value of site number for a system pin. public const int SiteNumberNone = -1 Returns int Defines the value of site number for a system pin."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SitePinInfo.SitePinString.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SitePinInfo.SitePinString.html",
    "title": "Property SitePinString | Semiconductor Test Library",
    "keywords": "Property SitePinString Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll SitePinString The site-pin pair in \"site0/A\" format. public string SitePinString { get; } Property Value string Remarks This is used to work with site-pin aware drivers."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SitePinInfo.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SitePinInfo.html",
    "title": "Class SitePinInfo | Semiconductor Test Library",
    "keywords": "Class SitePinInfo Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an object that contains the information for an individual site-pin pair. Such as, the site number, pin name, instrument channel string used by the driver, instrument model, etc. public class SitePinInfo Inheritance object SitePinInfo Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SitePinInfo(int, string) Constructs a site-pin pair. SitePinInfo(int, string, string, string) Constructs a site-pin pair. SitePinInfo(string) Constructs a site-pin pair. Fields SiteNumberNone Defines the value of site number for a system pin. Properties IndividualChannelString The individual channel string in \"SMU_4147_C1_S06/1\" format. ModelString The model string of the owning instrument of the channel associated with this site-pin pair. PinName The pin name. SiteNumber The site number. SitePinString The site-pin pair in \"site0/A\" format."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SystemSettings.PowerLineFrequency.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SystemSettings.PowerLineFrequency.html",
    "title": "Property PowerLineFrequency | Semiconductor Test Library",
    "keywords": "Property PowerLineFrequency Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll PowerLineFrequency The power line frequency of the system. public static double? PowerLineFrequency { get; } Property Value double?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SystemSettings.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.SystemSettings.html",
    "title": "Class SystemSettings | Semiconductor Test Library",
    "keywords": "Class SystemSettings Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines system settings. public static class SystemSettings Inheritance object SystemSettings Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties PowerLineFrequency The power line frequency of the system."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Utilities.ElementAtOrFirst.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Utilities.ElementAtOrFirst.html",
    "title": "Method ElementAtOrFirst | Semiconductor Test Library",
    "keywords": "Method ElementAtOrFirst Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ElementAtOrFirst<T>(T[], int) Returns the element at a specified index in a sequence or the first element if the index is out of range. public static T ElementAtOrFirst<T>(this T[] values, int index) Parameters values T[] The array to return an element from. index int The zero-based index of the element to retrieve. Returns T The first element if the index is outside the bounds of the source sequence. Otherwise, the element at the specified position in the source sequence. Type Parameters T The type of the elements of source array."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Utilities.InvokeInParallel.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Utilities.InvokeInParallel.html",
    "title": "Method InvokeInParallel | Semiconductor Test Library",
    "keywords": "Method InvokeInParallel Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll InvokeInParallel(params Action[]) This method calls the Parallel.Invoke method to execute multiple methods in parallel. If any of the methods generates an exception, this method throws the first exception encountered. This allows the TestStand Semiconductor Module runtime error dialog to properly display the exception. public static void InvokeInParallel(params Action[] actions) Parameters actions Action[] The methods to invoke in parallel."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Utilities.PerInstrumentPerChannelResultsToPerSitePerPinResults.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Utilities.PerInstrumentPerChannelResultsToPerSitePerPinResults.html",
    "title": "Method PerInstrumentPerChannelResultsToPerSitePerPinResults | Semiconductor Test Library",
    "keywords": "Method PerInstrumentPerChannelResultsToPerSitePerPinResults Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll PerInstrumentPerChannelResultsToPerSitePerPinResults<T>(IEnumerable<ISessionInformation>, T[][]) Converts per-instrument per-channel results to per-site per-pin results. public static IDictionary<int, IDictionary<string, T>> PerInstrumentPerChannelResultsToPerSitePerPinResults<T>(this IEnumerable<ISessionInformation> allSessionInfo, T[][] perInstrumentPerChannelResults) Parameters allSessionInfo IEnumerable<ISessionInformation> An enumerable of session info. perInstrumentPerChannelResults T[][] The per-instrument per-channel results to convert. Returns IDictionary<int, IDictionary<string, T>> The converted per-site per-pin results. Type Parameters T The type of the per-instrument per-channel result."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Utilities.PerInstrumentPerChannelResultsToPinSiteData.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Utilities.PerInstrumentPerChannelResultsToPinSiteData.html",
    "title": "Method PerInstrumentPerChannelResultsToPinSiteData | Semiconductor Test Library",
    "keywords": "Method PerInstrumentPerChannelResultsToPinSiteData Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll PerInstrumentPerChannelResultsToPinSiteData<T>(IEnumerable<ISessionInformation>, T[][]) Converts per-instrument per-channel results to PinSiteData. public static PinSiteData<T> PerInstrumentPerChannelResultsToPinSiteData<T>(this IEnumerable<ISessionInformation> allSessionInfo, T[][] perInstrumentPerChannelResults) Parameters allSessionInfo IEnumerable<ISessionInformation> An enumerable of session info. perInstrumentPerChannelResults T[][] The per-instrument per-channel results to convert. Returns PinSiteData<T> The converted PinSiteData. Type Parameters T The type of the per-instrument per-channel result."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Utilities.PreciseWait.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Utilities.PreciseWait.html",
    "title": "Method PreciseWait | Semiconductor Test Library",
    "keywords": "Method PreciseWait Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll PreciseWait(double?) This method blocks the thread and waits for the specified amount of time. This method uses the Stopwatch class to support shorter settling times. public static void PreciseWait(double? timeInSeconds) Parameters timeInSeconds double? The time to precisely wait for. Remarks This method passes through if the time specified is null."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Utilities.ToJaggedArray.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Utilities.ToJaggedArray.html",
    "title": "Method ToJaggedArray | Semiconductor Test Library",
    "keywords": "Method ToJaggedArray Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ToJaggedArray<T>(T[,]) Converts a two dimensional array to a jagged array. public static T[][] ToJaggedArray<T>(this T[,] twoDimensionalArray) Parameters twoDimensionalArray T[,] The two dimensional array to be converted. Returns T[][] The converted jagged array. Type Parameters T The element type of the array."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Utilities.TryDeterminePowerLineFrequency.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Utilities.TryDeterminePowerLineFrequency.html",
    "title": "Method TryDeterminePowerLineFrequency | Semiconductor Test Library",
    "keywords": "Method TryDeterminePowerLineFrequency Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll TryDeterminePowerLineFrequency(ref double) Tries to determine the power line frequency of the PXI chassis using the SystemConfiguration API. public static void TryDeterminePowerLineFrequency(ref double powerLineFrequency) Parameters powerLineFrequency double The power line frequency variable to be updated. It falls back to the original value when the try fails."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Utilities.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.Utilities.html",
    "title": "Class Utilities | Semiconductor Test Library",
    "keywords": "Class Utilities Namespace NationalInstruments.SemiconductorTestLibrary.Common Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Provides general helper methods. public static class Utilities Inheritance object Utilities Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ElementAtOrFirst<T>(T[], int) Returns the element at a specified index in a sequence or the first element if the index is out of range. InvokeInParallel(params Action[]) This method calls the Parallel.Invoke method to execute multiple methods in parallel. If any of the methods generates an exception, this method throws the first exception encountered. This allows the TestStand Semiconductor Module runtime error dialog to properly display the exception. PerInstrumentPerChannelResultsToPerSitePerPinResults<T>(IEnumerable<ISessionInformation>, T[][]) Converts per-instrument per-channel results to per-site per-pin results. PerInstrumentPerChannelResultsToPinSiteData<T>(IEnumerable<ISessionInformation>, T[][]) Converts per-instrument per-channel results to PinSiteData. PreciseWait(double?) This method blocks the thread and waits for the specified amount of time. This method uses the Stopwatch class to support shorter settling times. ToJaggedArray<T>(T[,]) Converts a two dimensional array to a jagged array. TryDeterminePowerLineFrequency(ref double) Tries to determine the power line frequency of the PXI chassis using the SystemConfiguration API."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.Common.html",
    "title": "Namespace NationalInstruments.SemiconductorTestLibrary.Common | Semiconductor Test Library",
    "keywords": "Namespace NationalInstruments.SemiconductorTestLibrary.Common Classes NISemiconductorTestException Defines a specific exception for NI Semiconductor Test Library. ParallelExecution Defines utility methods for handling parallel execution. Publish Defines measurement results publish methods. SitePinInfo Defines an object that contains the information for an individual site-pin pair. Such as, the site number, pin name, instrument channel string used by the driver, instrument model, etc. SystemSettings Defines system settings. Utilities Provides general helper methods. Enums MeasurementType Defines whether to measure voltage or current."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.ComparisonType.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.ComparisonType.html",
    "title": "Enum ComparisonType | Semiconductor Test Library",
    "keywords": "Enum ComparisonType Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines types of comparison results. public enum ComparisonType Fields EqualTo = 0 The comparison result is equal. GreaterThan = 4 The comparison result is greater than. GreaterThanOrEqualTo = 5 The comparison result is greater than or equal to. LessThan = 2 The comparison result is less than. LessThanOrEqualTo = 3 The comparison result is less than or equal to. NotEqualTo = 1 The comparison result is not equal."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.-ctor.html",
    "title": "Constructor PinSiteData | Semiconductor Test Library",
    "keywords": "Constructor PinSiteData Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll PinSiteData(string[], SiteData<T>[]) Initializes PinSiteData with pin names and associated SiteData array. public PinSiteData(string[] pinNames, SiteData<T>[] data) Parameters pinNames string[] The pin names array. data SiteData<T>[] The per-pin SiteData array. PinSiteData(Dictionary<string, IDictionary<int, T>>) Initializes PinSiteData with multiple pins multiple sites data. public PinSiteData(Dictionary<string, IDictionary<int, T>> pinSiteData) Parameters pinSiteData Dictionary<string, IDictionary<int, T>> The multiple pins multiple sites data."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Abs.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Abs.html",
    "title": "Method Abs | Semiconductor Test Library",
    "keywords": "Method Abs Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Abs() Performs Math.Abs operation on every element in current PinSiteData. public PinSiteData<T> Abs() Returns PinSiteData<T> A new PinSiteData that contains absolute value for each element in current PinSiteData."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Add.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Add.html",
    "title": "Method Add | Semiconductor Test Library",
    "keywords": "Method Add Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Add(T) Performs add operation between every element in current PinSiteData and the given value. public PinSiteData<T> Add(T value) Parameters value T The scalar value to be added. Returns PinSiteData<T> A new PinSiteData that contains the result of the addition. Add(SiteData<T>) Performs add operation between every element in current PinSiteData and the given SiteData. public PinSiteData<T> Add(SiteData<T> other) Parameters other SiteData<T> The other SiteData<T> to be added. Returns PinSiteData<T> A new PinSiteData that contains the result of the addition. Add(PinSiteData<T>) Performs add operation between every element in current PinSiteData and the given PinSiteData. public PinSiteData<T> Add(PinSiteData<T> other) Parameters other PinSiteData<T> The other PinSiteData<T> to be added. Returns PinSiteData<T> A new PinSiteData that contains the result of the addition."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Compare.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Compare.html",
    "title": "Method Compare | Semiconductor Test Library",
    "keywords": "Method Compare Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Compare(ComparisonType, T) Performs compare operation between every element in current PinSiteData and the given value. public PinSiteData<bool> Compare(ComparisonType comparisonType, T value) Parameters comparisonType ComparisonType The comparison type to use. value T The scalar value to compare to. Returns PinSiteData<bool> A new PinSiteData that contains the compare results. Compare(ComparisonType, SiteData<T>) Performs compare operation between every element in current PinSiteData and the given SiteData. public PinSiteData<bool> Compare(ComparisonType comparisonType, SiteData<T> other) Parameters comparisonType ComparisonType The comparison type to use. other SiteData<T> The other SiteData<T> to compare to. Returns PinSiteData<bool> A new PinSiteData that contains the compare results. Compare(ComparisonType, PinSiteData<T>) Performs compare operation between every element in current PinSiteData and the given PinSiteData. public PinSiteData<bool> Compare(ComparisonType comparisonType, PinSiteData<T> other) Parameters comparisonType ComparisonType The comparison type to use. other PinSiteData<T> The other PinSiteData<T> to compare to. Returns PinSiteData<bool> A new PinSiteData that contains the compare results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Divide.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Divide.html",
    "title": "Method Divide | Semiconductor Test Library",
    "keywords": "Method Divide Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Divide(T) Performs divide operation between every element in current PinSiteData and the given value. public PinSiteData<double> Divide(T value) Parameters value T The divisor value. Returns PinSiteData<double> A new PinSiteData that contains the results. Divide(SiteData<T>) Performs divide operation between every element in current PinSiteData and the given SiteData. public PinSiteData<double> Divide(SiteData<T> other) Parameters other SiteData<T> The other SiteData<T> that contains the divisors. Returns PinSiteData<double> A new PinSiteData that contains the results. Divide(PinSiteData<T>) Performs divide operation between every element in current PinSiteData and the given PinSiteData. public PinSiteData<double> Divide(PinSiteData<T> other) Parameters other PinSiteData<T> The other PinSiteData<T> that contains the divisors. Returns PinSiteData<double> A new PinSiteData that contains the results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.ExtractPin.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.ExtractPin.html",
    "title": "Method ExtractPin | Semiconductor Test Library",
    "keywords": "Method ExtractPin Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ExtractPin(string) Gets the SiteData<T> for a given pin. public SiteData<T> ExtractPin(string pinName) Parameters pinName string The specified pin name. Returns SiteData<T> The SiteData<T> for the specified pin."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.ExtractPins.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.ExtractPins.html",
    "title": "Method ExtractPins | Semiconductor Test Library",
    "keywords": "Method ExtractPins Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ExtractPins(string[]) Gets a new PinSiteData<T> object for the specified pins. public PinSiteData<T> ExtractPins(string[] pinNames) Parameters pinNames string[] The specified pin names. Returns PinSiteData<T> A new PinSiteData that contains data for given pins."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.ExtractSite.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.ExtractSite.html",
    "title": "Method ExtractSite | Semiconductor Test Library",
    "keywords": "Method ExtractSite Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ExtractSite(int) Gets the data for a given site number. public IDictionary<string, T> ExtractSite(int siteNumber) Parameters siteNumber int The specified site number. Returns IDictionary<string, T> The data for the specified site number."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.GetValue.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.GetValue.html",
    "title": "Method GetValue | Semiconductor Test Library",
    "keywords": "Method GetValue Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll GetValue(int, string) Gets the data for a given site number-pin name pair. public T GetValue(int siteNumber, string pinName) Parameters siteNumber int The specified site number. pinName string The specified pin name. Returns T The data for the specified site number and pin name."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Invert.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Invert.html",
    "title": "Method Invert | Semiconductor Test Library",
    "keywords": "Method Invert Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Invert() Performs invert operation on every element in current PinSiteData. public PinSiteData<double> Invert() Returns PinSiteData<double> A new PinSiteData that contains the inverted results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Log10.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Log10.html",
    "title": "Method Log10 | Semiconductor Test Library",
    "keywords": "Method Log10 Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Log10() Performs Math.Log10 operation on every element in current PinSiteData. public PinSiteData<double> Log10() Returns PinSiteData<double> A new PinSiteData that contains the log10 results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Maximum.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Maximum.html",
    "title": "Method Maximum | Semiconductor Test Library",
    "keywords": "Method Maximum Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Maximum(T) Returns the larger one of the element in current PinSiteData and the given value. public PinSiteData<T> Maximum(T value) Parameters value T The value to compare. Returns PinSiteData<T> A new PinSiteData that contains the larger values. Maximum(SiteData<T>) Returns the larger one of the element in current PinSiteData and the given SiteData. public PinSiteData<T> Maximum(SiteData<T> other) Parameters other SiteData<T> The other SiteData<T> that contains the values to compare. Returns PinSiteData<T> A new PinSiteData that contains the larger values. Maximum(PinSiteData<T>) Returns the larger one of the element in current PinSiteData and the given PinSiteData. public PinSiteData<T> Maximum(PinSiteData<T> other) Parameters other PinSiteData<T> The other PinSiteData<T> that contains the values to compare. Returns PinSiteData<T> A new PinSiteData that contains the larger values."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Minimum.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Minimum.html",
    "title": "Method Minimum | Semiconductor Test Library",
    "keywords": "Method Minimum Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Minimum(T) Returns the smaller one of the element in current PinSiteData and the given value. public PinSiteData<T> Minimum(T value) Parameters value T The value to compare. Returns PinSiteData<T> A new PinSiteData that contains the smaller values. Minimum(SiteData<T>) Returns the smaller one of the element in current PinSiteData and the given SiteData. public PinSiteData<T> Minimum(SiteData<T> other) Parameters other SiteData<T> The other SiteData<T> that contains the values to compare. Returns PinSiteData<T> A new PinSiteData that contains the smaller values. Minimum(PinSiteData<T>) Returns the smaller one of the element in current PinSiteData and the given PinSiteData. public PinSiteData<T> Minimum(PinSiteData<T> other) Parameters other PinSiteData<T> The other PinSiteData<T> that contains the values to compare. Returns PinSiteData<T> A new PinSiteData that contains the smaller values."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Multiply.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Multiply.html",
    "title": "Method Multiply | Semiconductor Test Library",
    "keywords": "Method Multiply Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Multiply(T) Performs multiply operation on every element in current PinSiteData and the given value. public PinSiteData<T> Multiply(T value) Parameters value T The multiplier. Returns PinSiteData<T> A new PinSiteData that contains the multiply results. Multiply(SiteData<T>) Performs multiply operation on every element in current PinSiteData and the given SiteData. public PinSiteData<T> Multiply(SiteData<T> other) Parameters other SiteData<T> The other SiteData<T> that contains multipliers. Returns PinSiteData<T> A new PinSiteData that contains the multiply results. Multiply(PinSiteData<T>) Performs multiply operation on every element in current PinSiteData and the given PinSiteData. public PinSiteData<T> Multiply(PinSiteData<T> other) Parameters other PinSiteData<T> The other PinSiteData<T> that contains multipliers. Returns PinSiteData<T> A new PinSiteData that contains the multiply results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Negate.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Negate.html",
    "title": "Method Negate | Semiconductor Test Library",
    "keywords": "Method Negate Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Negate() Returns the negative value of every element in current PinSiteData. public PinSiteData<T> Negate() Returns PinSiteData<T> A new PinSiteData that contains the negative values."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.PinNames.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.PinNames.html",
    "title": "Property PinNames | Semiconductor Test Library",
    "keywords": "Property PinNames Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll PinNames Returns an array of pin names associated with current PinSiteData. public string[] PinNames { get; } Property Value string[]"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Power.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Power.html",
    "title": "Method Power | Semiconductor Test Library",
    "keywords": "Method Power Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Power(T) Raises every element in current PinSiteData to the power of the given value. public PinSiteData<T> Power(T value) Parameters value T The value to use as the power. Returns PinSiteData<T> A new PinSiteData that contains the results. Power(SiteData<T>) Raises every element in current PinSiteData to the power of every element in given SiteData. public PinSiteData<T> Power(SiteData<T> other) Parameters other SiteData<T> The other SiteData<T> that contains power values. Returns PinSiteData<T> A new PinSiteData that contains the results. Power(PinSiteData<T>) Raises every element in current PinSiteData to the power of every element in given PinSiteData. public PinSiteData<T> Power(PinSiteData<T> other) Parameters other PinSiteData<T> The other PinSiteData<T> that contains power values. Returns PinSiteData<T> A new PinSiteData that contains the results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.SiteNumbers.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.SiteNumbers.html",
    "title": "Property SiteNumbers | Semiconductor Test Library",
    "keywords": "Property SiteNumbers Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll SiteNumbers Returns an array of sites associated with current PinSiteData. public int[] SiteNumbers { get; } Property Value int[]"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.SquareRoot.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.SquareRoot.html",
    "title": "Method SquareRoot | Semiconductor Test Library",
    "keywords": "Method SquareRoot Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll SquareRoot() Returns the square root of every element in current PinSiteData. public PinSiteData<double> SquareRoot() Returns PinSiteData<double> A new PinSiteData that contains the square root values."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Subtract.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Subtract.html",
    "title": "Method Subtract | Semiconductor Test Library",
    "keywords": "Method Subtract Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Subtract(T) Subtracts the given value from every element in current PinSiteData. public PinSiteData<T> Subtract(T value) Parameters value T The value to subtract. Returns PinSiteData<T> A new PinSiteData that contains the results. Subtract(SiteData<T>) Subtracts every element in given PinSiteData from every element in current SiteData. public PinSiteData<T> Subtract(SiteData<T> other) Parameters other SiteData<T> The other SiteData<T> that contains values to subtract. Returns PinSiteData<T> A new PinSiteData that contains the results. Subtract(PinSiteData<T>) Subtracts every element in given PinSiteData from every element in current PinSiteData. public PinSiteData<T> Subtract(PinSiteData<T> other) Parameters other PinSiteData<T> The other PinSiteData<T> that contains values to subtract. Returns PinSiteData<T> A new PinSiteData that contains the results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Truncate.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.Truncate.html",
    "title": "Method Truncate | Semiconductor Test Library",
    "keywords": "Method Truncate Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Truncate() Returns integer portion of every element in current PinSiteData. public PinSiteData<T> Truncate() Returns PinSiteData<T> A new PinSiteData that contains integer values."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.PinSiteData-1.html",
    "title": "Class PinSiteData<T> | Semiconductor Test Library",
    "keywords": "Class PinSiteData<T> Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an object containing values for one or more sites that is associated with a particular pin or set of pins, where T can be passed as any data type. public class PinSiteData<T> Type Parameters T Inheritance object PinSiteData<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors PinSiteData(Dictionary<string, IDictionary<int, T>>) Initializes PinSiteData with multiple pins multiple sites data. PinSiteData(string[], SiteData<T>[]) Initializes PinSiteData with pin names and associated SiteData array. Properties PinNames Returns an array of pin names associated with current PinSiteData. SiteNumbers Returns an array of sites associated with current PinSiteData. Methods Abs() Performs Math.Abs operation on every element in current PinSiteData. Add(PinSiteData<T>) Performs add operation between every element in current PinSiteData and the given PinSiteData. Add(SiteData<T>) Performs add operation between every element in current PinSiteData and the given SiteData. Add(T) Performs add operation between every element in current PinSiteData and the given value. Compare(ComparisonType, PinSiteData<T>) Performs compare operation between every element in current PinSiteData and the given PinSiteData. Compare(ComparisonType, SiteData<T>) Performs compare operation between every element in current PinSiteData and the given SiteData. Compare(ComparisonType, T) Performs compare operation between every element in current PinSiteData and the given value. Divide(PinSiteData<T>) Performs divide operation between every element in current PinSiteData and the given PinSiteData. Divide(SiteData<T>) Performs divide operation between every element in current PinSiteData and the given SiteData. Divide(T) Performs divide operation between every element in current PinSiteData and the given value. ExtractPin(string) Gets the SiteData<T> for a given pin. ExtractPins(string[]) Gets a new PinSiteData<T> object for the specified pins. ExtractSite(int) Gets the data for a given site number. GetValue(int, string) Gets the data for a given site number-pin name pair. Invert() Performs invert operation on every element in current PinSiteData. Log10() Performs Math.Log10 operation on every element in current PinSiteData. Maximum(PinSiteData<T>) Returns the larger one of the element in current PinSiteData and the given PinSiteData. Maximum(SiteData<T>) Returns the larger one of the element in current PinSiteData and the given SiteData. Maximum(T) Returns the larger one of the element in current PinSiteData and the given value. Minimum(PinSiteData<T>) Returns the smaller one of the element in current PinSiteData and the given PinSiteData. Minimum(SiteData<T>) Returns the smaller one of the element in current PinSiteData and the given SiteData. Minimum(T) Returns the smaller one of the element in current PinSiteData and the given value. Multiply(PinSiteData<T>) Performs multiply operation on every element in current PinSiteData and the given PinSiteData. Multiply(SiteData<T>) Performs multiply operation on every element in current PinSiteData and the given SiteData. Multiply(T) Performs multiply operation on every element in current PinSiteData and the given value. Negate() Returns the negative value of every element in current PinSiteData. Power(PinSiteData<T>) Raises every element in current PinSiteData to the power of every element in given PinSiteData. Power(SiteData<T>) Raises every element in current PinSiteData to the power of every element in given SiteData. Power(T) Raises every element in current PinSiteData to the power of the given value. SquareRoot() Returns the square root of every element in current PinSiteData. Subtract(PinSiteData<T>) Subtracts every element in given PinSiteData from every element in current PinSiteData. Subtract(SiteData<T>) Subtracts every element in given PinSiteData from every element in current SiteData. Subtract(T) Subtracts the given value from every element in current PinSiteData. Truncate() Returns integer portion of every element in current PinSiteData."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.-ctor.html",
    "title": "Constructor SiteData | Semiconductor Test Library",
    "keywords": "Constructor SiteData Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll SiteData(T[]) Initializes SiteData with multiple sites data array. The array index represents site number. public SiteData(T[] data) Parameters data T[] The data array. SiteData(IDictionary<int, T>) Initializes SiteData with per-pin multiple sites data. public SiteData(IDictionary<int, T> data) Parameters data IDictionary<int, T> The per-pin multiple sites data. SiteData(int[], T) Initializes a SiteData object with the same data value across all active sites. Each element in the siteNumbers array represents an active site number/value. public SiteData(int[] siteNumbers, T data) Parameters siteNumbers int[] The number of active sites. data T The data."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Abs.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Abs.html",
    "title": "Method Abs | Semiconductor Test Library",
    "keywords": "Method Abs Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Abs() Performs Math.Abs operation on every element in current SiteData. public SiteData<T> Abs() Returns SiteData<T> A new SiteData that contains absolute value for each element in current SiteData."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Add.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Add.html",
    "title": "Method Add | Semiconductor Test Library",
    "keywords": "Method Add Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Add(T) Performs add operation between every element in current SiteData and the given value. public SiteData<T> Add(T value) Parameters value T The scalar value to be added. Returns SiteData<T> A new SiteData that contains the sum of the addition. Add(SiteData<T>) Performs add operation between every element in current SiteData and the given SiteData. public SiteData<T> Add(SiteData<T> other) Parameters other SiteData<T> The other SiteData<T> to be added. Returns SiteData<T> A new SiteData that contains the sum of the addition."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Compare.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Compare.html",
    "title": "Method Compare | Semiconductor Test Library",
    "keywords": "Method Compare Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Compare(ComparisonType, T) Performs compare operation between every element in current SiteData and the given value. public SiteData<bool> Compare(ComparisonType comparisonType, T value) Parameters comparisonType ComparisonType The comparison type to use. value T The scalar value to compare. Returns SiteData<bool> A new SiteData that contains the compare results. Compare(ComparisonType, SiteData<T>) Performs compare operation between every element in current SiteData and the given SiteData. public SiteData<bool> Compare(ComparisonType comparisonType, SiteData<T> other) Parameters comparisonType ComparisonType The comparison type to use. other SiteData<T> The other SiteData<T> to compare. Returns SiteData<bool> A new SiteData that contains the compare results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Divide.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Divide.html",
    "title": "Method Divide | Semiconductor Test Library",
    "keywords": "Method Divide Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Divide(T) Performs divide operation between every element in current SiteData and the given value. public SiteData<double> Divide(T value) Parameters value T The divisor value. Returns SiteData<double> A new SiteData that contains the results. Divide(SiteData<T>) Performs divide operation between every element in current SiteData and the given SiteData. public SiteData<double> Divide(SiteData<T> other) Parameters other SiteData<T> The other SiteData<T> that contains the divisors. Returns SiteData<double> A new SiteData that contains the results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.GetValue.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.GetValue.html",
    "title": "Method GetValue | Semiconductor Test Library",
    "keywords": "Method GetValue Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll GetValue(int) Gets the data for a given site number. public T GetValue(int siteNumber) Parameters siteNumber int The site number. Returns T Single site data."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Invert.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Invert.html",
    "title": "Method Invert | Semiconductor Test Library",
    "keywords": "Method Invert Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Invert() Performs invert operation on every element in current SiteData. public SiteData<double> Invert() Returns SiteData<double> A new SiteData that contains the inverted results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Log10.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Log10.html",
    "title": "Method Log10 | Semiconductor Test Library",
    "keywords": "Method Log10 Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Log10() Performs Math.Log10 operation on every element in current SiteData. public SiteData<double> Log10() Returns SiteData<double> A new SiteData that contains the log10 results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Maximum.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Maximum.html",
    "title": "Method Maximum | Semiconductor Test Library",
    "keywords": "Method Maximum Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Maximum(T) Returns the larger of the element in current SiteData and the given value. public SiteData<T> Maximum(T value) Parameters value T The value to compare. Returns SiteData<T> A new SiteData that contains the larger values. Maximum(SiteData<T>) Returns the larger of the element in current SiteData and the given SiteData. public SiteData<T> Maximum(SiteData<T> other) Parameters other SiteData<T> The other SiteData<T> that contains the values to compare. Returns SiteData<T> A new SiteData that contains the larger values."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Minimum.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Minimum.html",
    "title": "Method Minimum | Semiconductor Test Library",
    "keywords": "Method Minimum Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Minimum(T) Returns the smaller of the element in current SiteData and the given value. public SiteData<T> Minimum(T value) Parameters value T The value to compare. Returns SiteData<T> A new SiteData that contains the smaller values. Minimum(SiteData<T>) Returns the smaller of the element in current SiteData and the given SiteData. public SiteData<T> Minimum(SiteData<T> other) Parameters other SiteData<T> The other SiteData<T> that contains the values to compare. Returns SiteData<T> A new SiteData that contains the smaller values."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Multiply.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Multiply.html",
    "title": "Method Multiply | Semiconductor Test Library",
    "keywords": "Method Multiply Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Multiply(T) Performs multiply operation on every element in current SiteData and the given value. public SiteData<T> Multiply(T value) Parameters value T The multiplier. Returns SiteData<T> A new SiteData that contains the multiply results. Multiply(SiteData<T>) Performs multiply operation on every element in current SiteData and the given SiteData. public SiteData<T> Multiply(SiteData<T> other) Parameters other SiteData<T> The other SiteData<T> that contains multipliers. Returns SiteData<T> A new SiteData that contains the multiply results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Negate.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Negate.html",
    "title": "Method Negate | Semiconductor Test Library",
    "keywords": "Method Negate Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Negate() Returns the negative value of every element in current SiteData. public SiteData<T> Negate() Returns SiteData<T> A new SiteData that contains the negative values."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Power.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Power.html",
    "title": "Method Power | Semiconductor Test Library",
    "keywords": "Method Power Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Power(T) Raises every element in current SiteData to the power of the given value. public SiteData<T> Power(T value) Parameters value T The value to use as the power. Returns SiteData<T> A new SiteData that contains the results. Power(SiteData<T>) Raises every element in current SiteData to the power of every element in given SiteData. public SiteData<T> Power(SiteData<T> other) Parameters other SiteData<T> The other SiteData<T> that contains power values. Returns SiteData<T> A new SiteData that contains the results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.SiteNumbers.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.SiteNumbers.html",
    "title": "Property SiteNumbers | Semiconductor Test Library",
    "keywords": "Property SiteNumbers Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll SiteNumbers Returns an array of sites associated with current SiteData. public int[] SiteNumbers { get; } Property Value int[]"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.SquareRoot.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.SquareRoot.html",
    "title": "Method SquareRoot | Semiconductor Test Library",
    "keywords": "Method SquareRoot Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll SquareRoot() Returns the square root of every element in current SiteData. public SiteData<double> SquareRoot() Returns SiteData<double> A new SiteData that contains the square root values."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Subtract.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Subtract.html",
    "title": "Method Subtract | Semiconductor Test Library",
    "keywords": "Method Subtract Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Subtract(T) Subtracts the given value from every element in current SiteData. public SiteData<T> Subtract(T value) Parameters value T The value to subtract. Returns SiteData<T> A new SiteData that contains the results. Subtract(SiteData<T>) Subtracts every element in given SiteData from every element in current SiteData. public SiteData<T> Subtract(SiteData<T> other) Parameters other SiteData<T> The other SiteData<T> that contains values to subtract. Returns SiteData<T> A new SiteData that contains the results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Truncate.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.Truncate.html",
    "title": "Method Truncate | Semiconductor Test Library",
    "keywords": "Method Truncate Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Truncate() Returns integer portion of every element in current SiteData. public SiteData<T> Truncate() Returns SiteData<T> A new SiteData that contains integer values."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.SiteData-1.html",
    "title": "Class SiteData<T> | Semiconductor Test Library",
    "keywords": "Class SiteData<T> Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an object containing values for one or more sites, where T can be passed as any data type. public class SiteData<T> Type Parameters T The data type of the element data. Inheritance object SiteData<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SiteData(IDictionary<int, T>) Initializes SiteData with per-pin multiple sites data. SiteData(int[], T) Initializes a SiteData object with the same data value across all active sites. Each element in the siteNumbers array represents an active site number/value. SiteData(T[]) Initializes SiteData with multiple sites data array. The array index represents site number. Properties SiteNumbers Returns an array of sites associated with current SiteData. Methods Abs() Performs Math.Abs operation on every element in current SiteData. Add(SiteData<T>) Performs add operation between every element in current SiteData and the given SiteData. Add(T) Performs add operation between every element in current SiteData and the given value. Compare(ComparisonType, SiteData<T>) Performs compare operation between every element in current SiteData and the given SiteData. Compare(ComparisonType, T) Performs compare operation between every element in current SiteData and the given value. Divide(SiteData<T>) Performs divide operation between every element in current SiteData and the given SiteData. Divide(T) Performs divide operation between every element in current SiteData and the given value. GetValue(int) Gets the data for a given site number. Invert() Performs invert operation on every element in current SiteData. Log10() Performs Math.Log10 operation on every element in current SiteData. Maximum(SiteData<T>) Returns the larger of the element in current SiteData and the given SiteData. Maximum(T) Returns the larger of the element in current SiteData and the given value. Minimum(SiteData<T>) Returns the smaller of the element in current SiteData and the given SiteData. Minimum(T) Returns the smaller of the element in current SiteData and the given value. Multiply(SiteData<T>) Performs multiply operation on every element in current SiteData and the given SiteData. Multiply(T) Performs multiply operation on every element in current SiteData and the given value. Negate() Returns the negative value of every element in current SiteData. Power(SiteData<T>) Raises every element in current SiteData to the power of every element in given SiteData. Power(T) Raises every element in current SiteData to the power of the given value. SquareRoot() Returns the square root of every element in current SiteData. Subtract(SiteData<T>) Subtracts every element in given SiteData from every element in current SiteData. Subtract(T) Subtracts the given value from every element in current SiteData. Truncate() Returns integer portion of every element in current SiteData."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.TSMContextExtensions.NewSiteData.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.TSMContextExtensions.NewSiteData.html",
    "title": "Method NewSiteData | Semiconductor Test Library",
    "keywords": "Method NewSiteData Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll NewSiteData<T>(ISemiconductorModuleContext, T) Creates a new SiteData<T> object with the same value for all sites. public static SiteData<T> NewSiteData<T>(this ISemiconductorModuleContext tsmContext, T value) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. value T Value to apply to all sites. Returns SiteData<T> A new SiteData<T> object. Type Parameters T Data Type of value to use with SiteData<T> object. Remarks Example Usage: var data = tsmContext.NewSiteData(4.0); NewSiteData<T>(ISemiconductorModuleContext, T[]) Creates a new SiteData<T> object with unique values for all sites. public static SiteData<T> NewSiteData<T>(this ISemiconductorModuleContext tsmContext, T[] values) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. values T[] Values to apply to each site. Returns SiteData<T> A new SiteData<T> object. Type Parameters T Data Type of value to use with SiteData<T> object. Remarks Note: the number of elements in value must equal to number of sites in NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. Example Usage: var data = tsmContext.NewSiteData(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0 });"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.TSMContextExtensions.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.TSMContextExtensions.html",
    "title": "Class TSMContextExtensions | Semiconductor Test Library",
    "keywords": "Class TSMContextExtensions Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines extension methods for NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. public static class TSMContextExtensions Inheritance object TSMContextExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods NewSiteData<T>(ISemiconductorModuleContext, T) Creates a new SiteData<T> object with the same value for all sites. NewSiteData<T>(ISemiconductorModuleContext, T[]) Creates a new SiteData<T> object with unique values for all sites."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.DataAbstraction.html",
    "title": "Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction | Semiconductor Test Library",
    "keywords": "Namespace NationalInstruments.SemiconductorTestLibrary.DataAbstraction Classes PinSiteData<T> Defines an object containing values for one or more sites that is associated with a particular pin or set of pins, where T can be passed as any data type. SiteData<T> Defines an object containing values for one or more sites, where T can be passed as any data type. TSMContextExtensions Defines extension methods for NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. Enums ComparisonType Defines types of comparison results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AOFunctionGenerationSettings.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AOFunctionGenerationSettings.-ctor.html",
    "title": "Constructor AOFunctionGenerationSettings | Semiconductor Test Library",
    "keywords": "Constructor AOFunctionGenerationSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll AOFunctionGenerationSettings() public AOFunctionGenerationSettings()"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AOFunctionGenerationSettings.Amplitude.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AOFunctionGenerationSettings.Amplitude.html",
    "title": "Property Amplitude | Semiconductor Test Library",
    "keywords": "Property Amplitude Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Amplitude Specifies the amplitude of the waveform to generate. public double? Amplitude { get; set; } Property Value double? Remarks This value is used to get/set the value of the NationalInstruments.DAQmx.AOChannel.FunctionGenerationAmplitude."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AOFunctionGenerationSettings.DutyCycle.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AOFunctionGenerationSettings.DutyCycle.html",
    "title": "Property DutyCycle | Semiconductor Test Library",
    "keywords": "Property DutyCycle Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll DutyCycle Specifies the duty cycle of the waveform. Only applicable when the FunctionType is set to AOFunctionGenerationType.Square. public double? DutyCycle { get; set; } Property Value double? Remarks This value is used to get/set the value of the NationalInstruments.DAQmx.AOChannel.FunctionGenerationDutyCycle."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AOFunctionGenerationSettings.Frequency.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AOFunctionGenerationSettings.Frequency.html",
    "title": "Property Frequency | Semiconductor Test Library",
    "keywords": "Property Frequency Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Frequency Specifies the frequency of the waveform to generate. public double? Frequency { get; set; } Property Value double? Remarks This value is used to get/set the value of the NationalInstruments.DAQmx.AOChannel.FunctionGenerationFrequency."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AOFunctionGenerationSettings.FunctionType.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AOFunctionGenerationSettings.FunctionType.html",
    "title": "Property FunctionType | Semiconductor Test Library",
    "keywords": "Property FunctionType Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll FunctionType Specifies the kind of the waveform to generate (sine, square, triangle, or sawtooth). public AOFunctionGenerationType? FunctionType { get; set; } Property Value AOFunctionGenerationType? Remarks This value is used to get/set the value of the NationalInstruments.DAQmx.AOChannel.FunctionGenerationType."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AOFunctionGenerationSettings.Offset.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AOFunctionGenerationSettings.Offset.html",
    "title": "Property Offset | Semiconductor Test Library",
    "keywords": "Property Offset Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Offset Specifies the offset of the waveform to generate. public double? Offset { get; set; } Property Value double? Remarks This value is used to get/set the value of the NationalInstruments.DAQmx.AOChannel.FunctionGenerationOffset."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AOFunctionGenerationSettings.StartPhase.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AOFunctionGenerationSettings.StartPhase.html",
    "title": "Property StartPhase | Semiconductor Test Library",
    "keywords": "Property StartPhase Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll StartPhase Specifies the start phase of the waveform to generate. public double? StartPhase { get; set; } Property Value double? Remarks This value is used to get/set the value of the NationalInstruments.DAQmx.AOChannel.FunctionGenerationStartPhase."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AOFunctionGenerationSettings.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AOFunctionGenerationSettings.html",
    "title": "Class AOFunctionGenerationSettings | Semiconductor Test Library",
    "keywords": "Class AOFunctionGenerationSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll The class is used to configure the settings for an Analog Output Function Generation DAQmx task. public class AOFunctionGenerationSettings Inheritance object AOFunctionGenerationSettings Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks Using this class is adventegous as it allows the user to set one or more properties in a single call. Constructors AOFunctionGenerationSettings() Properties Amplitude Specifies the amplitude of the waveform to generate. DutyCycle Specifies the duty cycle of the waveform. Only applicable when the FunctionType is set to AOFunctionGenerationType.Square. Frequency Specifies the frequency of the waveform to generate. FunctionType Specifies the kind of the waveform to generate (sine, square, triangle, or sawtooth). Offset Specifies the offset of the waveform to generate. StartPhase Specifies the start phase of the waveform to generate."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AnalogInput.ReadAnalogMultiSample.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AnalogInput.ReadAnalogMultiSample.html",
    "title": "Method ReadAnalogMultiSample | Semiconductor Test Library",
    "keywords": "Method ReadAnalogMultiSample Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ReadAnalogMultiSample(DAQmxTasksBundle, int) Reads multiple samples and returns pin- and site-aware objects of an array of doubles, where each element in the array represents one sample read. By default, the value of samplesToRead is -1. In this case, all available samples are read when this method is invoked. public static PinSiteData<double[]> ReadAnalogMultiSample(this DAQmxTasksBundle tasksBundle, int samplesToRead = -1) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. samplesToRead int The number of samples to read. Returns PinSiteData<double[]> Per-site per-pin floating-point samples."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AnalogInput.ReadAnalogWaveform.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AnalogInput.ReadAnalogWaveform.html",
    "title": "Method ReadAnalogWaveform | Semiconductor Test Library",
    "keywords": "Method ReadAnalogWaveform Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ReadAnalogWaveform(DAQmxTasksBundle, int) Reads the samples and returns pin- and site-aware objects of double AnalogWaveform, where each double value in the waveform represents one sample read. By default, all available samples are returned, unless otherwise specified by passing in value via the samplesToRead argument. public static PinSiteData<AnalogWaveform<double>> ReadAnalogWaveform(this DAQmxTasksBundle tasksBundle, int samplesToRead = -1) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. samplesToRead int The number of samples to read. Returns PinSiteData<AnalogWaveform<double>> Per-site per-pin analog waveform samples."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AnalogInput.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AnalogInput.html",
    "title": "Class AnalogInput | Semiconductor Test Library",
    "keywords": "Class AnalogInput Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines operations on analog input channels. public static class AnalogInput Inheritance object AnalogInput Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ReadAnalogMultiSample(DAQmxTasksBundle, int) Reads multiple samples and returns pin- and site-aware objects of an array of doubles, where each element in the array represents one sample read. By default, the value of samplesToRead is -1. In this case, all available samples are read when this method is invoked. ReadAnalogWaveform(DAQmxTasksBundle, int) Reads the samples and returns pin- and site-aware objects of double AnalogWaveform, where each double value in the waveform represents one sample read. By default, all available samples are returned, unless otherwise specified by passing in value via the samplesToRead argument."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AnalogOutput.WriteAnalogSingleSample.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AnalogOutput.WriteAnalogSingleSample.html",
    "title": "Method WriteAnalogSingleSample | Semiconductor Test Library",
    "keywords": "Method WriteAnalogSingleSample Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll WriteAnalogSingleSample(DAQmxTasksBundle, double, bool) Writes a static DC output state to the pin(s). public static void WriteAnalogSingleSample(this DAQmxTasksBundle tasksBundle, double staticState, bool autoStart = true) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. staticState double The static state to write. autoStart bool Specifies whether to automatically start the tasks. WriteAnalogSingleSample(DAQmxTasksBundle, SiteData<double>, bool) Writes a static DC output state to the pin(s). public static void WriteAnalogSingleSample(this DAQmxTasksBundle tasksBundle, SiteData<double> siteData, bool autoStart = true) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. siteData SiteData<double> The per-site data to write. autoStart bool Specifies whether to automatically start the tasks. WriteAnalogSingleSample(DAQmxTasksBundle, PinSiteData<double>, bool) Writes a static DC output state to the pin(s). public static void WriteAnalogSingleSample(this DAQmxTasksBundle tasksBundle, PinSiteData<double> pinSiteData, bool autoStart = true) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. pinSiteData PinSiteData<double> The per-site per-pin data to write. autoStart bool Specifies whether to automatically start the tasks."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AnalogOutput.WriteAnalogWaveform.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AnalogOutput.WriteAnalogWaveform.html",
    "title": "Method WriteAnalogWaveform | Semiconductor Test Library",
    "keywords": "Method WriteAnalogWaveform Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll WriteAnalogWaveform(DAQmxTasksBundle, AnalogWaveform<double>, bool) Writes the specified waveform to output on the pin(s). public static void WriteAnalogWaveform(this DAQmxTasksBundle tasksBundle, AnalogWaveform<double> waveform, bool autoStart = true) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. waveform AnalogWaveform<double> The waveform to write. autoStart bool Specifies whether to automatically start the tasks. WriteAnalogWaveform(DAQmxTasksBundle, SiteData<AnalogWaveform<double>>, bool) Writes the specified waveform to output on the pin(s). public static void WriteAnalogWaveform(this DAQmxTasksBundle tasksBundle, SiteData<AnalogWaveform<double>> siteData, bool autoStart = true) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. siteData SiteData<AnalogWaveform<double>> The per-site waveform to write. autoStart bool Specifies whether to automatically start the tasks. WriteAnalogWaveform(DAQmxTasksBundle, PinSiteData<AnalogWaveform<double>>, bool) Writes the specified waveform to output on the pin(s). public static void WriteAnalogWaveform(this DAQmxTasksBundle tasksBundle, PinSiteData<AnalogWaveform<double>> pinSiteData, bool autoStart = true) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. pinSiteData PinSiteData<AnalogWaveform<double>> The per-site per-pin waveform to write. autoStart bool Specifies whether to automatically start the tasks."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AnalogOutput.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AnalogOutput.html",
    "title": "Class AnalogOutput | Semiconductor Test Library",
    "keywords": "Class AnalogOutput Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines operations on analog output channels. public static class AnalogOutput Inheritance object AnalogOutput Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods WriteAnalogSingleSample(DAQmxTasksBundle, PinSiteData<double>, bool) Writes a static DC output state to the pin(s). WriteAnalogSingleSample(DAQmxTasksBundle, SiteData<double>, bool) Writes a static DC output state to the pin(s). WriteAnalogSingleSample(DAQmxTasksBundle, double, bool) Writes a static DC output state to the pin(s). WriteAnalogWaveform(DAQmxTasksBundle, AnalogWaveform<double>, bool) Writes the specified waveform to output on the pin(s). WriteAnalogWaveform(DAQmxTasksBundle, PinSiteData<AnalogWaveform<double>>, bool) Writes the specified waveform to output on the pin(s). WriteAnalogWaveform(DAQmxTasksBundle, SiteData<AnalogWaveform<double>>, bool) Writes the specified waveform to output on the pin(s)."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AnalogOutputFunctionGeneration.ConfigureAOFunctionGeneration.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AnalogOutputFunctionGeneration.ConfigureAOFunctionGeneration.html",
    "title": "Method ConfigureAOFunctionGeneration | Semiconductor Test Library",
    "keywords": "Method ConfigureAOFunctionGeneration Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureAOFunctionGeneration(DAQmxTasksBundle, AOFunctionGenerationSettings) Configures the analog output function generation for the task (also known as PureTune). public static void ConfigureAOFunctionGeneration(this DAQmxTasksBundle tasksBundle, AOFunctionGenerationSettings functionGenerationSettings) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. functionGenerationSettings AOFunctionGenerationSettings The function generation settings. Exceptions DaqException The underling driver session returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AnalogOutputFunctionGeneration.StartAOFunctionGeneration.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AnalogOutputFunctionGeneration.StartAOFunctionGeneration.html",
    "title": "Method StartAOFunctionGeneration | Semiconductor Test Library",
    "keywords": "Method StartAOFunctionGeneration Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll StartAOFunctionGeneration(DAQmxTasksBundle) Transitions the task to the running state to begin the analog output function generation. This method will wait for the appropriate amount of settling time required by the instrument. public static void StartAOFunctionGeneration(this DAQmxTasksBundle tasksBundle) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. Exceptions DaqException The underling driver session returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AnalogOutputFunctionGeneration.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.AnalogOutputFunctionGeneration.html",
    "title": "Class AnalogOutputFunctionGeneration | Semiconductor Test Library",
    "keywords": "Class AnalogOutputFunctionGeneration Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines operations on analog output channels configured under the Analog Output: Function Generation task type. public static class AnalogOutputFunctionGeneration Inheritance object AnalogOutputFunctionGeneration Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ConfigureAOFunctionGeneration(DAQmxTasksBundle, AOFunctionGenerationSettings) Configures the analog output function generation for the task (also known as PureTune). StartAOFunctionGeneration(DAQmxTasksBundle) Transitions the task to the running state to begin the analog output function generation. This method will wait for the appropriate amount of settling time required by the instrument."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.Configure.ConfigureAITerminalConfiguration.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.Configure.ConfigureAITerminalConfiguration.html",
    "title": "Method ConfigureAITerminalConfiguration | Semiconductor Test Library",
    "keywords": "Method ConfigureAITerminalConfiguration Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureAITerminalConfiguration(DAQmxTasksBundle, AITerminalConfiguration) Configures the terminal configuration for the analog input channels within the task. Refer to NationalInstruments.DAQmx.AITerminalConfiguration for more information. public static void ConfigureAITerminalConfiguration(this DAQmxTasksBundle tasksBundle, AITerminalConfiguration terminalConfiguration) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. terminalConfiguration AITerminalConfiguration Specifies the terminal configuration mode. Exceptions DaqException The underling driver session returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.Configure.ConfigureAOTerminalConfiguration.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.Configure.ConfigureAOTerminalConfiguration.html",
    "title": "Method ConfigureAOTerminalConfiguration | Semiconductor Test Library",
    "keywords": "Method ConfigureAOTerminalConfiguration Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureAOTerminalConfiguration(DAQmxTasksBundle, AOTerminalConfiguration) Configures the terminal configuration for the analog output channels within the task, refer to NationalInstruments.DAQmx.AOTerminalConfiguration for more information. public static void ConfigureAOTerminalConfiguration(this DAQmxTasksBundle tasksBundle, AOTerminalConfiguration terminalConfiguration) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. terminalConfiguration AOTerminalConfiguration Specifies the terminal configuration mode. Exceptions DaqException The underling driver session returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.Configure.ConfigureTiming.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.Configure.ConfigureTiming.html",
    "title": "Method ConfigureTiming | Semiconductor Test Library",
    "keywords": "Method ConfigureTiming Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureTiming(DAQmxTasksBundle, DAQmxTimingSampleClockSettings) Configures the timing for the task. The capture mode (FiniteSamples/ContinuousSamples), rate of the Sample Clock, and the number of samples to acquire or generate. public static void ConfigureTiming(this DAQmxTasksBundle tasksBundle, DAQmxTimingSampleClockSettings timingSettings) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. timingSettings DAQmxTimingSampleClockSettings Specifies the timing settings. Exceptions DaqException The underling driver session returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.Configure.GetSampleClockRateDistinct.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.Configure.GetSampleClockRateDistinct.html",
    "title": "Method GetSampleClockRateDistinct | Semiconductor Test Library",
    "keywords": "Method GetSampleClockRateDistinct Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll GetSampleClockRateDistinct(DAQmxTasksBundle) Specifies the sampling rate in samples per channel per second. If you use an external source for the Sample Clock, set this input to the maximum expected rate of that clock./> public static double GetSampleClockRateDistinct(this DAQmxTasksBundle tasksBundle) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. Returns double Sample clock rate. Remarks This method is the same as GetSampleClockRates(DAQmxTasksBundle), except it also checks if the flag state is the same values across all sessions in the bundle. If the values are the same, it returns the single double value. Otherwise, it throws an exception. Exceptions NISemiconductorTestException The value for the sample clock rate is not the same for all underlying instrument sessions."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.Configure.GetSampleClockRates.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.Configure.GetSampleClockRates.html",
    "title": "Method GetSampleClockRates | Semiconductor Test Library",
    "keywords": "Method GetSampleClockRates Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll GetSampleClockRates(DAQmxTasksBundle) Gets the actual sample clock rate (Hz). public static double[] GetSampleClockRates(this DAQmxTasksBundle tasksBundle) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. Returns double[] Sample clock rate, one value per underlying instrument session. Exceptions DaqException The underling driver session returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.Configure.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.Configure.html",
    "title": "Class Configure | Semiconductor Test Library",
    "keywords": "Class Configure Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines operations for configuring timing and other task properties. public static class Configure Inheritance object Configure Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ConfigureAITerminalConfiguration(DAQmxTasksBundle, AITerminalConfiguration) Configures the terminal configuration for the analog input channels within the task. Refer to NationalInstruments.DAQmx.AITerminalConfiguration for more information. ConfigureAOTerminalConfiguration(DAQmxTasksBundle, AOTerminalConfiguration) Configures the terminal configuration for the analog output channels within the task, refer to NationalInstruments.DAQmx.AOTerminalConfiguration for more information. ConfigureTiming(DAQmxTasksBundle, DAQmxTimingSampleClockSettings) Configures the timing for the task. The capture mode (FiniteSamples/ContinuousSamples), rate of the Sample Clock, and the number of samples to acquire or generate. GetSampleClockRateDistinct(DAQmxTasksBundle) Specifies the sampling rate in samples per channel per second. If you use an external source for the Sample Clock, set this input to the maximum expected rate of that clock./> GetSampleClockRates(DAQmxTasksBundle) Gets the actual sample clock rate (Hz)."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskInformation.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskInformation.-ctor.html",
    "title": "Constructor DAQmxTaskInformation | Semiconductor Test Library",
    "keywords": "Constructor DAQmxTaskInformation Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll DAQmxTaskInformation(Task, string) Constructs a task information object that associates with an NI-DAQmx task. public DAQmxTaskInformation(Task task, string channelList) Parameters task Task The NI-DAQmx task. channelList string The channels associated with the task. DAQmxTaskInformation(Task, IList<SitePinInfo>) Constructs a task information object. public DAQmxTaskInformation(Task task, IList<SitePinInfo> associatedSitePinList) Parameters task Task The NI-DAQmx task. associatedSitePinList IList<SitePinInfo> The specified subset of channels associated with the task."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskInformation.AssociatedSitePinList.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskInformation.AssociatedSitePinList.html",
    "title": "Property AssociatedSitePinList | Semiconductor Test Library",
    "keywords": "Property AssociatedSitePinList Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AssociatedSitePinList Gets a list of SitePinInfo objects containing information for the individual site-pin pairs associated with the driver session. public IList<SitePinInfo> AssociatedSitePinList { get; } Property Value IList<SitePinInfo>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskInformation.BuildFullyQualifiedOutputTerminal.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskInformation.BuildFullyQualifiedOutputTerminal.html",
    "title": "Method BuildFullyQualifiedOutputTerminal | Semiconductor Test Library",
    "keywords": "Method BuildFullyQualifiedOutputTerminal Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll BuildFullyQualifiedOutputTerminal(ExportSignal) Builds a fully qualified output terminal string for the specified signal. public string BuildFullyQualifiedOutputTerminal(ExportSignal signal) Parameters signal ExportSignal The given signal. Returns string The fully qualified output terminal string."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskInformation.ChannelList.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskInformation.ChannelList.html",
    "title": "Property ChannelList | Semiconductor Test Library",
    "keywords": "Property ChannelList Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ChannelList The channels associated with the task. public string ChannelList { get; } Property Value string Remarks It's a comma-separated string of instrument-channel pair, e.g. \"DAQmx_6363_C1_S08/ai0:2, DAQmx_6363_C1_S08/ai4\"."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskInformation.ChannelType.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskInformation.ChannelType.html",
    "title": "Property ChannelType | Semiconductor Test Library",
    "keywords": "Property ChannelType Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ChannelType The NI-DAQmx channel type. public ChannelType ChannelType { get; } Property Value ChannelType"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskInformation.GenerateInstrumentChannelToSitePinDictionary.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskInformation.GenerateInstrumentChannelToSitePinDictionary.html",
    "title": "Method GenerateInstrumentChannelToSitePinDictionary | Semiconductor Test Library",
    "keywords": "Method GenerateInstrumentChannelToSitePinDictionary Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll GenerateInstrumentChannelToSitePinDictionary(ISemiconductorModuleContext) Generates a dictionary that takes a channel string and returns the associated site-pin pair information. public static void GenerateInstrumentChannelToSitePinDictionary(ISemiconductorModuleContext tsmContext) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskInformation.Task.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskInformation.Task.html",
    "title": "Property Task | Semiconductor Test Library",
    "keywords": "Property Task Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Task The NI-DAQmx task. public Task Task { get; } Property Value Task"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskInformation.TaskType.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskInformation.TaskType.html",
    "title": "Property TaskType | Semiconductor Test Library",
    "keywords": "Property TaskType Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll TaskType The NI-DAQmx task type. public DAQmxTaskType TaskType { get; } Property Value DAQmxTaskType"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskInformation.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskInformation.html",
    "title": "Class DAQmxTaskInformation | Semiconductor Test Library",
    "keywords": "Class DAQmxTaskInformation Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an object that contains an individual NI-DAQmx task and its related information. public class DAQmxTaskInformation : ISessionInformation Inheritance object DAQmxTaskInformation Implements ISessionInformation Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DAQmxTaskInformation(Task, IList<SitePinInfo>) Constructs a task information object. DAQmxTaskInformation(Task, string) Constructs a task information object that associates with an NI-DAQmx task. Properties AssociatedSitePinList Gets a list of SitePinInfo objects containing information for the individual site-pin pairs associated with the driver session. ChannelList The channels associated with the task. ChannelType The NI-DAQmx channel type. Task The NI-DAQmx task. TaskType The NI-DAQmx task type. Methods BuildFullyQualifiedOutputTerminal(ExportSignal) Builds a fully qualified output terminal string for the specified signal. GenerateInstrumentChannelToSitePinDictionary(ISemiconductorModuleContext) Generates a dictionary that takes a channel string and returns the associated site-pin pair information."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskType.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTaskType.html",
    "title": "Enum DAQmxTaskType | Semiconductor Test Library",
    "keywords": "Enum DAQmxTaskType Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines the type of the DAQmx task. public enum DAQmxTaskType Fields AnalogInput = 0 Specifies the task is an analog input task. AnalogOutput = 1 Specifies the task is an analog output task. AnalogOutputFunctionGeneration = 6 Specifies the task is an analog output function generation task. CounterInput = 4 Specifies the task is a counter input task. CounterOutput = 5 Specifies the task is a counter output task. DigitalInput = 2 Specifies the task is a digital input task. DigitalOutput = 3 Specifies the task is a digital output task."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTasksBundle.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTasksBundle.-ctor.html",
    "title": "Constructor DAQmxTasksBundle | Semiconductor Test Library",
    "keywords": "Constructor DAQmxTasksBundle Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll DAQmxTasksBundle(ISemiconductorModuleContext, IEnumerable<DAQmxTaskInformation>) Constructs a tasks bundle object that represents a bunch of DAQmxTaskInformations. public DAQmxTasksBundle(ISemiconductorModuleContext tsmContext, IEnumerable<DAQmxTaskInformation> allTaskInfo) Parameters tsmContext ISemiconductorModuleContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. allTaskInfo IEnumerable<DAQmxTaskInformation> An enumerable of DAQmxTaskInformations."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTasksBundle.AggregateSitePinList.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTasksBundle.AggregateSitePinList.html",
    "title": "Property AggregateSitePinList | Semiconductor Test Library",
    "keywords": "Property AggregateSitePinList Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AggregateSitePinList An aggregated list of SitePinInfo objects containing information for all of the individual site-pin pairs associated with each of the session information objects within the bundle. public IList<SitePinInfo> AggregateSitePinList { get; } Property Value IList<SitePinInfo>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTasksBundle.FilterByPin.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTasksBundle.FilterByPin.html",
    "title": "Method FilterByPin | Semiconductor Test Library",
    "keywords": "Method FilterByPin Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll FilterByPin(string) Filter current DAQmxTasksBundle and returns a new one with the requested pin. public DAQmxTasksBundle FilterByPin(string requestedPin) Parameters requestedPin string The requested pin. Returns DAQmxTasksBundle A new DAQmxTasksBundle object with the requested pin. FilterByPin(string[]) Filter current DAQmxTasksBundle and returns a new one with requested pins. public DAQmxTasksBundle FilterByPin(string[] requestedPins) Parameters requestedPins string[] The requested pins. Returns DAQmxTasksBundle A new DAQmxTasksBundle object with requested pins."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTasksBundle.FilterBySite.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTasksBundle.FilterBySite.html",
    "title": "Method FilterBySite | Semiconductor Test Library",
    "keywords": "Method FilterBySite Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll FilterBySite(int) Filters current DAQmxTasksBundle and returns a new one with the requested site. public DAQmxTasksBundle FilterBySite(int requestedSite) Parameters requestedSite int The requested site. Returns DAQmxTasksBundle A new DAQmxTasksBundle object with the requested site. FilterBySite(int[]) Filters current DAQmxTasksBundle and returns a new one with requested sites. public DAQmxTasksBundle FilterBySite(int[] requestedSites) Parameters requestedSites int[] The requested sites. Returns DAQmxTasksBundle A new DAQmxTasksBundle object with requested sites."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTasksBundle.InstrumentSessions.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTasksBundle.InstrumentSessions.html",
    "title": "Property InstrumentSessions | Semiconductor Test Library",
    "keywords": "Property InstrumentSessions Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll InstrumentSessions An enumerable of ISessionInformation. public IEnumerable<DAQmxTaskInformation> InstrumentSessions { get; } Property Value IEnumerable<DAQmxTaskInformation>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTasksBundle.TSMContext.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTasksBundle.TSMContext.html",
    "title": "Property TSMContext | Semiconductor Test Library",
    "keywords": "Property TSMContext Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll TSMContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. public ISemiconductorModuleContext TSMContext { get; } Property Value ISemiconductorModuleContext"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTasksBundle.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTasksBundle.html",
    "title": "Class DAQmxTasksBundle | Semiconductor Test Library",
    "keywords": "Class DAQmxTasksBundle Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an object that contains one or more DAQmxTaskInformation objects. public class DAQmxTasksBundle : ISessionsBundle<DAQmxTaskInformation> Inheritance object DAQmxTasksBundle Implements ISessionsBundle<DAQmxTaskInformation> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool[]>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double[]>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<double[], double[]>>, string, string) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult>) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1, TResult2>>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, int, TResult[]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[,]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1[], TResult2[]>>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, SitePinInfo>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int, SitePinInfo>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation>) Publish.PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[], string) Publish.PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[][], string) Constructors DAQmxTasksBundle(ISemiconductorModuleContext, IEnumerable<DAQmxTaskInformation>) Constructs a tasks bundle object that represents a bunch of DAQmxTaskInformations. Properties AggregateSitePinList An aggregated list of SitePinInfo objects containing information for all of the individual site-pin pairs associated with each of the session information objects within the bundle. InstrumentSessions An enumerable of ISessionInformation. TSMContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. Methods FilterByPin(string) Filter current DAQmxTasksBundle and returns a new one with the requested pin. FilterByPin(string[]) Filter current DAQmxTasksBundle and returns a new one with requested pins. FilterBySite(int) Filters current DAQmxTasksBundle and returns a new one with the requested site. FilterBySite(int[]) Filters current DAQmxTasksBundle and returns a new one with requested sites."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTerminalConfiguration.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTerminalConfiguration.html",
    "title": "Enum DAQmxTerminalConfiguration | Semiconductor Test Library",
    "keywords": "Enum DAQmxTerminalConfiguration Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines terminal configurations for analog input and output channels. public enum DAQmxTerminalConfiguration Fields Default = -1 Uses device default terminal configuration. Differential = 10106 Measures the potential difference between the AI/AO+ and AI/AO-. Nrse = 10078 Measures the potential difference between the AI and the AI SENSE. Pseudodifferential = 12529 Measures the potential difference between the AI/AO+ and AI/AO- while AI/AO- is tied to AI/AO GND through a relatively small impedance. Rse = 10083 Measures the potential difference between the AI/AO and the AI/AO GND."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTimingSampleClockSettings.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTimingSampleClockSettings.-ctor.html",
    "title": "Constructor DAQmxTimingSampleClockSettings | Semiconductor Test Library",
    "keywords": "Constructor DAQmxTimingSampleClockSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll DAQmxTimingSampleClockSettings() public DAQmxTimingSampleClockSettings()"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTimingSampleClockSettings.SampleClockActiveEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTimingSampleClockSettings.SampleClockActiveEdge.html",
    "title": "Property SampleClockActiveEdge | Semiconductor Test Library",
    "keywords": "Property SampleClockActiveEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll SampleClockActiveEdge Specifies on which edge of a clock pulse sampling takes place. public SampleClockActiveEdge? SampleClockActiveEdge { get; set; } Property Value SampleClockActiveEdge? Remarks This value is used to get/set the value of the NationalInstruments.DAQmx.Timing.SampleClockActiveEdge driver property. This property is useful primarily when the signal you use as the Sample Clock is not a periodic clock."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTimingSampleClockSettings.SampleClockRate.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTimingSampleClockSettings.SampleClockRate.html",
    "title": "Property SampleClockRate | Semiconductor Test Library",
    "keywords": "Property SampleClockRate Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll SampleClockRate Specifies the sampling rate in samples per channel per second. public double? SampleClockRate { get; set; } Property Value double? Remarks If you use an external source for the Sample Clock, set the value to the maximum expected rate of that clock. This value is used to get/set the value of the NationalInstruments.DAQmx.Timing.SampleClockRate driver property."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTimingSampleClockSettings.SampleClockSource.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTimingSampleClockSettings.SampleClockSource.html",
    "title": "Property SampleClockSource | Semiconductor Test Library",
    "keywords": "Property SampleClockSource Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll SampleClockSource Specifies the terminal of the signal to use as the Sample Clock. public string SampleClockSource { get; set; } Property Value string Remarks Use this property to specify an external source to use as the Sample Clock. This value is used to get/set the value of the NationalInstruments.DAQmx.Timing.SampleClockSource driver property."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTimingSampleClockSettings.SampleQuantityMode.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTimingSampleClockSettings.SampleQuantityMode.html",
    "title": "Property SampleQuantityMode | Semiconductor Test Library",
    "keywords": "Property SampleQuantityMode Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll SampleQuantityMode Specifies if a task acquires or generates a finite number of samples or if it continuously acquires or generates samples. public SampleQuantityMode? SampleQuantityMode { get; set; } Property Value SampleQuantityMode? Remarks This value is used to get/set the value of the NationalInstruments.DAQmx.Timing.SampleQuantityMode driver property."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTimingSampleClockSettings.SampleTimingType.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTimingSampleClockSettings.SampleTimingType.html",
    "title": "Property SampleTimingType | Semiconductor Test Library",
    "keywords": "Property SampleTimingType Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll SampleTimingType Specifies the type of sample timing to use for the task. public SampleTimingType SampleTimingType { get; } Property Value SampleTimingType Remarks This value is used to get/set the value of the NationalInstruments.DAQmx.Timing.SampleTimingType driver property."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTimingSampleClockSettings.SamplesPerChannel.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTimingSampleClockSettings.SamplesPerChannel.html",
    "title": "Property SamplesPerChannel | Semiconductor Test Library",
    "keywords": "Property SamplesPerChannel Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll SamplesPerChannel Specifies the number of samples to acquire or generate for each channel in the task. public int? SamplesPerChannel { get; set; } Property Value int? Remarks This value is used to get/set the value of the NationalInstruments.DAQmx.Timing.SampleClockSource driver property."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTimingSampleClockSettings.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DAQmxTimingSampleClockSettings.html",
    "title": "Class DAQmxTimingSampleClockSettings | Semiconductor Test Library",
    "keywords": "Class DAQmxTimingSampleClockSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll The class is used to configure the timing settings for a DAQmx task. public class DAQmxTimingSampleClockSettings Inheritance object DAQmxTimingSampleClockSettings Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks Using this class is advantageous as it allows the user to set one or more properties in a single call. Constructors DAQmxTimingSampleClockSettings() Properties SampleClockActiveEdge Specifies on which edge of a clock pulse sampling takes place. SampleClockRate Specifies the sampling rate in samples per channel per second. SampleClockSource Specifies the terminal of the signal to use as the Sample Clock. SampleQuantityMode Specifies if a task acquires or generates a finite number of samples or if it continuously acquires or generates samples. SampleTimingType Specifies the type of sample timing to use for the task. SamplesPerChannel Specifies the number of samples to acquire or generate for each channel in the task."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DefaultDAQmxTaskTypeStrings.AnalogInput.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DefaultDAQmxTaskTypeStrings.AnalogInput.html",
    "title": "Field AnalogInput | Semiconductor Test Library",
    "keywords": "Field AnalogInput Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll The analog input task type string. public const string AnalogInput = \"AI\" Returns string The analog input task type string."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DefaultDAQmxTaskTypeStrings.AnalogOutput.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DefaultDAQmxTaskTypeStrings.AnalogOutput.html",
    "title": "Field AnalogOutput | Semiconductor Test Library",
    "keywords": "Field AnalogOutput Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll The analog output task type string. public const string AnalogOutput = \"AO\" Returns string The analog output task type string."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DefaultDAQmxTaskTypeStrings.AnalogOutputFunctionGeneration.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DefaultDAQmxTaskTypeStrings.AnalogOutputFunctionGeneration.html",
    "title": "Field AnalogOutputFunctionGeneration | Semiconductor Test Library",
    "keywords": "Field AnalogOutputFunctionGeneration Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll The analog output function generation task type string. public const string AnalogOutputFunctionGeneration = \"AOFuncGen\" Returns string The analog output function generation task type string."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DefaultDAQmxTaskTypeStrings.CounterInput.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DefaultDAQmxTaskTypeStrings.CounterInput.html",
    "title": "Field CounterInput | Semiconductor Test Library",
    "keywords": "Field CounterInput Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll The counter input task type string. public const string CounterInput = \"CI\" Returns string The counter input task type string."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DefaultDAQmxTaskTypeStrings.CounterOutput.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DefaultDAQmxTaskTypeStrings.CounterOutput.html",
    "title": "Field CounterOutput | Semiconductor Test Library",
    "keywords": "Field CounterOutput Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll The counter output task type string. public const string CounterOutput = \"CO\" Returns string The counter output task type string."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DefaultDAQmxTaskTypeStrings.DigitalInput.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DefaultDAQmxTaskTypeStrings.DigitalInput.html",
    "title": "Field DigitalInput | Semiconductor Test Library",
    "keywords": "Field DigitalInput Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll The digital input task type string. public const string DigitalInput = \"DI\" Returns string The digital input task type string."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DefaultDAQmxTaskTypeStrings.DigitalOutput.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DefaultDAQmxTaskTypeStrings.DigitalOutput.html",
    "title": "Field DigitalOutput | Semiconductor Test Library",
    "keywords": "Field DigitalOutput Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll The digital output task type string. public const string DigitalOutput = \"DO\" Returns string The digital output task type string."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DefaultDAQmxTaskTypeStrings.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DefaultDAQmxTaskTypeStrings.html",
    "title": "Struct DefaultDAQmxTaskTypeStrings | Semiconductor Test Library",
    "keywords": "Struct DefaultDAQmxTaskTypeStrings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines the default DAQmx task type strings. public struct DefaultDAQmxTaskTypeStrings Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Fields AnalogInput The analog input task type string. AnalogOutput The analog output task type string. AnalogOutputFunctionGeneration The analog output function generation task type string. CounterInput The counter input task type string. CounterOutput The counter output task type string. DigitalInput The digital input task type string. DigitalOutput The digital output task type string."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DigitalInput.ReadDigitalMultiSampleU32.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DigitalInput.ReadDigitalMultiSampleU32.html",
    "title": "Method ReadDigitalMultiSampleU32 | Semiconductor Test Library",
    "keywords": "Method ReadDigitalMultiSampleU32 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ReadDigitalMultiSampleU32(DAQmxTasksBundle, int) Reads digital multiple U32 samples. public static PinSiteData<uint[]> ReadDigitalMultiSampleU32(this DAQmxTasksBundle tasksBundle, int samplesToRead = -1) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. samplesToRead int The number of samples to read. Returns PinSiteData<uint[]> Per-site per-pin unsigned integer samples."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DigitalInput.ReadDigitalSingleSample.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DigitalInput.ReadDigitalSingleSample.html",
    "title": "Method ReadDigitalSingleSample | Semiconductor Test Library",
    "keywords": "Method ReadDigitalSingleSample Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ReadDigitalSingleSample(DAQmxTasksBundle) Reads a single sample and returns pin- and site-aware object of type Boolean. public static PinSiteData<bool> ReadDigitalSingleSample(this DAQmxTasksBundle tasksBundle) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. Returns PinSiteData<bool> Per-site per-pin boolean samples."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DigitalInput.ReadDigitalWaveform.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DigitalInput.ReadDigitalWaveform.html",
    "title": "Method ReadDigitalWaveform | Semiconductor Test Library",
    "keywords": "Method ReadDigitalWaveform Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ReadDigitalWaveform(DAQmxTasksBundle, int) Reads the samples and returns pin- and site-aware object of type DigitalWaveform, where each element in the waveform represents one sample read. By default, all available samples are returned, unless otherwise specified by passing in value via the samplesToRead argument. public static PinSiteData<DigitalWaveform> ReadDigitalWaveform(this DAQmxTasksBundle tasksBundle, int samplesToRead = -1) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. samplesToRead int The number of samples to read. Returns PinSiteData<DigitalWaveform> Per-site per-pin digital waveform samples."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DigitalInput.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DigitalInput.html",
    "title": "Class DigitalInput | Semiconductor Test Library",
    "keywords": "Class DigitalInput Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines operations on digital input channels. public static class DigitalInput Inheritance object DigitalInput Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ReadDigitalMultiSampleU32(DAQmxTasksBundle, int) Reads digital multiple U32 samples. ReadDigitalSingleSample(DAQmxTasksBundle) Reads a single sample and returns pin- and site-aware object of type Boolean. ReadDigitalWaveform(DAQmxTasksBundle, int) Reads the samples and returns pin- and site-aware object of type DigitalWaveform, where each element in the waveform represents one sample read. By default, all available samples are returned, unless otherwise specified by passing in value via the samplesToRead argument."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DigitalOutput.WriteDigital.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DigitalOutput.WriteDigital.html",
    "title": "Method WriteDigital | Semiconductor Test Library",
    "keywords": "Method WriteDigital Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll WriteDigital(DAQmxTasksBundle, bool, bool) Writes a single Boolean sample to the specified pin(s). public static void WriteDigital(this DAQmxTasksBundle tasksBundle, bool staticState, bool autoStart = true) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. staticState bool The static state to write. autoStart bool Specifies whether to automatically start the tasks. WriteDigital(DAQmxTasksBundle, SiteData<bool>, bool) Writes a single Boolean sample to the specified pin(s). public static void WriteDigital(this DAQmxTasksBundle tasksBundle, SiteData<bool> siteData, bool autoStart = true) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. siteData SiteData<bool> The per-site data to write. autoStart bool Specifies whether to automatically start the tasks. WriteDigital(DAQmxTasksBundle, PinSiteData<bool>, bool) Writes a single Boolean sample to the specified pin(s). public static void WriteDigital(this DAQmxTasksBundle tasksBundle, PinSiteData<bool> pinSiteData, bool autoStart = true) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. pinSiteData PinSiteData<bool> The per-site per-pin data to write. autoStart bool Specifies whether to automatically start the tasks."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DigitalOutput.WriteDigitalWaveform.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DigitalOutput.WriteDigitalWaveform.html",
    "title": "Method WriteDigitalWaveform | Semiconductor Test Library",
    "keywords": "Method WriteDigitalWaveform Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll WriteDigitalWaveform(DAQmxTasksBundle, DigitalWaveform, bool) Writes a DigitalWaveform (multiple Boolean samples over time) to the specified pin(s). public static void WriteDigitalWaveform(this DAQmxTasksBundle tasksBundle, DigitalWaveform waveform, bool autoStart = true) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. waveform DigitalWaveform The per-site per-pin waveform to write. autoStart bool Specifies whether to automatically start the tasks. WriteDigitalWaveform(DAQmxTasksBundle, SiteData<DigitalWaveform>, bool) Writes a DigitalWaveform (multiple Boolean samples over time) to the specified pin(s). public static void WriteDigitalWaveform(this DAQmxTasksBundle tasksBundle, SiteData<DigitalWaveform> siteData, bool autoStart = true) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. siteData SiteData<DigitalWaveform> The per-site waveform to write. autoStart bool Specifies whether to automatically start the tasks. WriteDigitalWaveform(DAQmxTasksBundle, PinSiteData<DigitalWaveform>, bool) Writes a DigitalWaveform (multiple Boolean samples over time) to the specified pin(s). public static void WriteDigitalWaveform(this DAQmxTasksBundle tasksBundle, PinSiteData<DigitalWaveform> pinSiteData, bool autoStart = true) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. pinSiteData PinSiteData<DigitalWaveform> The per-site per-pin waveform to write. autoStart bool Specifies whether to automatically start the tasks."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DigitalOutput.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.DigitalOutput.html",
    "title": "Class DigitalOutput | Semiconductor Test Library",
    "keywords": "Class DigitalOutput Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines operations on digital output channels. public static class DigitalOutput Inheritance object DigitalOutput Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods WriteDigital(DAQmxTasksBundle, PinSiteData<bool>, bool) Writes a single Boolean sample to the specified pin(s). WriteDigital(DAQmxTasksBundle, SiteData<bool>, bool) Writes a single Boolean sample to the specified pin(s). WriteDigital(DAQmxTasksBundle, bool, bool) Writes a single Boolean sample to the specified pin(s). WriteDigitalWaveform(DAQmxTasksBundle, DigitalWaveform, bool) Writes a DigitalWaveform (multiple Boolean samples over time) to the specified pin(s). WriteDigitalWaveform(DAQmxTasksBundle, PinSiteData<DigitalWaveform>, bool) Writes a DigitalWaveform (multiple Boolean samples over time) to the specified pin(s). WriteDigitalWaveform(DAQmxTasksBundle, SiteData<DigitalWaveform>, bool) Writes a DigitalWaveform (multiple Boolean samples over time) to the specified pin(s)."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.ClearAllDAQmxTasks.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.ClearAllDAQmxTasks.html",
    "title": "Method ClearAllDAQmxTasks | Semiconductor Test Library",
    "keywords": "Method ClearAllDAQmxTasks Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ClearAllDAQmxTasks(ISemiconductorModuleContext) Clears all NI-DAQmx tasks regardless of task type. public static void ClearAllDAQmxTasks(ISemiconductorModuleContext tsmContext) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.ClearDAQmxAIVoltageTasks.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.ClearDAQmxAIVoltageTasks.html",
    "title": "Method ClearDAQmxAIVoltageTasks | Semiconductor Test Library",
    "keywords": "Method ClearDAQmxAIVoltageTasks Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ClearDAQmxAIVoltageTasks(ISemiconductorModuleContext, string) Clears NI-DAQmx analog input voltage tasks. public static void ClearDAQmxAIVoltageTasks(ISemiconductorModuleContext tsmContext, string analogInputVoltageTaskType = \"AI\") Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. analogInputVoltageTaskType string Specifies the task type."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.ClearDAQmxAOFunctionGenerationTasks.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.ClearDAQmxAOFunctionGenerationTasks.html",
    "title": "Method ClearDAQmxAOFunctionGenerationTasks | Semiconductor Test Library",
    "keywords": "Method ClearDAQmxAOFunctionGenerationTasks Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ClearDAQmxAOFunctionGenerationTasks(ISemiconductorModuleContext, string) Clears NI-DAQmx analog output function generation voltage tasks. public static void ClearDAQmxAOFunctionGenerationTasks(ISemiconductorModuleContext tsmContext, string analogOutputFunctionGenerationVoltageTaskType = \"AOFuncGen\") Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. analogOutputFunctionGenerationVoltageTaskType string Specifies the task type."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.ClearDAQmxAOVoltageTasks.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.ClearDAQmxAOVoltageTasks.html",
    "title": "Method ClearDAQmxAOVoltageTasks | Semiconductor Test Library",
    "keywords": "Method ClearDAQmxAOVoltageTasks Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ClearDAQmxAOVoltageTasks(ISemiconductorModuleContext, string) Clears NI-DAQmx analog output voltage tasks. public static void ClearDAQmxAOVoltageTasks(ISemiconductorModuleContext tsmContext, string analogOutputVoltageTaskType = \"AO\") Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. analogOutputVoltageTaskType string Specifies the task type."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.ClearDAQmxDITasks.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.ClearDAQmxDITasks.html",
    "title": "Method ClearDAQmxDITasks | Semiconductor Test Library",
    "keywords": "Method ClearDAQmxDITasks Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ClearDAQmxDITasks(ISemiconductorModuleContext, string) Clears NI-DAQmx digital input tasks. public static void ClearDAQmxDITasks(ISemiconductorModuleContext tsmContext, string digitalInputTaskType = \"DI\") Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. digitalInputTaskType string Specifies the task type."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.ClearDAQmxDOTasks.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.ClearDAQmxDOTasks.html",
    "title": "Method ClearDAQmxDOTasks | Semiconductor Test Library",
    "keywords": "Method ClearDAQmxDOTasks Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ClearDAQmxDOTasks(ISemiconductorModuleContext, string) Clears NI-DAQmx digital output tasks. public static void ClearDAQmxDOTasks(ISemiconductorModuleContext tsmContext, string digitalOutputTaskType = \"DO\") Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. digitalOutputTaskType string Specifies the task type."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.CreateDAQmxAIVoltageTasks.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.CreateDAQmxAIVoltageTasks.html",
    "title": "Method CreateDAQmxAIVoltageTasks | Semiconductor Test Library",
    "keywords": "Method CreateDAQmxAIVoltageTasks Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll CreateDAQmxAIVoltageTasks(ISemiconductorModuleContext, string, double, double, DAQmxTerminalConfiguration) Creates NI-DAQmx analog input voltage tasks in the test system. public static void CreateDAQmxAIVoltageTasks(ISemiconductorModuleContext tsmContext, string analogInputVoltageTaskType = \"AI\", double minimumVoltage = -1, double maximumVoltage = 1, DAQmxTerminalConfiguration aiTerminalConfiguration = DAQmxTerminalConfiguration.Default) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. analogInputVoltageTaskType string Specifies the task type. minimumVoltage double Specifies minimum voltage value. maximumVoltage double Specifies maximum voltage value. aiTerminalConfiguration DAQmxTerminalConfiguration Specifies input terminal configuration."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.CreateDAQmxAOFunctionGenerationTasks.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.CreateDAQmxAOFunctionGenerationTasks.html",
    "title": "Method CreateDAQmxAOFunctionGenerationTasks | Semiconductor Test Library",
    "keywords": "Method CreateDAQmxAOFunctionGenerationTasks Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll CreateDAQmxAOFunctionGenerationTasks(ISemiconductorModuleContext, string, AOFunctionGenerationType, double, double, double, DAQmxTerminalConfiguration) Creates NI-DAQmx analog output function generation voltage tasks. public static void CreateDAQmxAOFunctionGenerationTasks(ISemiconductorModuleContext tsmContext, string analogOutputFunctionGenerationVoltageTaskType = \"AOFuncGen\", AOFunctionGenerationType waveformType = AOFunctionGenerationType.Sine, double frequency = 1000, double amplitude = 5, double offset = 0, DAQmxTerminalConfiguration aoTerminalConfiguration = DAQmxTerminalConfiguration.Default) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. analogOutputFunctionGenerationVoltageTaskType string Specifies the task type. waveformType AOFunctionGenerationType Specifies waveform type. frequency double Specifies frequency. amplitude double Specifies amplitude value. offset double Specifies offset value. aoTerminalConfiguration DAQmxTerminalConfiguration Specifies output terminal configuration."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.CreateDAQmxAOVoltageTasks.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.CreateDAQmxAOVoltageTasks.html",
    "title": "Method CreateDAQmxAOVoltageTasks | Semiconductor Test Library",
    "keywords": "Method CreateDAQmxAOVoltageTasks Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll CreateDAQmxAOVoltageTasks(ISemiconductorModuleContext, string, double, double, DAQmxTerminalConfiguration) Creates NI-DAQmx analog output voltage tasks in the test system. public static void CreateDAQmxAOVoltageTasks(ISemiconductorModuleContext tsmContext, string analogOutputVoltageTaskType = \"AO\", double minimumVoltage = -1, double maximumVoltage = 1, DAQmxTerminalConfiguration aoTerminalConfiguration = DAQmxTerminalConfiguration.Default) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. analogOutputVoltageTaskType string Specifies the task type. minimumVoltage double Specifies minimum voltage value. maximumVoltage double Specifies maximum voltage value. aoTerminalConfiguration DAQmxTerminalConfiguration Specifies output terminal configuration."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.CreateDAQmxDITasks.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.CreateDAQmxDITasks.html",
    "title": "Method CreateDAQmxDITasks | Semiconductor Test Library",
    "keywords": "Method CreateDAQmxDITasks Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll CreateDAQmxDITasks(ISemiconductorModuleContext, string, ChannelLineGrouping) Creates NI-DAQmx digital input tasks in the test system. public static void CreateDAQmxDITasks(ISemiconductorModuleContext tsmContext, string digitalInputTaskType = \"DI\", ChannelLineGrouping channelLineGrouping = ChannelLineGrouping.OneChannelForEachLine) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. digitalInputTaskType string Specifies the task type. channelLineGrouping ChannelLineGrouping Specifies channel line grouping method."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.CreateDAQmxDOTasks.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.CreateDAQmxDOTasks.html",
    "title": "Method CreateDAQmxDOTasks | Semiconductor Test Library",
    "keywords": "Method CreateDAQmxDOTasks Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll CreateDAQmxDOTasks(ISemiconductorModuleContext, string, ChannelLineGrouping) Creates NI-DAQmx digital output tasks in the test system. public static void CreateDAQmxDOTasks(ISemiconductorModuleContext tsmContext, string digitalOutputTaskType = \"DO\", ChannelLineGrouping channelLineGrouping = ChannelLineGrouping.OneChannelForEachLine) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. digitalOutputTaskType string Specifies the task type. channelLineGrouping ChannelLineGrouping Specifies channel line grouping method."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.InitializeAndClose.html",
    "title": "Class InitializeAndClose | Semiconductor Test Library",
    "keywords": "Class InitializeAndClose Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines NI-DAQmx NationalInstruments.DAQmx.Tasks initialize and close APIs. public static class InitializeAndClose Inheritance object InitializeAndClose Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ClearAllDAQmxTasks(ISemiconductorModuleContext) Clears all NI-DAQmx tasks regardless of task type. ClearDAQmxAIVoltageTasks(ISemiconductorModuleContext, string) Clears NI-DAQmx analog input voltage tasks. ClearDAQmxAOFunctionGenerationTasks(ISemiconductorModuleContext, string) Clears NI-DAQmx analog output function generation voltage tasks. ClearDAQmxAOVoltageTasks(ISemiconductorModuleContext, string) Clears NI-DAQmx analog output voltage tasks. ClearDAQmxDITasks(ISemiconductorModuleContext, string) Clears NI-DAQmx digital input tasks. ClearDAQmxDOTasks(ISemiconductorModuleContext, string) Clears NI-DAQmx digital output tasks. CreateDAQmxAIVoltageTasks(ISemiconductorModuleContext, string, double, double, DAQmxTerminalConfiguration) Creates NI-DAQmx analog input voltage tasks in the test system. CreateDAQmxAOFunctionGenerationTasks(ISemiconductorModuleContext, string, AOFunctionGenerationType, double, double, double, DAQmxTerminalConfiguration) Creates NI-DAQmx analog output function generation voltage tasks. CreateDAQmxAOVoltageTasks(ISemiconductorModuleContext, string, double, double, DAQmxTerminalConfiguration) Creates NI-DAQmx analog output voltage tasks in the test system. CreateDAQmxDITasks(ISemiconductorModuleContext, string, ChannelLineGrouping) Creates NI-DAQmx digital input tasks in the test system. CreateDAQmxDOTasks(ISemiconductorModuleContext, string, ChannelLineGrouping) Creates NI-DAQmx digital output tasks in the test system."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.SampleValuesCacher-1.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.SampleValuesCacher-1.-ctor.html",
    "title": "Constructor SampleValuesCacher | Semiconductor Test Library",
    "keywords": "Constructor SampleValuesCacher Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll SampleValuesCacher() public SampleValuesCacher()"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.SampleValuesCacher-1.GenerateDefaultSampleValues.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.SampleValuesCacher-1.GenerateDefaultSampleValues.html",
    "title": "Method GenerateDefaultSampleValues | Semiconductor Test Library",
    "keywords": "Method GenerateDefaultSampleValues Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll GenerateDefaultSampleValues(string[]) Generates a dictionary that caches sample values. public void GenerateDefaultSampleValues(string[] channelLists) Parameters channelLists string[] The channel lists each associates with a task."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.SampleValuesCacher-1.Instance.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.SampleValuesCacher-1.Instance.html",
    "title": "Property Instance | Semiconductor Test Library",
    "keywords": "Property Instance Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Instance The singleton instance of the SampleValuesCacher<T>. public static SampleValuesCacher<T> Instance { get; } Property Value SampleValuesCacher<T>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.SampleValuesCacher-1.TryWriteAndRecoverCacheOnFailure.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.SampleValuesCacher-1.TryWriteAndRecoverCacheOnFailure.html",
    "title": "Method TryWriteAndRecoverCacheOnFailure | Semiconductor Test Library",
    "keywords": "Method TryWriteAndRecoverCacheOnFailure Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll TryWriteAndRecoverCacheOnFailure(DAQmxTaskInformation, T, Action<T[]>) Tries to do the specified write operation and ensures that the sample values cache is updated on a successful write. public void TryWriteAndRecoverCacheOnFailure(DAQmxTaskInformation taskInfo, T data, Action<T[]> writeAction) Parameters taskInfo DAQmxTaskInformation The DAQmxTaskInformation object. data T The state to update to. writeAction Action<T[]> The driver write operation. TryWriteAndRecoverCacheOnFailure(DAQmxTaskInformation, SiteData<T>, Action<T[]>) Tries to do the specified write operation and ensures that the sample values cache is updated on a successful write. public void TryWriteAndRecoverCacheOnFailure(DAQmxTaskInformation taskInfo, SiteData<T> data, Action<T[]> writeAction) Parameters taskInfo DAQmxTaskInformation The DAQmxTaskInformation object. data SiteData<T> The state to update to. writeAction Action<T[]> The driver write operation. TryWriteAndRecoverCacheOnFailure(DAQmxTaskInformation, PinSiteData<T>, Action<T[]>) Tries to do the specified write operation and ensures that the sample values cache is updated on a successful write. public void TryWriteAndRecoverCacheOnFailure(DAQmxTaskInformation taskInfo, PinSiteData<T> data, Action<T[]> writeAction) Parameters taskInfo DAQmxTaskInformation The DAQmxTaskInformation object. data PinSiteData<T> The state to update to. writeAction Action<T[]> The driver write operation."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.SampleValuesCacher-1.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.SampleValuesCacher-1.html",
    "title": "Class SampleValuesCacher<T> | Semiconductor Test Library",
    "keywords": "Class SampleValuesCacher<T> Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines a class that caches sample values. public class SampleValuesCacher<T> Type Parameters T The type of the sample. Inheritance object SampleValuesCacher<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SampleValuesCacher() Properties Instance The singleton instance of the SampleValuesCacher<T>. Methods GenerateDefaultSampleValues(string[]) Generates a dictionary that caches sample values. TryWriteAndRecoverCacheOnFailure(DAQmxTaskInformation, PinSiteData<T>, Action<T[]>) Tries to do the specified write operation and ensures that the sample values cache is updated on a successful write. TryWriteAndRecoverCacheOnFailure(DAQmxTaskInformation, SiteData<T>, Action<T[]>) Tries to do the specified write operation and ensures that the sample values cache is updated on a successful write. TryWriteAndRecoverCacheOnFailure(DAQmxTaskInformation, T, Action<T[]>) Tries to do the specified write operation and ensures that the sample values cache is updated on a successful write."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TaskControl.Abort.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TaskControl.Abort.html",
    "title": "Method Abort | Semiconductor Test Library",
    "keywords": "Method Abort Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Abort(DAQmxTasksBundle) Aborts execution of the task, immediately terminating any currently active operation, such as a read or a write. public static void Abort(this DAQmxTasksBundle tasksBundle) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. Remarks This is a low-level driver control method that is not recommended for general use. Aborting a task puts the task into an unstable but recoverable state. To recover the task, use Start(DAQmxTasksBundle), to restart the task or use Stop(DAQmxTasksBundle) to reset the task without starting it. Exceptions DaqException The underling driver session returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TaskControl.Commit.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TaskControl.Commit.html",
    "title": "Method Commit | Semiconductor Test Library",
    "keywords": "Method Commit Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Commit(DAQmxTasksBundle) Programs the hardware with all parameters from the task properties previously configured. public static void Commit(this DAQmxTasksBundle tasksBundle) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. Remarks This is a low-level driver control method that is not recommended for general use. Exceptions DaqException The underling driver session returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TaskControl.Reserve.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TaskControl.Reserve.html",
    "title": "Method Reserve | Semiconductor Test Library",
    "keywords": "Method Reserve Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Reserve(DAQmxTasksBundle) Reserves the hardware resources that are needed for the task. public static void Reserve(this DAQmxTasksBundle tasksBundle) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. Remarks This is a low-level driver control method that is not recommended for general use. It marks the hardware resources that are needed for the task as in use. No other tasks can reserve these same resources. Exceptions DaqException The underling driver session returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TaskControl.Start.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TaskControl.Start.html",
    "title": "Method Start | Semiconductor Test Library",
    "keywords": "Method Start Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Start(DAQmxTasksBundle) Starts the task. public static void Start(this DAQmxTasksBundle tasksBundle) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. Remarks This is a low-level driver control method that is not recommended for general use. It transitions the task to the running state, which begins device input or output. Exceptions DaqException The underling driver session returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TaskControl.Stop.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TaskControl.Stop.html",
    "title": "Method Stop | Semiconductor Test Library",
    "keywords": "Method Stop Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Stop(DAQmxTasksBundle) Starts the task. public static void Stop(this DAQmxTasksBundle tasksBundle) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. Remarks This is a low-level driver control method that is not recommended for general use. It transitions the task from the running state to the committed state, which ends device input or output. Exceptions DaqException The underling driver session returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TaskControl.Unreserve.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TaskControl.Unreserve.html",
    "title": "Method Unreserve | Semiconductor Test Library",
    "keywords": "Method Unreserve Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Unreserve(DAQmxTasksBundle) Releases all previously reserved resources. public static void Unreserve(this DAQmxTasksBundle tasksBundle) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. Remarks This is a low-level driver control method that is not recommended for general use. Exceptions DaqException The underling driver session returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TaskControl.Verify.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TaskControl.Verify.html",
    "title": "Method Verify | Semiconductor Test Library",
    "keywords": "Method Verify Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Verify(DAQmxTasksBundle) Verifies that all task parameters are valid for the hardware. public static void Verify(this DAQmxTasksBundle tasksBundle) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. Remarks This is a low-level driver control method that is not recommended for general use. Exceptions DaqException The underling driver session returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TaskControl.WaitUntilDone.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TaskControl.WaitUntilDone.html",
    "title": "Method WaitUntilDone | Semiconductor Test Library",
    "keywords": "Method WaitUntilDone Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll WaitUntilDone(DAQmxTasksBundle) Waits for the measurement or generation to complete, regardless of the amount of time needed, and returns whether the execution is complete. public static void WaitUntilDone(this DAQmxTasksBundle tasksBundle) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. Remarks NationalInstruments.DAQmx.Task.WaitUntilDone waits for the task to finish acquiring or generating the number of samples per channel specified on the NationalInstruments.DAQmx.Timing class. NationalInstruments.DAQmx.Task.WaitUntilDone does not wait for pending asynchronous operations to complete. Use the methods and properties on System.IAsyncResult to verify that asynchronous reads and writes are complete. Exceptions DaqException The underling driver session returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TaskControl.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TaskControl.html",
    "title": "Class TaskControl | Semiconductor Test Library",
    "keywords": "Class TaskControl Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines operations for performing low-level task control. public static class TaskControl Inheritance object TaskControl Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Abort(DAQmxTasksBundle) Aborts execution of the task, immediately terminating any currently active operation, such as a read or a write. Commit(DAQmxTasksBundle) Programs the hardware with all parameters from the task properties previously configured. Reserve(DAQmxTasksBundle) Reserves the hardware resources that are needed for the task. Start(DAQmxTasksBundle) Starts the task. Stop(DAQmxTasksBundle) Starts the task. Unreserve(DAQmxTasksBundle) Releases all previously reserved resources. Verify(DAQmxTasksBundle) Verifies that all task parameters are valid for the hardware. WaitUntilDone(DAQmxTasksBundle) Waits for the measurement or generation to complete, regardless of the amount of time needed, and returns whether the execution is complete."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TriggersAndEvents.ConfigureStartTriggerDigitalEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TriggersAndEvents.ConfigureStartTriggerDigitalEdge.html",
    "title": "Method ConfigureStartTriggerDigitalEdge | Semiconductor Test Library",
    "keywords": "Method ConfigureStartTriggerDigitalEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureStartTriggerDigitalEdge(DAQmxTasksBundle, string, DigitalEdgeStartTriggerEdge) Configures the start trigger for the task. public static void ConfigureStartTriggerDigitalEdge(this DAQmxTasksBundle tasksBundle, string source, DigitalEdgeStartTriggerEdge edge = DigitalEdgeStartTriggerEdge.Rising) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. source string The name of the terminal to receive the digital signal to be used as the trigger source. edge DigitalEdgeStartTriggerEdge The edge of the digital signal to start acquiring or generating samples. Remarks Configures the task to acquire or generate samples based on either the rising or falling edge of the digital signal source. Exceptions DaqException The underling driver session returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TriggersAndEvents.DisableStartTrigger.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TriggersAndEvents.DisableStartTrigger.html",
    "title": "Method DisableStartTrigger | Semiconductor Test Library",
    "keywords": "Method DisableStartTrigger Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll DisableStartTrigger(DAQmxTasksBundle) Disables the start trigger for the task. public static void DisableStartTrigger(this DAQmxTasksBundle tasksBundle) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. Exceptions DaqException The underling driver session returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TriggersAndEvents.ExportSignal.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TriggersAndEvents.ExportSignal.html",
    "title": "Method ExportSignal | Semiconductor Test Library",
    "keywords": "Method ExportSignal Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ExportSignal(DAQmxTasksBundle, ExportSignal, string) Routes a control signal to the specified terminal. public static void ExportSignal(this DAQmxTasksBundle tasksBundle, ExportSignal signal, string outputTerminal) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. signal ExportSignal The trigger, clock, or event to export. outputTerminal string The destination of the exported signal. You can also specify a comma-delimited list for multiple terminal names. Remarks Because the output terminal can reside on the device that generates the control signal or on a different device, you can use this method to share clocks and triggers among multiple devices. Exceptions DaqException The underling driver session returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TriggersAndEvents.GetFullyQualifiedOutputTerminals.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TriggersAndEvents.GetFullyQualifiedOutputTerminals.html",
    "title": "Method GetFullyQualifiedOutputTerminals | Semiconductor Test Library",
    "keywords": "Method GetFullyQualifiedOutputTerminals Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll GetFullyQualifiedOutputTerminals(DAQmxTasksBundle, ExportSignal) Gets the fully qualified terminal name for the specified signal. public static string[] GetFullyQualifiedOutputTerminals(this DAQmxTasksBundle tasksBundle, ExportSignal signal) Parameters tasksBundle DAQmxTasksBundle The DAQmxTasksBundle object. signal ExportSignal The trigger, clock, or event. Returns string[] Array of fully qualified output terminal strings, one per instrument session. Exceptions DaqException The underling driver session returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TriggersAndEvents.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.TriggersAndEvents.html",
    "title": "Class TriggersAndEvents | Semiconductor Test Library",
    "keywords": "Class TriggersAndEvents Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines operations for configuring triggers. public static class TriggersAndEvents Inheritance object TriggersAndEvents Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ConfigureStartTriggerDigitalEdge(DAQmxTasksBundle, string, DigitalEdgeStartTriggerEdge) Configures the start trigger for the task. DisableStartTrigger(DAQmxTasksBundle) Disables the start trigger for the task. ExportSignal(DAQmxTasksBundle, ExportSignal, string) Routes a control signal to the specified terminal. GetFullyQualifiedOutputTerminals(DAQmxTasksBundle, ExportSignal) Gets the fully qualified terminal name for the specified signal."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx.html",
    "title": "Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx | Semiconductor Test Library",
    "keywords": "Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DAQmx Classes AOFunctionGenerationSettings The class is used to configure the settings for an Analog Output Function Generation DAQmx task. AnalogInput Defines operations on analog input channels. AnalogOutput Defines operations on analog output channels. AnalogOutputFunctionGeneration Defines operations on analog output channels configured under the Analog Output: Function Generation task type. Configure Defines operations for configuring timing and other task properties. DAQmxTaskInformation Defines an object that contains an individual NI-DAQmx task and its related information. DAQmxTasksBundle Defines an object that contains one or more DAQmxTaskInformation objects. DAQmxTimingSampleClockSettings The class is used to configure the timing settings for a DAQmx task. DigitalInput Defines operations on digital input channels. DigitalOutput Defines operations on digital output channels. InitializeAndClose Defines NI-DAQmx NationalInstruments.DAQmx.Tasks initialize and close APIs. SampleValuesCacher<T> Defines a class that caches sample values. TaskControl Defines operations for performing low-level task control. TriggersAndEvents Defines operations for configuring triggers. Structs DefaultDAQmxTaskTypeStrings Defines the default DAQmx task type strings. Enums DAQmxTaskType Defines the type of the DAQmx task. DAQmxTerminalConfiguration Defines terminal configurations for analog input and output channels."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Control.Abort.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Control.Abort.html",
    "title": "Method Abort | Semiconductor Test Library",
    "keywords": "Method Abort Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Abort(DCPowerSessionsBundle) Transitions the NI-DCPower session from the Running state to the Uncommitted state. If a sequence is running, the NI-DCPower session is stopped. public static void Abort(this DCPowerSessionsBundle sessionsBundle) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. Remarks Note: This is a lower level function for controlling over the NI-DCPower session. Any low level driver property updated after this method will not be applied until the next sourcing operation, or when the Commit method is explicitly called. If power output is enabled when you call the Abort method, the channels remain in their current state and continue providing power. Refer to the Programming States topic in the NI-DCPower User Manual and the document of your SMU model for information about the specific NI-DCPower software states. Use the OutputEnable method to disable power output per channel. Use the Reset method to disable output on all channels."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Control.Commit.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Control.Commit.html",
    "title": "Method Commit | Semiconductor Test Library",
    "keywords": "Method Commit Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Commit(DCPowerSessionsBundle) Applies previously configured settings to the underlying device channel(s). Calling this methods moves the underlying channel(s) from the Uncommitted state into the Committed state. After calling this method, modifying any property reverts the underlying device channel(s) to the Uncommitted state. public static void Commit(this DCPowerSessionsBundle sessionsBundle) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. Remarks Note: This is a lower level function for controlling over the NI-DCPower session. Refer to the Programming States topic in the NI-DCPower User Manual and the document of your SMU model for information about the specific NI-DCPower software states."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Control.Initiate.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Control.Initiate.html",
    "title": "Method Initiate | Semiconductor Test Library",
    "keywords": "Method Initiate Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Initiate(DCPowerSessionsBundle) Starts generation or acquisition and moves the underlying devices channel(s) from the Uncommitted state or Committed state to the Running state. To return to the Uncommitted state, call the Abort method. public static void Initiate(this DCPowerSessionsBundle sessionsBundle) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. Remarks Note: This is a lower level function for controlling over the NI-DCPower session. Refer to the Programming States topic in the NI-DCPower User Manual and the document of your SMU model for information about the specific NI-DCPower software states."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Control.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Control.html",
    "title": "Class Control | Semiconductor Test Library",
    "keywords": "Class Control Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines methods for controlling the NI-DCPower session. public static class Control Inheritance object Control Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Abort(DCPowerSessionsBundle) Transitions the NI-DCPower session from the Running state to the Uncommitted state. If a sequence is running, the NI-DCPower session is stopped. Commit(DCPowerSessionsBundle) Applies previously configured settings to the underlying device channel(s). Calling this methods moves the underlying channel(s) from the Uncommitted state into the Committed state. After calling this method, modifying any property reverts the underlying device channel(s) to the Uncommitted state. Initiate(DCPowerSessionsBundle) Starts generation or acquisition and moves the underlying devices channel(s) from the Uncommitted state or Committed state to the Running state. To return to the Uncommitted state, call the Abort method."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerMeasureSettings.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerMeasureSettings.-ctor.html",
    "title": "Constructor DCPowerMeasureSettings | Semiconductor Test Library",
    "keywords": "Constructor DCPowerMeasureSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll DCPowerMeasureSettings() Default constructor. public DCPowerMeasureSettings()"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerMeasureSettings.ApertureTime.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerMeasureSettings.ApertureTime.html",
    "title": "Property ApertureTime | Semiconductor Test Library",
    "keywords": "Property ApertureTime Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ApertureTime The aperture time. public double? ApertureTime { get; set; } Property Value double?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerMeasureSettings.ApertureTimeUnits.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerMeasureSettings.ApertureTimeUnits.html",
    "title": "Property ApertureTimeUnits | Semiconductor Test Library",
    "keywords": "Property ApertureTimeUnits Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ApertureTimeUnits The unit of aperture time. public DCPowerMeasureApertureTimeUnits? ApertureTimeUnits { get; set; } Property Value DCPowerMeasureApertureTimeUnits?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerMeasureSettings.MeasureWhen.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerMeasureSettings.MeasureWhen.html",
    "title": "Property MeasureWhen | Semiconductor Test Library",
    "keywords": "Property MeasureWhen Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MeasureWhen The measure when. public DCPowerMeasurementWhen? MeasureWhen { get; set; } Property Value DCPowerMeasurementWhen?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerMeasureSettings.RecordLength.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerMeasureSettings.RecordLength.html",
    "title": "Property RecordLength | Semiconductor Test Library",
    "keywords": "Property RecordLength Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll RecordLength The record length. public int? RecordLength { get; set; } Property Value int?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerMeasureSettings.Sense.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerMeasureSettings.Sense.html",
    "title": "Property Sense | Semiconductor Test Library",
    "keywords": "Property Sense Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Sense The measurement sense. public DCPowerMeasurementSense? Sense { get; set; } Property Value DCPowerMeasurementSense?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerMeasureSettings.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerMeasureSettings.html",
    "title": "Class DCPowerMeasureSettings | Semiconductor Test Library",
    "keywords": "Class DCPowerMeasureSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines DCPower measure settings. public class DCPowerMeasureSettings Inheritance object DCPowerMeasureSettings Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DCPowerMeasureSettings() Default constructor. Properties ApertureTime The aperture time. ApertureTimeUnits The unit of aperture time. MeasureWhen The measure when. RecordLength The record length. Sense The measurement sense."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXI_4110.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXI_4110.html",
    "title": "Field PXI_4110 | Semiconductor Test Library",
    "keywords": "Field PXI_4110 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXI-4110 device. public const string PXI_4110 = \"NI PXI-4110\" Returns string Indicates an NI PXI-4110 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXI_4130.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXI_4130.html",
    "title": "Field PXI_4130 | Semiconductor Test Library",
    "keywords": "Field PXI_4130 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXI-4130 device. public const string PXI_4130 = \"NI PXI-4130\" Returns string Indicates an NI PXI-4130 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXI_4131A.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXI_4131A.html",
    "title": "Field PXI_4131A | Semiconductor Test Library",
    "keywords": "Field PXI_4131A Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXI-4131A device. public const string PXI_4131A = \"NI PXI-4131A\" Returns string Indicates an NI PXI-4131A device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXI_4132.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXI_4132.html",
    "title": "Field PXI_4132 | Semiconductor Test Library",
    "keywords": "Field PXI_4132 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXI-4132 device. public const string PXI_4132 = \"NI PXI-4132\" Returns string Indicates an NI PXI-4132 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4051.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4051.html",
    "title": "Field PXIe_4051 | Semiconductor Test Library",
    "keywords": "Field PXIe_4051 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4051 device. public const string PXIe_4051 = \"NI PXIe-4051\" Returns string Indicates an NI PXIe-4051 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4112.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4112.html",
    "title": "Field PXIe_4112 | Semiconductor Test Library",
    "keywords": "Field PXIe_4112 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4112 device. public const string PXIe_4112 = \"NI PXIe-4112\" Returns string Indicates an NI PXIe-4112 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4113.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4113.html",
    "title": "Field PXIe_4113 | Semiconductor Test Library",
    "keywords": "Field PXIe_4113 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4113 device. public const string PXIe_4113 = \"NI PXIe-4113\" Returns string Indicates an NI PXIe-4113 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4118.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4118.html",
    "title": "Field PXIe_4118 | Semiconductor Test Library",
    "keywords": "Field PXIe_4118 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4118 device. public const string PXIe_4118 = \"NI PXIe-4118\" Returns string Indicates an NI PXIe-4118 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4135.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4135.html",
    "title": "Field PXIe_4135 | Semiconductor Test Library",
    "keywords": "Field PXIe_4135 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4135 device. public const string PXIe_4135 = \"NI PXIe-4135\" Returns string Indicates an NI PXIe-4135 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4135_40W.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4135_40W.html",
    "title": "Field PXIe_4135_40W | Semiconductor Test Library",
    "keywords": "Field PXIe_4135_40W Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4135 high power device. public const string PXIe_4135_40W = \"NI PXIe-4135 (40W)\" Returns string Indicates an NI PXIe-4135 high power device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4136.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4136.html",
    "title": "Field PXIe_4136 | Semiconductor Test Library",
    "keywords": "Field PXIe_4136 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4136 device. public const string PXIe_4136 = \"NI PXIe-4136\" Returns string Indicates an NI PXIe-4136 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4137.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4137.html",
    "title": "Field PXIe_4137 | Semiconductor Test Library",
    "keywords": "Field PXIe_4137 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4137 device. public const string PXIe_4137 = \"NI PXIe-4137\" Returns string Indicates an NI PXIe-4137 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4137_40W.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4137_40W.html",
    "title": "Field PXIe_4137_40W | Semiconductor Test Library",
    "keywords": "Field PXIe_4137_40W Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4137 high power device. public const string PXIe_4137_40W = \"NI PXIe-4137 (40W)\" Returns string Indicates an NI PXIe-4137 high power device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4138.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4138.html",
    "title": "Field PXIe_4138 | Semiconductor Test Library",
    "keywords": "Field PXIe_4138 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4138 device. public const string PXIe_4138 = \"NI PXIe-4138\" Returns string Indicates an NI PXIe-4138 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4139.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4139.html",
    "title": "Field PXIe_4139 | Semiconductor Test Library",
    "keywords": "Field PXIe_4139 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates a NI PXIe-4139 device. public const string PXIe_4139 = \"NI PXIe-4139\" Returns string Indicates a NI PXIe-4139 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4139_40W.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4139_40W.html",
    "title": "Field PXIe_4139_40W | Semiconductor Test Library",
    "keywords": "Field PXIe_4139_40W Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4139 high power device. public const string PXIe_4139_40W = \"NI PXIe-4139 (40W)\" Returns string Indicates an NI PXIe-4139 high power device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4140.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4140.html",
    "title": "Field PXIe_4140 | Semiconductor Test Library",
    "keywords": "Field PXIe_4140 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4140 device. public const string PXIe_4140 = \"NI PXIe-4140\" Returns string Indicates an NI PXIe-4140 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4141.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4141.html",
    "title": "Field PXIe_4141 | Semiconductor Test Library",
    "keywords": "Field PXIe_4141 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4141 device. public const string PXIe_4141 = \"NI PXIe-4141\" Returns string Indicates an NI PXIe-4141 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4141_HSR.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4141_HSR.html",
    "title": "Field PXIe_4141_HSR | Semiconductor Test Library",
    "keywords": "Field PXIe_4141_HSR Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4141 high sense resistance device. public const string PXIe_4141_HSR = \"NI PXIe-4141 (High Sense Resistance)\" Returns string Indicates an NI PXIe-4141 high sense resistance device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4142.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4142.html",
    "title": "Field PXIe_4142 | Semiconductor Test Library",
    "keywords": "Field PXIe_4142 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4142 device. public const string PXIe_4142 = \"NI PXIe-4142\" Returns string Indicates an NI PXIe-4142 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4143.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4143.html",
    "title": "Field PXIe_4143 | Semiconductor Test Library",
    "keywords": "Field PXIe_4143 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4143 device. public const string PXIe_4143 = \"NI PXIe-4143\" Returns string Indicates an NI PXIe-4143 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4144.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4144.html",
    "title": "Field PXIe_4144 | Semiconductor Test Library",
    "keywords": "Field PXIe_4144 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4144 device. public const string PXIe_4144 = \"NI PXIe-4144\" Returns string Indicates an NI PXIe-4144 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4145.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4145.html",
    "title": "Field PXIe_4145 | Semiconductor Test Library",
    "keywords": "Field PXIe_4145 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4145 device. public const string PXIe_4145 = \"NI PXIe-4145\" Returns string Indicates an NI PXIe-4145 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4147.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4147.html",
    "title": "Field PXIe_4147 | Semiconductor Test Library",
    "keywords": "Field PXIe_4147 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4147 device. public const string PXIe_4147 = \"NI PXIe-4147\" Returns string Indicates an NI PXIe-4147 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4150.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4150.html",
    "title": "Field PXIe_4150 | Semiconductor Test Library",
    "keywords": "Field PXIe_4150 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4150 device. public const string PXIe_4150 = \"NI PXIe-4150\" Returns string Indicates an NI PXIe-4150 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4151.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4151.html",
    "title": "Field PXIe_4151 | Semiconductor Test Library",
    "keywords": "Field PXIe_4151 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4151 device. public const string PXIe_4151 = \"NI PXIe-4151\" Returns string Indicates an NI PXIe-4151 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4154.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4154.html",
    "title": "Field PXIe_4154 | Semiconductor Test Library",
    "keywords": "Field PXIe_4154 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4154 device. public const string PXIe_4154 = \"NI PXIe-4154\" Returns string Indicates an NI PXIe-4154 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4161.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4161.html",
    "title": "Field PXIe_4161 | Semiconductor Test Library",
    "keywords": "Field PXIe_4161 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4161 device. public const string PXIe_4161 = \"NI PXIe-4161\" Returns string Indicates an NI PXIe-4161 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4162.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4162.html",
    "title": "Field PXIe_4162 | Semiconductor Test Library",
    "keywords": "Field PXIe_4162 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4162 device. public const string PXIe_4162 = \"NI PXIe-4162\" Returns string Indicates an NI PXIe-4162 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4162_10pA.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4162_10pA.html",
    "title": "Field PXIe_4162_10pA | Semiconductor Test Library",
    "keywords": "Field PXIe_4162_10pA Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4162 10pA device. public const string PXIe_4162_10pA = \"NI PXIe-4162 (10pA)\" Returns string Indicates an NI PXIe-4162 10pA device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4163.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4163.html",
    "title": "Field PXIe_4163 | Semiconductor Test Library",
    "keywords": "Field PXIe_4163 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4163 device. public const string PXIe_4163 = \"NI PXIe-4163\" Returns string Indicates an NI PXIe-4163 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4163_10pA.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4163_10pA.html",
    "title": "Field PXIe_4163_10pA | Semiconductor Test Library",
    "keywords": "Field PXIe_4163_10pA Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4163 10pA device. public const string PXIe_4163_10pA = \"NI PXIe-4163 (10pA)\" Returns string Indicates an NI PXIe-4163 10pA device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4190.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4190.html",
    "title": "Field PXIe_4190 | Semiconductor Test Library",
    "keywords": "Field PXIe_4190 Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4190 device. public const string PXIe_4190 = \"NI PXIe-4190\" Returns string Indicates an NI PXIe-4190 device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4190_500kHz.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.PXIe_4190_500kHz.html",
    "title": "Field PXIe_4190_500kHz | Semiconductor Test Library",
    "keywords": "Field PXIe_4190_500kHz Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Indicates an NI PXIe-4190 500kHz device. public const string PXIe_4190_500kHz = \"NI PXIe-4190 (500kHz)\" Returns string Indicates an NI PXIe-4190 500kHz device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerModelStrings.html",
    "title": "Struct DCPowerModelStrings | Semiconductor Test Library",
    "keywords": "Struct DCPowerModelStrings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines DCPower model strings according to the driver definition below. https://dev.azure.com/ni/DevCentral/_git/ni-central?path=/src/nidcpower/base/nidcpowerSharedSource/source/nidcpowerSharedSource/productid/ProductID.h public struct DCPowerModelStrings Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Fields PXI_4110 Indicates an NI PXI-4110 device. PXI_4130 Indicates an NI PXI-4130 device. PXI_4131A Indicates an NI PXI-4131A device. PXI_4132 Indicates an NI PXI-4132 device. PXIe_4051 Indicates an NI PXIe-4051 device. PXIe_4112 Indicates an NI PXIe-4112 device. PXIe_4113 Indicates an NI PXIe-4113 device. PXIe_4118 Indicates an NI PXIe-4118 device. PXIe_4135 Indicates an NI PXIe-4135 device. PXIe_4135_40W Indicates an NI PXIe-4135 high power device. PXIe_4136 Indicates an NI PXIe-4136 device. PXIe_4137 Indicates an NI PXIe-4137 device. PXIe_4137_40W Indicates an NI PXIe-4137 high power device. PXIe_4138 Indicates an NI PXIe-4138 device. PXIe_4139 Indicates a NI PXIe-4139 device. PXIe_4139_40W Indicates an NI PXIe-4139 high power device. PXIe_4140 Indicates an NI PXIe-4140 device. PXIe_4141 Indicates an NI PXIe-4141 device. PXIe_4141_HSR Indicates an NI PXIe-4141 high sense resistance device. PXIe_4142 Indicates an NI PXIe-4142 device. PXIe_4143 Indicates an NI PXIe-4143 device. PXIe_4144 Indicates an NI PXIe-4144 device. PXIe_4145 Indicates an NI PXIe-4145 device. PXIe_4147 Indicates an NI PXIe-4147 device. PXIe_4150 Indicates an NI PXIe-4150 device. PXIe_4151 Indicates an NI PXIe-4151 device. PXIe_4154 Indicates an NI PXIe-4154 device. PXIe_4161 Indicates an NI PXIe-4161 device. PXIe_4162 Indicates an NI PXIe-4162 device. PXIe_4162_10pA Indicates an NI PXIe-4162 10pA device. PXIe_4163 Indicates an NI PXIe-4163 device. PXIe_4163_10pA Indicates an NI PXIe-4163 10pA device. PXIe_4190 Indicates an NI PXIe-4190 device. PXIe_4190_500kHz Indicates an NI PXIe-4190 500kHz device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.-ctor.html",
    "title": "Constructor DCPowerSessionInformation | Semiconductor Test Library",
    "keywords": "Constructor DCPowerSessionInformation Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll DCPowerSessionInformation(NIDCPower, string) Constructs a session information object that associates with a NationalInstruments.ModularInstruments.NIDCPower.NIDCPower instrument session. public DCPowerSessionInformation(NIDCPower session, string allChannelsString) Parameters session NIDCPower The NationalInstruments.ModularInstruments.NIDCPower.NIDCPower session. allChannelsString string The all channels string associated with the NationalInstruments.ModularInstruments.NIDCPower.NIDCPower session. DCPowerSessionInformation(NIDCPower, IList<SitePinInfo>) Constructs a session information object. public DCPowerSessionInformation(NIDCPower session, IList<SitePinInfo> associatedSitePinList) Parameters session NIDCPower The NationalInstruments.ModularInstruments.NIDCPower.NIDCPower session. associatedSitePinList IList<SitePinInfo> The specified subset of channels associated with the session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.AllChannelsOutput.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.AllChannelsOutput.html",
    "title": "Property AllChannelsOutput | Semiconductor Test Library",
    "keywords": "Property AllChannelsOutput Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AllChannelsOutput The all channels NationalInstruments.ModularInstruments.NIDCPower.DCPowerOutput corresponds to the AllChannelsString. public DCPowerOutput AllChannelsOutput { get; } Property Value DCPowerOutput"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.AllChannelsString.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.AllChannelsString.html",
    "title": "Property AllChannelsString | Semiconductor Test Library",
    "keywords": "Property AllChannelsString Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AllChannelsString The all channels string associated with the Session. public string AllChannelsString { get; } Property Value string Remarks It's a comma-separated string of instrument-channel pairs, e.g. \"SMU_4147_C1_S10/0, SMU_4147_C1_S10/1\"."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.AllInstrumentsAreTheSameModel.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.AllInstrumentsAreTheSameModel.html",
    "title": "Property AllInstrumentsAreTheSameModel | Semiconductor Test Library",
    "keywords": "Property AllInstrumentsAreTheSameModel Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AllInstrumentsAreTheSameModel Indicates whether all instruments are the same model. public bool AllInstrumentsAreTheSameModel { get; } Property Value bool"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.AssociatedSitePinList.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.AssociatedSitePinList.html",
    "title": "Property AssociatedSitePinList | Semiconductor Test Library",
    "keywords": "Property AssociatedSitePinList Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AssociatedSitePinList Gets a list of SitePinInfo objects containing information for the individual site-pin pairs associated with the driver session. public IList<SitePinInfo> AssociatedSitePinList { get; } Property Value IList<SitePinInfo>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.GenerateInstrumentChannelToSitePinDictionary.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.GenerateInstrumentChannelToSitePinDictionary.html",
    "title": "Method GenerateInstrumentChannelToSitePinDictionary | Semiconductor Test Library",
    "keywords": "Method GenerateInstrumentChannelToSitePinDictionary Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll GenerateInstrumentChannelToSitePinDictionary(ISemiconductorModuleContext) Generates a dictionary that takes a channel string and returns the associated site-pin pair information. public static void GenerateInstrumentChannelToSitePinDictionary(ISemiconductorModuleContext tsmContext) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.ModelString.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.ModelString.html",
    "title": "Property ModelString | Semiconductor Test Library",
    "keywords": "Property ModelString Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ModelString The DCPower model string if all instruments are the same model. Otherwise, it's empty string, please check ModelString for each element of the AssociatedSitePinList instead. public string ModelString { get; } Property Value string"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.PowerLineFrequency.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.PowerLineFrequency.html",
    "title": "Property PowerLineFrequency | Semiconductor Test Library",
    "keywords": "Property PowerLineFrequency Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll PowerLineFrequency The power line frequency value cache for PXI-4110, PXI-4130, and PXIe-4154 since they don't support power line frequency property. The cached value is used to convert aperture time value between power line cycles and seconds, for these models. public double PowerLineFrequency { get; set; } Property Value double"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.Session.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.Session.html",
    "title": "Property Session | Semiconductor Test Library",
    "keywords": "Property Session Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Session The NationalInstruments.ModularInstruments.NIDCPower.NIDCPower session. public NIDCPower Session { get; } Property Value NIDCPower"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionInformation.html",
    "title": "Class DCPowerSessionInformation | Semiconductor Test Library",
    "keywords": "Class DCPowerSessionInformation Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an object that contains an individual NationalInstruments.ModularInstruments.NIDCPower.NIDCPower session and its related information. public class DCPowerSessionInformation : ISessionInformation Inheritance object DCPowerSessionInformation Implements ISessionInformation Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DCPowerSessionInformation(NIDCPower, IList<SitePinInfo>) Constructs a session information object. DCPowerSessionInformation(NIDCPower, string) Constructs a session information object that associates with a NationalInstruments.ModularInstruments.NIDCPower.NIDCPower instrument session. Properties AllChannelsOutput The all channels NationalInstruments.ModularInstruments.NIDCPower.DCPowerOutput corresponds to the AllChannelsString. AllChannelsString The all channels string associated with the Session. AllInstrumentsAreTheSameModel Indicates whether all instruments are the same model. AssociatedSitePinList Gets a list of SitePinInfo objects containing information for the individual site-pin pairs associated with the driver session. ModelString The DCPower model string if all instruments are the same model. Otherwise, it's empty string, please check ModelString for each element of the AssociatedSitePinList instead. PowerLineFrequency The power line frequency value cache for PXI-4110, PXI-4130, and PXIe-4154 since they don't support power line frequency property. The cached value is used to convert aperture time value between power line cycles and seconds, for these models. Session The NationalInstruments.ModularInstruments.NIDCPower.NIDCPower session. Methods GenerateInstrumentChannelToSitePinDictionary(ISemiconductorModuleContext) Generates a dictionary that takes a channel string and returns the associated site-pin pair information."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionsBundle.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionsBundle.-ctor.html",
    "title": "Constructor DCPowerSessionsBundle | Semiconductor Test Library",
    "keywords": "Constructor DCPowerSessionsBundle Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll DCPowerSessionsBundle(ISemiconductorModuleContext, IEnumerable<DCPowerSessionInformation>) Constructs a sessions bundle object that represents a bunch of DCPowerSessionInformations. public DCPowerSessionsBundle(ISemiconductorModuleContext tsmContext, IEnumerable<DCPowerSessionInformation> allSessionInfo) Parameters tsmContext ISemiconductorModuleContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. allSessionInfo IEnumerable<DCPowerSessionInformation> An enumerable of DCPowerSessionInformations."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionsBundle.AggregateSitePinList.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionsBundle.AggregateSitePinList.html",
    "title": "Property AggregateSitePinList | Semiconductor Test Library",
    "keywords": "Property AggregateSitePinList Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AggregateSitePinList An aggregated list of SitePinInfo objects containing information for all of the individual site-pin pairs associated with each of the session information objects within the bundle. public IList<SitePinInfo> AggregateSitePinList { get; } Property Value IList<SitePinInfo>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionsBundle.FilterByPin.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionsBundle.FilterByPin.html",
    "title": "Method FilterByPin | Semiconductor Test Library",
    "keywords": "Method FilterByPin Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll FilterByPin(string) Filter current DCPowerSessionsBundle and returns a new one with the requested pin. public DCPowerSessionsBundle FilterByPin(string requestedPin) Parameters requestedPin string The requested pin. Returns DCPowerSessionsBundle A new DCPowerSessionsBundle object with the requested pin. FilterByPin(string[]) Filter current DCPowerSessionsBundle and returns a new one with requested pins. public DCPowerSessionsBundle FilterByPin(string[] requestedPins) Parameters requestedPins string[] The requested pins. Returns DCPowerSessionsBundle A new DCPowerSessionsBundle object with requested pins."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionsBundle.FilterBySite.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionsBundle.FilterBySite.html",
    "title": "Method FilterBySite | Semiconductor Test Library",
    "keywords": "Method FilterBySite Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll FilterBySite(int) Filters current DCPowerSessionsBundle and returns a new one with the requested site. public DCPowerSessionsBundle FilterBySite(int requestedSite) Parameters requestedSite int The requested site. Returns DCPowerSessionsBundle A new DCPowerSessionsBundle object with the requested site. FilterBySite(int[]) Filters current DCPowerSessionsBundle and returns a new one with requested sites. public DCPowerSessionsBundle FilterBySite(int[] requestedSites) Parameters requestedSites int[] The requested sites. Returns DCPowerSessionsBundle A new DCPowerSessionsBundle object with requested sites."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionsBundle.InstrumentSessions.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionsBundle.InstrumentSessions.html",
    "title": "Property InstrumentSessions | Semiconductor Test Library",
    "keywords": "Property InstrumentSessions Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll InstrumentSessions An enumerable of ISessionInformation. public IEnumerable<DCPowerSessionInformation> InstrumentSessions { get; } Property Value IEnumerable<DCPowerSessionInformation>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionsBundle.TSMContext.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionsBundle.TSMContext.html",
    "title": "Property TSMContext | Semiconductor Test Library",
    "keywords": "Property TSMContext Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll TSMContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. public ISemiconductorModuleContext TSMContext { get; } Property Value ISemiconductorModuleContext"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionsBundle.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSessionsBundle.html",
    "title": "Class DCPowerSessionsBundle | Semiconductor Test Library",
    "keywords": "Class DCPowerSessionsBundle Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an object that contains one or more DCPowerSessionInformation objects. public class DCPowerSessionsBundle : ISessionsBundle<DCPowerSessionInformation> Inheritance object DCPowerSessionsBundle Implements ISessionsBundle<DCPowerSessionInformation> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool[]>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double[]>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<double[], double[]>>, string, string) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult>) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1, TResult2>>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, int, TResult[]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[,]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1[], TResult2[]>>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, SitePinInfo>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int, SitePinInfo>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation>) Publish.PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[], string) Publish.PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[][], string) Constructors DCPowerSessionsBundle(ISemiconductorModuleContext, IEnumerable<DCPowerSessionInformation>) Constructs a sessions bundle object that represents a bunch of DCPowerSessionInformations. Properties AggregateSitePinList An aggregated list of SitePinInfo objects containing information for all of the individual site-pin pairs associated with each of the session information objects within the bundle. InstrumentSessions An enumerable of ISessionInformation. TSMContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. Methods FilterByPin(string) Filter current DCPowerSessionsBundle and returns a new one with the requested pin. FilterByPin(string[]) Filter current DCPowerSessionsBundle and returns a new one with requested pins. FilterBySite(int) Filters current DCPowerSessionsBundle and returns a new one with the requested site. FilterBySite(int[]) Filters current DCPowerSessionsBundle and returns a new one with requested sites."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSettings.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSettings.-ctor.html",
    "title": "Constructor DCPowerSettings | Semiconductor Test Library",
    "keywords": "Constructor DCPowerSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll DCPowerSettings() Default constructor. public DCPowerSettings()"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSettings.MeasureSettings.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSettings.MeasureSettings.html",
    "title": "Property MeasureSettings | Semiconductor Test Library",
    "keywords": "Property MeasureSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MeasureSettings The measure settings. public DCPowerMeasureSettings MeasureSettings { get; set; } Property Value DCPowerMeasureSettings"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSettings.SourceSettings.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSettings.SourceSettings.html",
    "title": "Property SourceSettings | Semiconductor Test Library",
    "keywords": "Property SourceSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll SourceSettings The source settings. public DCPowerSourceSettings SourceSettings { get; set; } Property Value DCPowerSourceSettings"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSettings.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSettings.html",
    "title": "Class DCPowerSettings | Semiconductor Test Library",
    "keywords": "Class DCPowerSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines DCPower settings. public class DCPowerSettings Inheritance object DCPowerSettings Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DCPowerSettings() Default constructor. Properties MeasureSettings The measure settings. SourceSettings The source settings."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.-ctor.html",
    "title": "Constructor DCPowerSourceSettings | Semiconductor Test Library",
    "keywords": "Constructor DCPowerSourceSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll DCPowerSourceSettings() Default constructor. public DCPowerSourceSettings()"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.Level.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.Level.html",
    "title": "Property Level | Semiconductor Test Library",
    "keywords": "Property Level Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Level The voltage or current level. public double? Level { get; set; } Property Value double?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.LevelRange.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.LevelRange.html",
    "title": "Property LevelRange | Semiconductor Test Library",
    "keywords": "Property LevelRange Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll LevelRange The voltage or current level range. public double? LevelRange { get; set; } Property Value double?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.Limit.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.Limit.html",
    "title": "Property Limit | Semiconductor Test Library",
    "keywords": "Property Limit Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Limit The current or voltage limit. public double? Limit { get; set; } Property Value double?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.LimitHigh.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.LimitHigh.html",
    "title": "Property LimitHigh | Semiconductor Test Library",
    "keywords": "Property LimitHigh Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll LimitHigh The current or voltage high limit. public double? LimitHigh { get; set; } Property Value double?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.LimitLow.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.LimitLow.html",
    "title": "Property LimitLow | Semiconductor Test Library",
    "keywords": "Property LimitLow Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll LimitLow The current or voltage low limit. public double? LimitLow { get; set; } Property Value double?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.LimitRange.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.LimitRange.html",
    "title": "Property LimitRange | Semiconductor Test Library",
    "keywords": "Property LimitRange Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll LimitRange The current or voltage limit range. public double? LimitRange { get; set; } Property Value double?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.LimitSymmetry.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.LimitSymmetry.html",
    "title": "Property LimitSymmetry | Semiconductor Test Library",
    "keywords": "Property LimitSymmetry Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll LimitSymmetry The limit symmetry. public DCPowerComplianceLimitSymmetry? LimitSymmetry { get; set; } Property Value DCPowerComplianceLimitSymmetry?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.OutputFunction.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.OutputFunction.html",
    "title": "Property OutputFunction | Semiconductor Test Library",
    "keywords": "Property OutputFunction Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll OutputFunction The output function. public DCPowerSourceOutputFunction? OutputFunction { get; set; } Property Value DCPowerSourceOutputFunction?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.SourceDelayInSeconds.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.SourceDelayInSeconds.html",
    "title": "Property SourceDelayInSeconds | Semiconductor Test Library",
    "keywords": "Property SourceDelayInSeconds Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll SourceDelayInSeconds The source delay in seconds. public double? SourceDelayInSeconds { get; set; } Property Value double?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.TransientResponse.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.TransientResponse.html",
    "title": "Property TransientResponse | Semiconductor Test Library",
    "keywords": "Property TransientResponse Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll TransientResponse The transient response. public DCPowerSourceTransientResponse? TransientResponse { get; set; } Property Value DCPowerSourceTransientResponse?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerSourceSettings.html",
    "title": "Class DCPowerSourceSettings | Semiconductor Test Library",
    "keywords": "Class DCPowerSourceSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines DCPower source settings. public class DCPowerSourceSettings Inheritance object DCPowerSourceSettings Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DCPowerSourceSettings() Default constructor. Properties Level The voltage or current level. LevelRange The voltage or current level range. Limit The current or voltage limit. LimitHigh The current or voltage high limit. LimitLow The current or voltage low limit. LimitRange The current or voltage limit range. LimitSymmetry The limit symmetry. OutputFunction The output function. SourceDelayInSeconds The source delay in seconds. TransientResponse The transient response."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformAcquisitionSettings.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformAcquisitionSettings.-ctor.html",
    "title": "Constructor DCPowerWaveformAcquisitionSettings | Semiconductor Test Library",
    "keywords": "Constructor DCPowerWaveformAcquisitionSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll DCPowerWaveformAcquisitionSettings() public DCPowerWaveformAcquisitionSettings()"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformAcquisitionSettings.ApertureTime.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformAcquisitionSettings.ApertureTime.html",
    "title": "Property ApertureTime | Semiconductor Test Library",
    "keywords": "Property ApertureTime Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ApertureTime The aperture time. public double ApertureTime { get; set; } Property Value double"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformAcquisitionSettings.ApertureTimeUnits.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformAcquisitionSettings.ApertureTimeUnits.html",
    "title": "Property ApertureTimeUnits | Semiconductor Test Library",
    "keywords": "Property ApertureTimeUnits Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ApertureTimeUnits The aperture time units. public DCPowerMeasureApertureTimeUnits ApertureTimeUnits { get; set; } Property Value DCPowerMeasureApertureTimeUnits"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformAcquisitionSettings.MeasureTriggerType.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformAcquisitionSettings.MeasureTriggerType.html",
    "title": "Property MeasureTriggerType | Semiconductor Test Library",
    "keywords": "Property MeasureTriggerType Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MeasureTriggerType The measure trigger type. public DCPowerMeasureTriggerType MeasureTriggerType { get; set; } Property Value DCPowerMeasureTriggerType"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformAcquisitionSettings.MeasureWhen.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformAcquisitionSettings.MeasureWhen.html",
    "title": "Property MeasureWhen | Semiconductor Test Library",
    "keywords": "Property MeasureWhen Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MeasureWhen The measure when. public DCPowerMeasurementWhen MeasureWhen { get; set; } Property Value DCPowerMeasurementWhen"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformAcquisitionSettings.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformAcquisitionSettings.html",
    "title": "Class DCPowerWaveformAcquisitionSettings | Semiconductor Test Library",
    "keywords": "Class DCPowerWaveformAcquisitionSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines DCPower waveform acquisition settings. public class DCPowerWaveformAcquisitionSettings Inheritance object DCPowerWaveformAcquisitionSettings Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DCPowerWaveformAcquisitionSettings() Properties ApertureTime The aperture time. ApertureTimeUnits The aperture time units. MeasureTriggerType The measure trigger type. MeasureWhen The measure when."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformResults.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformResults.-ctor.html",
    "title": "Constructor DCPowerWaveformResults | Semiconductor Test Library",
    "keywords": "Constructor DCPowerWaveformResults Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll DCPowerWaveformResults(DCPowerFetchResult, double) Constructs a DCPower waveform results object. public DCPowerWaveformResults(DCPowerFetchResult result, double deltaTime) Parameters result DCPowerFetchResult The DCPower fetch result. deltaTime double The measurement record delta time."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformResults.DeltaTime.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformResults.DeltaTime.html",
    "title": "Property DeltaTime | Semiconductor Test Library",
    "keywords": "Property DeltaTime Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll DeltaTime The measurement record delta time. public double DeltaTime { get; } Property Value double"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformResults.Result.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformResults.Result.html",
    "title": "Property Result | Semiconductor Test Library",
    "keywords": "Property Result Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Result The DCPower fetch result. public DCPowerFetchResult Result { get; } Property Value DCPowerFetchResult"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformResults.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.DCPowerWaveformResults.html",
    "title": "Class DCPowerWaveformResults | Semiconductor Test Library",
    "keywords": "Class DCPowerWaveformResults Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines DCPower waveform results. public class DCPowerWaveformResults Inheritance object DCPowerWaveformResults Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DCPowerWaveformResults(DCPowerFetchResult, double) Constructs a DCPower waveform results object. Properties DeltaTime The measurement record delta time. Result The DCPower fetch result."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.EventType.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.EventType.html",
    "title": "Enum EventType | Semiconductor Test Library",
    "keywords": "Enum EventType Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines DCPower event type. public enum EventType Fields MeasureCompleteEvent = 0 The measure complete event. PulseCompleteEvent = 1 The pulse complete event. ReadyForPulseTriggerEvent = 2 The ready for pulse trigger event. SequenceEngineDoneEvent = 3 The sequence engine done event. SequenceIterationCompleteEvent = 4 The sequence iteration complete event. SourceCompleteEvent = 5 The source complete event."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.InitializeAndClose.Close.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.InitializeAndClose.Close.html",
    "title": "Method Close | Semiconductor Test Library",
    "keywords": "Method Close Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Close(ISemiconductorModuleContext, bool) Closes all NationalInstruments.ModularInstruments.NIDCPower.NIDCPower sessions. public static void Close(ISemiconductorModuleContext tsmContext, bool reset = true) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. reset bool Whether to reset the device sessions before closing."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.InitializeAndClose.Initialize.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.InitializeAndClose.Initialize.html",
    "title": "Method Initialize | Semiconductor Test Library",
    "keywords": "Method Initialize Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Initialize(ISemiconductorModuleContext, bool) Initializes NationalInstruments.ModularInstruments.NIDCPower.NIDCPower sessions in the test system. public static void Initialize(ISemiconductorModuleContext tsmContext, bool resetDevice = false) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to reset device during initialization."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.InitializeAndClose.Reset.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.InitializeAndClose.Reset.html",
    "title": "Method Reset | Semiconductor Test Library",
    "keywords": "Method Reset Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Reset(ISemiconductorModuleContext, bool) Resets all NationalInstruments.ModularInstruments.NIDCPower.NIDCPower sessions. public static void Reset(ISemiconductorModuleContext tsmContext, bool resetDevice = false) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to perform a hard reset on the device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.InitializeAndClose.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.InitializeAndClose.html",
    "title": "Class InitializeAndClose | Semiconductor Test Library",
    "keywords": "Class InitializeAndClose Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines NationalInstruments.ModularInstruments.NIDCPower.NIDCPower sessions initialize and close APIs. public static class InitializeAndClose Inheritance object InitializeAndClose Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Close(ISemiconductorModuleContext, bool) Closes all NationalInstruments.ModularInstruments.NIDCPower.NIDCPower sessions. Initialize(ISemiconductorModuleContext, bool) Initializes NationalInstruments.ModularInstruments.NIDCPower.NIDCPower sessions in the test system. Reset(ISemiconductorModuleContext, bool) Resets all NationalInstruments.ModularInstruments.NIDCPower.NIDCPower sessions."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.AcquireSynchronizedWaveforms.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.AcquireSynchronizedWaveforms.html",
    "title": "Method AcquireSynchronizedWaveforms | Semiconductor Test Library",
    "keywords": "Method AcquireSynchronizedWaveforms Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll AcquireSynchronizedWaveforms(DCPowerSessionsBundle, double, double) Configures and acquires waveforms synchronized across the pins. public static PinSiteData<DCPowerFetchResult> AcquireSynchronizedWaveforms(this DCPowerSessionsBundle sessionsBundle, double apertureTimeInSeconds = 0, double measurementTimeInSeconds = 0) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. apertureTimeInSeconds double The measurement aperture time in seconds. measurementTimeInSeconds double The measurement time in seconds. Returns PinSiteData<DCPowerFetchResult> The per-site per-pin waveform results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.ConfigureAndStartWaveformAcquisition.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.ConfigureAndStartWaveformAcquisition.html",
    "title": "Method ConfigureAndStartWaveformAcquisition | Semiconductor Test Library",
    "keywords": "Method ConfigureAndStartWaveformAcquisition Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureAndStartWaveformAcquisition(DCPowerSessionsBundle, double, double) Configures and starts a waveform acquisition. public static PinSiteData<DCPowerWaveformAcquisitionSettings> ConfigureAndStartWaveformAcquisition(this DCPowerSessionsBundle sessionsBundle, double sampleRate, double bufferLength) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. sampleRate double The sample rate. bufferLength double The buffer length in seconds. Returns PinSiteData<DCPowerWaveformAcquisitionSettings> The original settings for the channels that do waveform acquisition."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.ConfigureApertureTime.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.ConfigureApertureTime.html",
    "title": "Method ConfigureApertureTime | Semiconductor Test Library",
    "keywords": "Method ConfigureApertureTime Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureApertureTime(NIDCPower, string, string, double, double, DCPowerMeasureApertureTimeUnits?) Configures the aperture time. public static void ConfigureApertureTime(this NIDCPower session, string channelString, string modelString, double powerLineFrequency, double apertureTime, DCPowerMeasureApertureTimeUnits? apertureTimeUnits) Parameters session NIDCPower The NationalInstruments.ModularInstruments.NIDCPower.NIDCPower object. channelString string The channel string. modelString string The DCPower instrument model. powerLineFrequency double The power line frequency used to calculate aperture time value from power line cycles to seconds. This is used just for PXI-4110, PXI-4130, and PXIe-4154 models since they don't support power line frequency property. apertureTime double The aperture time to set. apertureTimeUnits DCPowerMeasureApertureTimeUnits? The aperture time units to set."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.ConfigureApertureTimeUnits.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.ConfigureApertureTimeUnits.html",
    "title": "Method ConfigureApertureTimeUnits | Semiconductor Test Library",
    "keywords": "Method ConfigureApertureTimeUnits Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureApertureTimeUnits(NIDCPower, string, string, DCPowerMeasureApertureTimeUnits) Configures the aperture time units. public static void ConfigureApertureTimeUnits(this NIDCPower session, string channelString, string modelString, DCPowerMeasureApertureTimeUnits apertureTimeUnits) Parameters session NIDCPower The NationalInstruments.ModularInstruments.NIDCPower.NIDCPower object. channelString string The channel string. modelString string The DCPower instrument model. apertureTimeUnits DCPowerMeasureApertureTimeUnits The aperture time units to set."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.ConfigureMeasureSettings.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.ConfigureMeasureSettings.html",
    "title": "Method ConfigureMeasureSettings | Semiconductor Test Library",
    "keywords": "Method ConfigureMeasureSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureMeasureSettings(DCPowerSessionsBundle, DCPowerMeasureSettings) Configures one or more measure settings based on the values populated within a DCPowerMeasureSettings object. Accepts a scalar input of type DCPowerMeasureSettings. With overrides for SiteData<T>, and PinSiteData<T> input. public static void ConfigureMeasureSettings(this DCPowerSessionsBundle sessionsBundle, DCPowerMeasureSettings settings) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. settings DCPowerMeasureSettings The measure settings to configure. ConfigureMeasureSettings(DCPowerSessionsBundle, SiteData<DCPowerMeasureSettings>) Configures one or more measure settings based on the values populated within a DCPowerMeasureSettings object. Accepts a scalar input of type DCPowerMeasureSettings. With overrides for SiteData<T>, and PinSiteData<T> input. public static void ConfigureMeasureSettings(this DCPowerSessionsBundle sessionsBundle, SiteData<DCPowerMeasureSettings> settings) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. settings SiteData<DCPowerMeasureSettings> The measure settings to configure. ConfigureMeasureSettings(DCPowerSessionsBundle, PinSiteData<DCPowerMeasureSettings>) Configures one or more measure settings based on the values populated within a DCPowerMeasureSettings object. Accepts a scalar input of type DCPowerMeasureSettings. With overrides for SiteData<T>, and PinSiteData<T> input. public static void ConfigureMeasureSettings(this DCPowerSessionsBundle sessionsBundle, PinSiteData<DCPowerMeasureSettings> settings) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. settings PinSiteData<DCPowerMeasureSettings> The measure settings to configure. ConfigureMeasureSettings(DCPowerSessionsBundle, IDictionary<string, DCPowerMeasureSettings>) Configures DCPowerMeasureSettings. public static void ConfigureMeasureSettings(this DCPowerSessionsBundle sessionsBundle, IDictionary<string, DCPowerMeasureSettings> settings) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. settings IDictionary<string, DCPowerMeasureSettings> The specific settings to configure."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.ConfigureMeasureWhen.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.ConfigureMeasureWhen.html",
    "title": "Method ConfigureMeasureWhen | Semiconductor Test Library",
    "keywords": "Method ConfigureMeasureWhen Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureMeasureWhen(DCPowerSessionsBundle, DCPowerMeasurementWhen) Configures the DCPower MeasurementWhen property. public static void ConfigureMeasureWhen(this DCPowerSessionsBundle sessionsBundle, DCPowerMeasurementWhen measureWhen) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. measureWhen DCPowerMeasurementWhen The MeasurementWhen property to set. ConfigureMeasureWhen(NIDCPower, string, string, DCPowerMeasurementWhen) Configures the MeasurementWhen property. public static void ConfigureMeasureWhen(this NIDCPower session, string channelString, string modelString, DCPowerMeasurementWhen measureWhen) Parameters session NIDCPower The NationalInstruments.ModularInstruments.NIDCPower.NIDCPower object. channelString string The channel string. modelString string The DCPower instrument model. measureWhen DCPowerMeasurementWhen The measurement when to set."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.ConfigureMeasurementSense.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.ConfigureMeasurementSense.html",
    "title": "Method ConfigureMeasurementSense | Semiconductor Test Library",
    "keywords": "Method ConfigureMeasurementSense Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureMeasurementSense(DCPowerSessionsBundle, DCPowerMeasurementSense) Configures the measurement sense. public static void ConfigureMeasurementSense(this DCPowerSessionsBundle sessionsBundle, DCPowerMeasurementSense sense) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. sense DCPowerMeasurementSense The measurement sense to set. ConfigureMeasurementSense(NIDCPower, string, string, DCPowerMeasurementSense) Configures the measurement sense. public static void ConfigureMeasurementSense(this NIDCPower session, string channelString, string modelString, DCPowerMeasurementSense sense) Parameters session NIDCPower The NationalInstruments.ModularInstruments.NIDCPower.NIDCPower object. channelString string The channel string. modelString string The DCPower instrument model. sense DCPowerMeasurementSense The measurement sense to set."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.ConfigurePowerLineFrequency.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.ConfigurePowerLineFrequency.html",
    "title": "Method ConfigurePowerLineFrequency | Semiconductor Test Library",
    "keywords": "Method ConfigurePowerLineFrequency Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigurePowerLineFrequency(DCPowerSessionsBundle, double) Configures the power line frequency in Hz (double). public static void ConfigurePowerLineFrequency(this DCPowerSessionsBundle sessionsBundle, double frequency) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. frequency double The power line frequency in Hz to set. Remarks This method should only be invoked once when driver sessions are first initialized."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.FetchMeasurement.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.FetchMeasurement.html",
    "title": "Method FetchMeasurement | Semiconductor Test Library",
    "keywords": "Method FetchMeasurement Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll FetchMeasurement(DCPowerSessionsBundle, int, double) Fetches results from a previous measurement. public static PinSiteData<SingleDCPowerFetchResult[]> FetchMeasurement(this DCPowerSessionsBundle sessionsBundle, int pointsToFetch = 1, double timeoutInSeconds = 10) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. pointsToFetch int The number of points to Fetch. timeoutInSeconds double The time to wait before the operation is aborted. Returns PinSiteData<SingleDCPowerFetchResult[]> A PinSiteData<T> object that contains an array of SingleDCPowerFetchResult values, where each SingleDCPowerFetchResult object contains the voltage, current, and inCompliance result for a simple sample/point from the previous measurement. Remarks This method should not be used when the MeasureWhen property is OnDemand."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.FinishWaveformAcquisition.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.FinishWaveformAcquisition.html",
    "title": "Method FinishWaveformAcquisition | Semiconductor Test Library",
    "keywords": "Method FinishWaveformAcquisition Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll FinishWaveformAcquisition(DCPowerSessionsBundle, double, PinSiteData<DCPowerWaveformAcquisitionSettings>) Fetches waveform acquisition results as a pin- and site-aware data object. public static PinSiteData<DCPowerWaveformResults> FinishWaveformAcquisition(this DCPowerSessionsBundle sessionsBundle, double fetchWaveformLength, PinSiteData<DCPowerWaveformAcquisitionSettings> originalSettings) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. fetchWaveformLength double The waveform length in seconds to fetch. originalSettings PinSiteData<DCPowerWaveformAcquisitionSettings> The original settings for the channels that do waveform acquisition. This is the return value of the ConfigureAndStartWaveformAcquisition method. Returns PinSiteData<DCPowerWaveformResults> The per-site per-pin waveform results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.GetApertureTimeInSeconds.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.GetApertureTimeInSeconds.html",
    "title": "Method GetApertureTimeInSeconds | Semiconductor Test Library",
    "keywords": "Method GetApertureTimeInSeconds Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll GetApertureTimeInSeconds(DCPowerSessionsBundle, out double) Gets aperture time in seconds. public static PinSiteData<double> GetApertureTimeInSeconds(this DCPowerSessionsBundle sessionsBundle, out double maximumApertureTime) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. maximumApertureTime double Returns the maximum aperture time. Returns PinSiteData<double> The per-site per-pin aperture times."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.GetPowerLineFrequency.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.GetPowerLineFrequency.html",
    "title": "Method GetPowerLineFrequency | Semiconductor Test Library",
    "keywords": "Method GetPowerLineFrequency Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll GetPowerLineFrequency(DCPowerSessionsBundle) Gets the power line frequency. public static PinSiteData<double> GetPowerLineFrequency(this DCPowerSessionsBundle sessionsBundle) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. Returns PinSiteData<double> The per-site per-pin power line frequencies."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.MeasureAndPublishCurrent.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.MeasureAndPublishCurrent.html",
    "title": "Method MeasureAndPublishCurrent | Semiconductor Test Library",
    "keywords": "Method MeasureAndPublishCurrent Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MeasureAndPublishCurrent(DCPowerSessionsBundle, string, out double[][]) Measures the current on the target pin(s) and immediately publishes the results using the publishedDataId passed in. public static void MeasureAndPublishCurrent(this DCPowerSessionsBundle sessionsBundle, string publishedDataId, out double[][] currentMeasurements) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. publishedDataId string The unique data id to use when publishing. currentMeasurements double[][] The returned current measurements. Remarks Use this method for the fastest test time if the measurement results do not needed for any other operations. Otherwise, use the override for this method that returns PinSiteData. MeasureAndPublishCurrent(DCPowerSessionsBundle, string) Measures the current on the target pin(s) and immediately publishes the results using the publishedDataId passed in. public static PinSiteData<double> MeasureAndPublishCurrent(this DCPowerSessionsBundle sessionsBundle, string publishedDataId) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. publishedDataId string The unique data id to use when publishing. Returns PinSiteData<double> The pin-site aware current measurements."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.MeasureAndPublishVoltage.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.MeasureAndPublishVoltage.html",
    "title": "Method MeasureAndPublishVoltage | Semiconductor Test Library",
    "keywords": "Method MeasureAndPublishVoltage Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MeasureAndPublishVoltage(DCPowerSessionsBundle, string, out double[][]) Measures the voltage on the target pin(s) and immediately publishes the results using the publishedDataId passed in. public static void MeasureAndPublishVoltage(this DCPowerSessionsBundle sessionsBundle, string publishedDataId, out double[][] voltageMeasurements) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. publishedDataId string The unique data id to use when publishing. voltageMeasurements double[][] The returned voltage measurements. Remarks Use this method for the fastest test time if the measurement results are not needed for any other operations. Otherwise, use the override for this method that returns PinSiteData. MeasureAndPublishVoltage(DCPowerSessionsBundle, string) Measures the voltage on the target pin(s) and immediately publishes the results using the publishedDataId passed in. public static PinSiteData<double> MeasureAndPublishVoltage(this DCPowerSessionsBundle sessionsBundle, string publishedDataId) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. publishedDataId string The unique data id to use when publishing. Returns PinSiteData<double> The pin-site aware voltage measurements."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.MeasureAndReturnPerInstrumentPerChannelResults.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.MeasureAndReturnPerInstrumentPerChannelResults.html",
    "title": "Method MeasureAndReturnPerInstrumentPerChannelResults | Semiconductor Test Library",
    "keywords": "Method MeasureAndReturnPerInstrumentPerChannelResults Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MeasureAndReturnPerInstrumentPerChannelResults(DCPowerSessionsBundle) Measures and returns per-instrument per-channel results. public static Tuple<double[][], double[][]> MeasureAndReturnPerInstrumentPerChannelResults(this DCPowerSessionsBundle sessionsBundle) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. Returns Tuple<double[][], double[][]> The measurements in per-instrument per-channel format. Item1 is voltage measurements, Item2 is current measurements."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.MeasureAndReturnPerSitePerPinResults.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.MeasureAndReturnPerSitePerPinResults.html",
    "title": "Method MeasureAndReturnPerSitePerPinResults | Semiconductor Test Library",
    "keywords": "Method MeasureAndReturnPerSitePerPinResults Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MeasureAndReturnPerSitePerPinResults(DCPowerSessionsBundle) Measures and returns per-site per-pin results. public static Tuple<PinSiteData<double>, PinSiteData<double>> MeasureAndReturnPerSitePerPinResults(this DCPowerSessionsBundle sessionsBundle) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. Returns Tuple<PinSiteData<double>, PinSiteData<double>> The measurements in per-site per-pin format. Item1 is voltage measurements, Item2 is current measurements."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.MeasureCurrent.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.MeasureCurrent.html",
    "title": "Method MeasureCurrent | Semiconductor Test Library",
    "keywords": "Method MeasureCurrent Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MeasureCurrent(DCPowerSessionsBundle) Measures the current on the target pin(s) and returns a pin- and site-aware data object. public static PinSiteData<double> MeasureCurrent(this DCPowerSessionsBundle sessionsBundle) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. Returns PinSiteData<double> The per-pin per-site voltage measurements."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.MeasureVoltage.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.MeasureVoltage.html",
    "title": "Method MeasureVoltage | Semiconductor Test Library",
    "keywords": "Method MeasureVoltage Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MeasureVoltage(DCPowerSessionsBundle) Measures the voltage on the target pin(s) and returns a pin- and site-aware data object. public static PinSiteData<double> MeasureVoltage(this DCPowerSessionsBundle sessionsBundle) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. Returns PinSiteData<double> The per-pin per-site voltage measurements."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.MeasureVoltageAndCurrent.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.MeasureVoltageAndCurrent.html",
    "title": "Method MeasureVoltageAndCurrent | Semiconductor Test Library",
    "keywords": "Method MeasureVoltageAndCurrent Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MeasureVoltageAndCurrent(DCPowerSessionInformation) Measures the voltage and current. public static Tuple<double[], double[]> MeasureVoltageAndCurrent(this DCPowerSessionInformation sessionInfo) Parameters sessionInfo DCPowerSessionInformation The DCPowerSessionInformation object. Returns Tuple<double[], double[]> The measurements. Item1 is voltage measurements, Item2 is current measurements."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Measure.html",
    "title": "Class Measure | Semiconductor Test Library",
    "keywords": "Class Measure Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines methods for DCPower measurements. public static class Measure Inheritance object Measure Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AcquireSynchronizedWaveforms(DCPowerSessionsBundle, double, double) Configures and acquires waveforms synchronized across the pins. ConfigureAndStartWaveformAcquisition(DCPowerSessionsBundle, double, double) Configures and starts a waveform acquisition. ConfigureApertureTime(NIDCPower, string, string, double, double, DCPowerMeasureApertureTimeUnits?) Configures the aperture time. ConfigureApertureTimeUnits(NIDCPower, string, string, DCPowerMeasureApertureTimeUnits) Configures the aperture time units. ConfigureMeasureSettings(DCPowerSessionsBundle, PinSiteData<DCPowerMeasureSettings>) Configures one or more measure settings based on the values populated within a DCPowerMeasureSettings object. Accepts a scalar input of type DCPowerMeasureSettings. With overrides for SiteData<T>, and PinSiteData<T> input. ConfigureMeasureSettings(DCPowerSessionsBundle, SiteData<DCPowerMeasureSettings>) Configures one or more measure settings based on the values populated within a DCPowerMeasureSettings object. Accepts a scalar input of type DCPowerMeasureSettings. With overrides for SiteData<T>, and PinSiteData<T> input. ConfigureMeasureSettings(DCPowerSessionsBundle, DCPowerMeasureSettings) Configures one or more measure settings based on the values populated within a DCPowerMeasureSettings object. Accepts a scalar input of type DCPowerMeasureSettings. With overrides for SiteData<T>, and PinSiteData<T> input. ConfigureMeasureSettings(DCPowerSessionsBundle, IDictionary<string, DCPowerMeasureSettings>) Configures DCPowerMeasureSettings. ConfigureMeasureWhen(NIDCPower, string, string, DCPowerMeasurementWhen) Configures the MeasurementWhen property. ConfigureMeasureWhen(DCPowerSessionsBundle, DCPowerMeasurementWhen) Configures the DCPower MeasurementWhen property. ConfigureMeasurementSense(NIDCPower, string, string, DCPowerMeasurementSense) Configures the measurement sense. ConfigureMeasurementSense(DCPowerSessionsBundle, DCPowerMeasurementSense) Configures the measurement sense. ConfigurePowerLineFrequency(DCPowerSessionsBundle, double) Configures the power line frequency in Hz (double). FetchMeasurement(DCPowerSessionsBundle, int, double) Fetches results from a previous measurement. FinishWaveformAcquisition(DCPowerSessionsBundle, double, PinSiteData<DCPowerWaveformAcquisitionSettings>) Fetches waveform acquisition results as a pin- and site-aware data object. GetApertureTimeInSeconds(DCPowerSessionsBundle, out double) Gets aperture time in seconds. GetPowerLineFrequency(DCPowerSessionsBundle) Gets the power line frequency. MeasureAndPublishCurrent(DCPowerSessionsBundle, string) Measures the current on the target pin(s) and immediately publishes the results using the publishedDataId passed in. MeasureAndPublishCurrent(DCPowerSessionsBundle, string, out double[][]) Measures the current on the target pin(s) and immediately publishes the results using the publishedDataId passed in. MeasureAndPublishVoltage(DCPowerSessionsBundle, string) Measures the voltage on the target pin(s) and immediately publishes the results using the publishedDataId passed in. MeasureAndPublishVoltage(DCPowerSessionsBundle, string, out double[][]) Measures the voltage on the target pin(s) and immediately publishes the results using the publishedDataId passed in. MeasureAndReturnPerInstrumentPerChannelResults(DCPowerSessionsBundle) Measures and returns per-instrument per-channel results. MeasureAndReturnPerSitePerPinResults(DCPowerSessionsBundle) Measures and returns per-site per-pin results. MeasureCurrent(DCPowerSessionsBundle) Measures the current on the target pin(s) and returns a pin- and site-aware data object. MeasureVoltage(DCPowerSessionsBundle) Measures the voltage on the target pin(s) and returns a pin- and site-aware data object. MeasureVoltageAndCurrent(DCPowerSessionInformation) Measures the voltage and current."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.SingleDCPowerFetchResult.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.SingleDCPowerFetchResult.-ctor.html",
    "title": "Constructor SingleDCPowerFetchResult | Semiconductor Test Library",
    "keywords": "Constructor SingleDCPowerFetchResult Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll SingleDCPowerFetchResult(double, double, bool) Constructs a SingleDCPowerFetchResult object. public SingleDCPowerFetchResult(double voltageMeasurement, double currentMeasurement, bool inCompliance) Parameters voltageMeasurement double Voltage measurement value currentMeasurement double Current measurement value. inCompliance bool Whether the output is in compliance mode when measurement is taken."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.SingleDCPowerFetchResult.CurrentMeasurement.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.SingleDCPowerFetchResult.CurrentMeasurement.html",
    "title": "Property CurrentMeasurement | Semiconductor Test Library",
    "keywords": "Property CurrentMeasurement Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll CurrentMeasurement Current measurement value. public double CurrentMeasurement { get; } Property Value double"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.SingleDCPowerFetchResult.InCompliance.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.SingleDCPowerFetchResult.InCompliance.html",
    "title": "Property InCompliance | Semiconductor Test Library",
    "keywords": "Property InCompliance Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll InCompliance Whether the output was in compliance mode when measurement was taken. public bool InCompliance { get; } Property Value bool"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.SingleDCPowerFetchResult.VoltageMeasurement.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.SingleDCPowerFetchResult.VoltageMeasurement.html",
    "title": "Property VoltageMeasurement | Semiconductor Test Library",
    "keywords": "Property VoltageMeasurement Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll VoltageMeasurement Voltage measurement value. public double VoltageMeasurement { get; } Property Value double"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.SingleDCPowerFetchResult.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.SingleDCPowerFetchResult.html",
    "title": "Struct SingleDCPowerFetchResult | Semiconductor Test Library",
    "keywords": "Struct SingleDCPowerFetchResult Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Structure that defines the result of a single fetch operation. public readonly struct SingleDCPowerFetchResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors SingleDCPowerFetchResult(double, double, bool) Constructs a SingleDCPowerFetchResult object. Properties CurrentMeasurement Current measurement value. InCompliance Whether the output was in compliance mode when measurement was taken. VoltageMeasurement Voltage measurement value."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.CheckDCVoltageModeAndLevels.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.CheckDCVoltageModeAndLevels.html",
    "title": "Method CheckDCVoltageModeAndLevels | Semiconductor Test Library",
    "keywords": "Method CheckDCVoltageModeAndLevels Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll CheckDCVoltageModeAndLevels(DCPowerSessionsBundle, out IEnumerable<string>, IDictionary<string, double>) Checks if the output function is set to DCVoltage and the level(s) are set to the expected values. public static bool CheckDCVoltageModeAndLevels(this DCPowerSessionsBundle sessionsBundle, out IEnumerable<string> failedChannels, IDictionary<string, double> expectedVoltages = null) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. failedChannels IEnumerable<string> Returns the channels that fail the check. expectedVoltages IDictionary<string, double> The expected per-pin voltages. Returns bool Whether all channels pass the check."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ConfigureCurrentLimit.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ConfigureCurrentLimit.html",
    "title": "Method ConfigureCurrentLimit | Semiconductor Test Library",
    "keywords": "Method ConfigureCurrentLimit Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureCurrentLimit(DCPowerSessionsBundle, double, double?) Configures the current limit. public static void ConfigureCurrentLimit(this DCPowerSessionsBundle sessionsBundle, double currentLimit, double? currentLimitRange = null) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. currentLimit double The current limit to set. currentLimitRange double? The current limit range to set. Use the absolute value of current limit to set current limit range when this parameter is not specified. ConfigureCurrentLimit(DCPowerOutput, double, double?) Configures the current limit. public static void ConfigureCurrentLimit(this DCPowerOutput output, double currentLimit, double? currentLimitRange = null) Parameters output DCPowerOutput The NationalInstruments.ModularInstruments.NIDCPower.DCPowerOutput object. currentLimit double The current limit to set. currentLimitRange double? The current limit range to set. Use the absolute value of current limit to set current limit range when this parameter is not specified."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ConfigureOutputConnected.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ConfigureOutputConnected.html",
    "title": "Method ConfigureOutputConnected | Semiconductor Test Library",
    "keywords": "Method ConfigureOutputConnected Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureOutputConnected(DCPowerSessionsBundle, bool) Configures the output relay of the underlying device channel (s) to either be connected (closed) or disconnected (open). Accepts a scalar input of type bool. With overrides for SiteData<T>, and PinSiteData<T> input. Pass this method a true value to physically disconnect the output terminal from the front panel. Disconnect the output only if disconnecting is necessary for your application. For example, a battery connected to the output terminal might discharge unless the relay is disconnected. Excessive connecting and disconnecting of the output can cause premature wear on the relay. This property is not supported by all devices. Refer to the Supported Properties by Device topic in the NI-DCPower LabVIEW VI Reference and the document of your SMU model for information about supported devices. public static void ConfigureOutputConnected(this DCPowerSessionsBundle sessionsBundle, bool connectOutput) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. connectOutput bool The boolean value to either connect (true) or disconnect (false) the output terminal. ConfigureOutputConnected(DCPowerSessionsBundle, SiteData<bool>) Configures the output relay of the underlying device channel (s) to either be connected (closed) or disconnected (open). Accepts a scalar input of type bool. With overrides for SiteData<T>, and PinSiteData<T> input. Pass this method a true value to physically disconnect the output terminal from the front panel. Disconnect the output only if disconnecting is necessary for your application. For example, a battery connected to the output terminal might discharge unless the relay is disconnected. Excessive connecting and disconnecting of the output can cause premature wear on the relay. This property is not supported by all devices. Refer to the Supported Properties by Device topic in the NI-DCPower LabVIEW VI Reference and the document of your SMU model for information about supported devices. public static void ConfigureOutputConnected(this DCPowerSessionsBundle sessionsBundle, SiteData<bool> connectOutput) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. connectOutput SiteData<bool> The boolean value to either connect (true) or disconnect (false) the output terminal. ConfigureOutputConnected(DCPowerSessionsBundle, PinSiteData<bool>) Configures the output relay of the underlying device channel (s) to either be connected (closed) or disconnected (open). Accepts a scalar input of type bool. With overrides for SiteData<T>, and PinSiteData<T> input. Pass this method a true value to physically disconnect the output terminal from the front panel. Disconnect the output only if disconnecting is necessary for your application. For example, a battery connected to the output terminal might discharge unless the relay is disconnected. Excessive connecting and disconnecting of the output can cause premature wear on the relay. This property is not supported by all devices. Refer to the Supported Properties by Device topic in the NI-DCPower LabVIEW VI Reference and the document of your SMU model for information about supported devices. public static void ConfigureOutputConnected(this DCPowerSessionsBundle sessionsBundle, PinSiteData<bool> connectOutput) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. connectOutput PinSiteData<bool> The boolean value to either connect (true) or disconnect (false) the output terminal."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ConfigureOutputEnabled.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ConfigureOutputEnabled.html",
    "title": "Method ConfigureOutputEnabled | Semiconductor Test Library",
    "keywords": "Method ConfigureOutputEnabled Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureOutputEnabled(DCPowerSessionsBundle, bool) Configures whether to enable (true) or disable (false) output generation on the underlying device channel(s). public static void ConfigureOutputEnabled(this DCPowerSessionsBundle sessionsBundle, bool enableOutput) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. enableOutput bool The boolean value to either enable (true) or disable (false) the output . Remarks Note: This property does not change the ConfigureOutputEnabled method. They are independent of each other. ConfigureOutputEnabled(DCPowerSessionsBundle, SiteData<bool>) Configures whether to enable (true) or disable (false) output generation on the underlying device channel(s). public static void ConfigureOutputEnabled(this DCPowerSessionsBundle sessionsBundle, SiteData<bool> enableOutput) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. enableOutput SiteData<bool> The boolean value to either enable (true) or disable (false) the output . Remarks Note: This property does not change the ConfigureOutputEnabled method. They are independent of each other. ConfigureOutputEnabled(DCPowerSessionsBundle, PinSiteData<bool>) Configures whether to enable (true) or disable (false) output generation on the underlying device channel(s). public static void ConfigureOutputEnabled(this DCPowerSessionsBundle sessionsBundle, PinSiteData<bool> enableOutput) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. enableOutput PinSiteData<bool> The boolean value to either enable (true) or disable (false) the output . Remarks Note: This property does not change the ConfigureOutputEnabled method. They are independent of each other."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ConfigureSequence.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ConfigureSequence.html",
    "title": "Method ConfigureSequence | Semiconductor Test Library",
    "keywords": "Method ConfigureSequence Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureSequence(DCPowerSessionsBundle, double[], int, double?) Configures a hardware-timed sequence of values. public static void ConfigureSequence(this DCPowerSessionsBundle sessionsBundle, double[] sequence, int sequenceLoopCount, double? sequenceStepDeltaTimeInSeconds = null) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. sequence double[] The voltage or current sequence to set. sequenceLoopCount int The number of loops a sequence runs after initiation. sequenceStepDeltaTimeInSeconds double? The delta time between the start of two consecutive steps in a sequence. ConfigureSequence(DCPowerOutput, double[], int, double?) Configures a hardware-timed sequence of values. public static void ConfigureSequence(this DCPowerOutput output, double[] sequence, int sequenceLoopCount, double? sequenceStepDeltaTimeInSeconds = null) Parameters output DCPowerOutput The NationalInstruments.ModularInstruments.NIDCPower.DCPowerOutput object. sequence double[] The voltage or current sequence to set. sequenceLoopCount int The number of loops a sequence runs after initiation. sequenceStepDeltaTimeInSeconds double? The delta time between the start of two consecutive steps in a sequence."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ConfigureSourceDelay.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ConfigureSourceDelay.html",
    "title": "Method ConfigureSourceDelay | Semiconductor Test Library",
    "keywords": "Method ConfigureSourceDelay Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureSourceDelay(DCPowerSessionsBundle, double) Configures the source delay. With overrides for SiteData<T>, and PinSiteData<T> input. public static void ConfigureSourceDelay(this DCPowerSessionsBundle sessionsBundle, double sourceDelayInSeconds) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. sourceDelayInSeconds double The double value of the source delay in seconds. ConfigureSourceDelay(DCPowerSessionsBundle, SiteData<double>) Configures the source delay. With overrides for SiteData<T>, and PinSiteData<T> input. public static void ConfigureSourceDelay(this DCPowerSessionsBundle sessionsBundle, SiteData<double> sourceDelayInSeconds) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. sourceDelayInSeconds SiteData<double> The double value of the source delay in seconds. ConfigureSourceDelay(DCPowerSessionsBundle, PinSiteData<double>) Configures the source delay. With overrides for SiteData<T>, and PinSiteData<T> input. public static void ConfigureSourceDelay(this DCPowerSessionsBundle sessionsBundle, PinSiteData<double> sourceDelayInSeconds) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. sourceDelayInSeconds PinSiteData<double> The double value of the source delay in seconds."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ConfigureSourceSettings.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ConfigureSourceSettings.html",
    "title": "Method ConfigureSourceSettings | Semiconductor Test Library",
    "keywords": "Method ConfigureSourceSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureSourceSettings(DCPowerSessionsBundle, DCPowerSourceSettings) Configures one or more source settings based on values populated within a DCPowerSourceSettings object. Accepts a scalar input of type DCPowerSourceSettings. With overrides for SiteData<T>, and PinSiteData<T> input. public static void ConfigureSourceSettings(this DCPowerSessionsBundle sessionsBundle, DCPowerSourceSettings settings) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. settings DCPowerSourceSettings The source settings to configure. ConfigureSourceSettings(DCPowerSessionsBundle, SiteData<DCPowerSourceSettings>) Configures one or more source settings based on values populated within a DCPowerSourceSettings object. Accepts a scalar input of type DCPowerSourceSettings. With overrides for SiteData<T>, and PinSiteData<T> input. public static void ConfigureSourceSettings(this DCPowerSessionsBundle sessionsBundle, SiteData<DCPowerSourceSettings> settings) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. settings SiteData<DCPowerSourceSettings> The source settings to configure. ConfigureSourceSettings(DCPowerSessionsBundle, PinSiteData<DCPowerSourceSettings>) Configures one or more source settings based on values populated within a DCPowerSourceSettings object. Accepts a scalar input of type DCPowerSourceSettings. With overrides for SiteData<T>, and PinSiteData<T> input. public static void ConfigureSourceSettings(this DCPowerSessionsBundle sessionsBundle, PinSiteData<DCPowerSourceSettings> settings) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. settings PinSiteData<DCPowerSourceSettings> The source settings to configure. ConfigureSourceSettings(DCPowerSessionInformation, DCPowerSourceSettings, string) Configures DCPowerSourceSettings. public static void ConfigureSourceSettings(this DCPowerSessionInformation sessionInfo, DCPowerSourceSettings settings, string channelString = \"\") Parameters sessionInfo DCPowerSessionInformation The DCPowerSessionInformation object. settings DCPowerSourceSettings The source settings to configure. channelString string The channel string. Empty string means all channels in the session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ConfigureTransientResponse.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ConfigureTransientResponse.html",
    "title": "Method ConfigureTransientResponse | Semiconductor Test Library",
    "keywords": "Method ConfigureTransientResponse Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureTransientResponse(NIDCPower, string, string, DCPowerSourceTransientResponse) Configures the transient response. public static void ConfigureTransientResponse(this NIDCPower session, string channelString, string modelString, DCPowerSourceTransientResponse transientResponse) Parameters session NIDCPower The NationalInstruments.ModularInstruments.NIDCPower.NIDCPower object. channelString string The channel string. modelString string The DCPower instrument model DCPowerModelStrings. transientResponse DCPowerSourceTransientResponse The transient response to set."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ForceCurrent.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ForceCurrent.html",
    "title": "Method ForceCurrent | Semiconductor Test Library",
    "keywords": "Method ForceCurrent Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ForceCurrent(DCPowerSessionsBundle, double, double?, double?, double?, bool) Forces current on the target pins at the specified level. Must at least provide a level value, and the method will assume all other properties that have been previously set. Optionally, can also provide a specific voltage limit, current level range, voltage limit range values directly. public static void ForceCurrent(this DCPowerSessionsBundle sessionsBundle, double currentLevel, double? voltageLimit = null, double? currentLevelRange = null, double? voltageLimitRange = null, bool waitForSourceCompletion = false) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. currentLevel double The current level to force. voltageLimit double? The voltage limit to use. currentLevelRange double? The current level range to use. voltageLimitRange double? The voltage limit range to use. waitForSourceCompletion bool Setting this to True will wait until sourcing is complete before continuing, which includes the set amount of source delay. Otherwise, the source delay amount is not directly accounted for by this method and the WaitForEvent must be manually invoked in proceeding code. ForceCurrent(DCPowerSessionsBundle, IDictionary<string, DCPowerSourceSettings>, bool) Forces current and specifies symmetric voltage limits. public static void ForceCurrent(this DCPowerSessionsBundle sessionsBundle, IDictionary<string, DCPowerSourceSettings> settings, bool waitForSourceCompletion = false) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. settings IDictionary<string, DCPowerSourceSettings> The per-pin settings to use. waitForSourceCompletion bool Setting this to True will wait until sourcing is complete before continuing, which includes the set amount of source delay. Otherwise, the source delay amount is not directly accounted for by this method and the WaitForEvent must be manually invoked in proceeding code."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ForceCurrentAsymmetricLimit.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ForceCurrentAsymmetricLimit.html",
    "title": "Method ForceCurrentAsymmetricLimit | Semiconductor Test Library",
    "keywords": "Method ForceCurrentAsymmetricLimit Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ForceCurrentAsymmetricLimit(DCPowerSessionsBundle, double, double, double, double?, double?, bool) Behaves the same as the ForceCurrent() method, but has two voltage limit inputs for setting separate high and low voltage limits. public static void ForceCurrentAsymmetricLimit(this DCPowerSessionsBundle sessionsBundle, double currentLevel, double voltageLimitHigh, double voltageLimitLow, double? currentLevelRange = null, double? voltageLimitRange = null, bool waitForSourceCompletion = false) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. currentLevel double The current level to force. voltageLimitHigh double The voltage high limit to use. voltageLimitLow double The voltage low limit to use. currentLevelRange double? The current level range to use. voltageLimitRange double? The voltage limit range to use. waitForSourceCompletion bool Setting this to True will wait until sourcing is complete before continuing, which includes the set amount of source delay. Otherwise, the source delay amount is not directly accounted for by this method and the WaitForEvent must be manually invoked in proceeding code."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ForceVoltage.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ForceVoltage.html",
    "title": "Method ForceVoltage | Semiconductor Test Library",
    "keywords": "Method ForceVoltage Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ForceVoltage(DCPowerSessionsBundle, double, double?, double?, double?, bool) Forces voltage on the target pins at the specified level. Must at least provide a level value, and the method will assume all other properties that have been previously set. Optionally, can also provide a specific current limit, current limit range, voltage level range values directly. public static void ForceVoltage(this DCPowerSessionsBundle sessionsBundle, double voltageLevel, double? currentLimit = null, double? voltageLevelRange = null, double? currentLimitRange = null, bool waitForSourceCompletion = false) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. voltageLevel double The voltage level to force. currentLimit double? The current limit to use. voltageLevelRange double? The voltage level range to use. currentLimitRange double? The current limit range to use. waitForSourceCompletion bool Setting this to True will wait until sourcing is complete before continuing, which includes the set amount of source delay. Otherwise, the source delay amount is not directly accounted for by this method and the WaitForEvent must be manually invoked in proceeding code. ForceVoltage(DCPowerSessionsBundle, PinSiteData<double>, double?, double?, double?, bool) Forces voltage on the target pins at the specified level. Must at least provide a level value, and the method will assume all other properties that have been previously set. Optionally, can also provide a specific current limit, current limit range, voltage level range values directly. public static void ForceVoltage(this DCPowerSessionsBundle sessionsBundle, PinSiteData<double> voltageLevels, double? currentLimit = null, double? voltageLevelRange = null, double? currentLimitRange = null, bool waitForSourceCompletion = false) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. voltageLevels PinSiteData<double> The voltage levels to force for different site-pin pairs. currentLimit double? The current limit to use. voltageLevelRange double? The voltage level range to use. currentLimitRange double? The current limit range to use. waitForSourceCompletion bool Setting this to True will wait until sourcing is complete before continuing, which includes the set amount of source delay. Otherwise, the source delay amount is not directly accounted for by this method and the WaitForEvent must be manually invoked in proceeding code. ForceVoltage(DCPowerSessionsBundle, IDictionary<string, DCPowerSourceSettings>, bool) Forces voltage and specifies symmetric current limit. public static void ForceVoltage(this DCPowerSessionsBundle sessionsBundle, IDictionary<string, DCPowerSourceSettings> settings, bool waitForSourceCompletion = false) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. settings IDictionary<string, DCPowerSourceSettings> The per-pin settings to use. waitForSourceCompletion bool Setting this to True will wait until sourcing is complete before continuing, which includes the set amount of source delay. Otherwise, the source delay amount is not directly accounted for by this method and the WaitForEvent must be manually invoked in proceeding code."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ForceVoltageAsymmetricLimit.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.ForceVoltageAsymmetricLimit.html",
    "title": "Method ForceVoltageAsymmetricLimit | Semiconductor Test Library",
    "keywords": "Method ForceVoltageAsymmetricLimit Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ForceVoltageAsymmetricLimit(DCPowerSessionsBundle, double, double, double, double?, double?, bool) Behaves the same as the ForceVoltage() method, but as two current limit inputs for setting separate high and low current limits. public static void ForceVoltageAsymmetricLimit(this DCPowerSessionsBundle sessionsBundle, double voltageLevel, double currentLimitHigh, double currentLimitLow, double? voltageLevelRange = null, double? currentLimitRange = null, bool waitForSourceCompletion = false) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. voltageLevel double The voltage level to force. currentLimitHigh double The current high limit to use. currentLimitLow double The current low limit to use. voltageLevelRange double? The voltage level range to use. currentLimitRange double? The current limit range to use. waitForSourceCompletion bool Setting this to True will wait until sourcing is complete before continuing, which includes the set amount of source delay. Otherwise, the source delay amount is not directly accounted for by this method and the WaitForEvent must be manually invoked in proceeding code."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.GetCurrentLimits.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.GetCurrentLimits.html",
    "title": "Method GetCurrentLimits | Semiconductor Test Library",
    "keywords": "Method GetCurrentLimits Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll GetCurrentLimits(DCPowerSessionsBundle) Gets the current limits. public static PinSiteData<double> GetCurrentLimits(this DCPowerSessionsBundle sessionsBundle) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. Returns PinSiteData<double> The per-site per-pin current limits."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.GetSourceDelayInSeconds.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.GetSourceDelayInSeconds.html",
    "title": "Method GetSourceDelayInSeconds | Semiconductor Test Library",
    "keywords": "Method GetSourceDelayInSeconds Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll GetSourceDelayInSeconds(DCPowerSessionsBundle) Gets the source delay in seconds for each of the underlying device channel(s), per-pin and per-site. public static PinSiteData<double> GetSourceDelayInSeconds(this DCPowerSessionsBundle sessionsBundle) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. Returns PinSiteData<double> The source delay in seconds (PinSiteData<T>, where T is of type double)."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.PowerDown.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.PowerDown.html",
    "title": "Method PowerDown | Semiconductor Test Library",
    "keywords": "Method PowerDown Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll PowerDown(DCPowerSessionsBundle, double?) Powers down the channel. public static void PowerDown(this DCPowerSessionsBundle sessionsBundle, double? settlingTime = null) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. settlingTime double? The settling time. Null means no need to wait for the turn off operation to settle."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.Source.html",
    "title": "Class Source | Semiconductor Test Library",
    "keywords": "Class Source Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines methods for DCPower voltage/current sourcing. public static class Source Inheritance object Source Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CheckDCVoltageModeAndLevels(DCPowerSessionsBundle, out IEnumerable<string>, IDictionary<string, double>) Checks if the output function is set to DCVoltage and the level(s) are set to the expected values. ConfigureCurrentLimit(DCPowerOutput, double, double?) Configures the current limit. ConfigureCurrentLimit(DCPowerSessionsBundle, double, double?) Configures the current limit. ConfigureOutputConnected(DCPowerSessionsBundle, PinSiteData<bool>) Configures the output relay of the underlying device channel (s) to either be connected (closed) or disconnected (open). Accepts a scalar input of type bool. With overrides for SiteData<T>, and PinSiteData<T> input. Pass this method a true value to physically disconnect the output terminal from the front panel. Disconnect the output only if disconnecting is necessary for your application. For example, a battery connected to the output terminal might discharge unless the relay is disconnected. Excessive connecting and disconnecting of the output can cause premature wear on the relay. This property is not supported by all devices. Refer to the Supported Properties by Device topic in the NI-DCPower LabVIEW VI Reference and the document of your SMU model for information about supported devices. ConfigureOutputConnected(DCPowerSessionsBundle, SiteData<bool>) Configures the output relay of the underlying device channel (s) to either be connected (closed) or disconnected (open). Accepts a scalar input of type bool. With overrides for SiteData<T>, and PinSiteData<T> input. Pass this method a true value to physically disconnect the output terminal from the front panel. Disconnect the output only if disconnecting is necessary for your application. For example, a battery connected to the output terminal might discharge unless the relay is disconnected. Excessive connecting and disconnecting of the output can cause premature wear on the relay. This property is not supported by all devices. Refer to the Supported Properties by Device topic in the NI-DCPower LabVIEW VI Reference and the document of your SMU model for information about supported devices. ConfigureOutputConnected(DCPowerSessionsBundle, bool) Configures the output relay of the underlying device channel (s) to either be connected (closed) or disconnected (open). Accepts a scalar input of type bool. With overrides for SiteData<T>, and PinSiteData<T> input. Pass this method a true value to physically disconnect the output terminal from the front panel. Disconnect the output only if disconnecting is necessary for your application. For example, a battery connected to the output terminal might discharge unless the relay is disconnected. Excessive connecting and disconnecting of the output can cause premature wear on the relay. This property is not supported by all devices. Refer to the Supported Properties by Device topic in the NI-DCPower LabVIEW VI Reference and the document of your SMU model for information about supported devices. ConfigureOutputEnabled(DCPowerSessionsBundle, PinSiteData<bool>) Configures whether to enable (true) or disable (false) output generation on the underlying device channel(s). ConfigureOutputEnabled(DCPowerSessionsBundle, SiteData<bool>) Configures whether to enable (true) or disable (false) output generation on the underlying device channel(s). ConfigureOutputEnabled(DCPowerSessionsBundle, bool) Configures whether to enable (true) or disable (false) output generation on the underlying device channel(s). ConfigureSequence(DCPowerOutput, double[], int, double?) Configures a hardware-timed sequence of values. ConfigureSequence(DCPowerSessionsBundle, double[], int, double?) Configures a hardware-timed sequence of values. ConfigureSourceDelay(DCPowerSessionsBundle, PinSiteData<double>) Configures the source delay. With overrides for SiteData<T>, and PinSiteData<T> input. ConfigureSourceDelay(DCPowerSessionsBundle, SiteData<double>) Configures the source delay. With overrides for SiteData<T>, and PinSiteData<T> input. ConfigureSourceDelay(DCPowerSessionsBundle, double) Configures the source delay. With overrides for SiteData<T>, and PinSiteData<T> input. ConfigureSourceSettings(DCPowerSessionInformation, DCPowerSourceSettings, string) Configures DCPowerSourceSettings. ConfigureSourceSettings(DCPowerSessionsBundle, PinSiteData<DCPowerSourceSettings>) Configures one or more source settings based on values populated within a DCPowerSourceSettings object. Accepts a scalar input of type DCPowerSourceSettings. With overrides for SiteData<T>, and PinSiteData<T> input. ConfigureSourceSettings(DCPowerSessionsBundle, SiteData<DCPowerSourceSettings>) Configures one or more source settings based on values populated within a DCPowerSourceSettings object. Accepts a scalar input of type DCPowerSourceSettings. With overrides for SiteData<T>, and PinSiteData<T> input. ConfigureSourceSettings(DCPowerSessionsBundle, DCPowerSourceSettings) Configures one or more source settings based on values populated within a DCPowerSourceSettings object. Accepts a scalar input of type DCPowerSourceSettings. With overrides for SiteData<T>, and PinSiteData<T> input. ConfigureTransientResponse(NIDCPower, string, string, DCPowerSourceTransientResponse) Configures the transient response. ForceCurrent(DCPowerSessionsBundle, IDictionary<string, DCPowerSourceSettings>, bool) Forces current and specifies symmetric voltage limits. ForceCurrent(DCPowerSessionsBundle, double, double?, double?, double?, bool) Forces current on the target pins at the specified level. Must at least provide a level value, and the method will assume all other properties that have been previously set. Optionally, can also provide a specific voltage limit, current level range, voltage limit range values directly. ForceCurrentAsymmetricLimit(DCPowerSessionsBundle, double, double, double, double?, double?, bool) Behaves the same as the ForceCurrent() method, but has two voltage limit inputs for setting separate high and low voltage limits. ForceVoltage(DCPowerSessionsBundle, PinSiteData<double>, double?, double?, double?, bool) Forces voltage on the target pins at the specified level. Must at least provide a level value, and the method will assume all other properties that have been previously set. Optionally, can also provide a specific current limit, current limit range, voltage level range values directly. ForceVoltage(DCPowerSessionsBundle, IDictionary<string, DCPowerSourceSettings>, bool) Forces voltage and specifies symmetric current limit. ForceVoltage(DCPowerSessionsBundle, double, double?, double?, double?, bool) Forces voltage on the target pins at the specified level. Must at least provide a level value, and the method will assume all other properties that have been previously set. Optionally, can also provide a specific current limit, current limit range, voltage level range values directly. ForceVoltageAsymmetricLimit(DCPowerSessionsBundle, double, double, double, double?, double?, bool) Behaves the same as the ForceVoltage() method, but as two current limit inputs for setting separate high and low current limits. GetCurrentLimits(DCPowerSessionsBundle) Gets the current limits. GetSourceDelayInSeconds(DCPowerSessionsBundle) Gets the source delay in seconds for each of the underlying device channel(s), per-pin and per-site. PowerDown(DCPowerSessionsBundle, double?) Powers down the channel."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggerType.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggerType.html",
    "title": "Enum TriggerType | Semiconductor Test Library",
    "keywords": "Enum TriggerType Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines DCPower trigger type. public enum TriggerType Fields MeasureTrigger = 0 The measure trigger. PulseTrigger = 1 The pulse trigger. SequenceAdvanceTrigger = 2 The sequence advance trigger. SourceTrigger = 3 The source trigger. StartTrigger = 4 The start trigger."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ClearTriggers.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ClearTriggers.html",
    "title": "Method ClearTriggers | Semiconductor Test Library",
    "keywords": "Method ClearTriggers Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ClearTriggers(DCPowerSessionsBundle) Clears all trigger types. public static void ClearTriggers(this DCPowerSessionsBundle sessionsBundle) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureMeasureTriggerDigitalEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureMeasureTriggerDigitalEdge.html",
    "title": "Method ConfigureMeasureTriggerDigitalEdge | Semiconductor Test Library",
    "keywords": "Method ConfigureMeasureTriggerDigitalEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureMeasureTriggerDigitalEdge(DCPowerSessionInformation, string, string, DCPowerTriggerEdge, string) Configures a digital edge trigger for the MeasureTrigger. public static void ConfigureMeasureTriggerDigitalEdge(this DCPowerSessionInformation sessionInfo, string tiggerTerminal, string modelString, DCPowerTriggerEdge triggerEdge = DCPowerTriggerEdge.Rising, string channelString = \"\") Parameters sessionInfo DCPowerSessionInformation The DCPowerSessionInformation object. tiggerTerminal string The input terminal to configure the trigger to look for a Digital Edge. This is the fully qualified terminal string, which should be in the form of \"/Dev1/PXI_Trig0\" , where Dev1 is the instrument generating the trigger and PXI_Trig0 is the trigger line the trigger is being sent on. Note that the input terminal can also be a terminal from another instrument or channel. For example, you can set the input terminal on Dev1 to be /Dev2/Engine0/SourceCompleteEvent, where Engine0 is channel 0. modelString string The model string of the associated instrument. triggerEdge DCPowerTriggerEdge The digital edge to look for, either NationalInstruments.ModularInstruments.NIDCPower.DCPowerTriggerEdge.Rising or NationalInstruments.ModularInstruments.NIDCPower.DCPowerTriggerEdge.Falling. channelString string The channel string containing one or more instrument channels. For Example: \"SMU_4147_C2_16/0\", or \"SMU_4147_C2_16/3, SMU_4137_C2_17/0\". Remarks This method does not abort the underlying driver session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureMeasureTriggerSoftwareEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureMeasureTriggerSoftwareEdge.html",
    "title": "Method ConfigureMeasureTriggerSoftwareEdge | Semiconductor Test Library",
    "keywords": "Method ConfigureMeasureTriggerSoftwareEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureMeasureTriggerSoftwareEdge(DCPowerSessionInformation, string, string) Configures a software edge trigger for the MeasureTrigger. public static void ConfigureMeasureTriggerSoftwareEdge(this DCPowerSessionInformation sessionInfo, string modelString, string channelString = \"\") Parameters sessionInfo DCPowerSessionInformation The DCPowerSessionInformation object. modelString string The model string of the associated instrument. channelString string The channel string containing one or more instrument channels. For Example: \"SMU_4147_C2_16/0\", or \"SMU_4147_C2_16/3, SMU_4137_C2_17/0\". Remarks This method does not abort the underlying driver session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigurePulseTriggerDigitalEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigurePulseTriggerDigitalEdge.html",
    "title": "Method ConfigurePulseTriggerDigitalEdge | Semiconductor Test Library",
    "keywords": "Method ConfigurePulseTriggerDigitalEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigurePulseTriggerDigitalEdge(DCPowerSessionInformation, string, string, DCPowerTriggerEdge, string) Configures a digital edge trigger for the PulseTrigger. public static void ConfigurePulseTriggerDigitalEdge(this DCPowerSessionInformation sessionInfo, string tiggerTerminal, string modelString, DCPowerTriggerEdge triggerEdge = DCPowerTriggerEdge.Rising, string channelString = \"\") Parameters sessionInfo DCPowerSessionInformation The DCPowerSessionInformation object. tiggerTerminal string The input terminal to configure the trigger to look for a Digital Edge. This is the fully qualified terminal string, which should be in the form of \"/Dev1/PXI_Trig0\" , where Dev1 is the instrument generating the trigger and PXI_Trig0 is the trigger line the trigger is being sent on. Note that the input terminal can also be a terminal from another instrument or channel. For example, you can set the input terminal on Dev1 to be /Dev2/Engine0/SourceCompleteEvent, where Engine0 is channel 0. modelString string The model string of the associated instrument. triggerEdge DCPowerTriggerEdge The digital edge to look for, either NationalInstruments.ModularInstruments.NIDCPower.DCPowerTriggerEdge.Rising or NationalInstruments.ModularInstruments.NIDCPower.DCPowerTriggerEdge.Falling. channelString string The channel string containing one or more instrument channels. For Example: \"SMU_4147_C2_16/0\", or \"SMU_4147_C2_16/3, SMU_4137_C2_17/0\". Remarks This method does not abort the underlying driver session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigurePulseTriggerDisable.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigurePulseTriggerDisable.html",
    "title": "Method ConfigurePulseTriggerDisable | Semiconductor Test Library",
    "keywords": "Method ConfigurePulseTriggerDisable Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigurePulseTriggerDisable(DCPowerSessionInformation, string, string) Disables the PulseTrigger. public static void ConfigurePulseTriggerDisable(this DCPowerSessionInformation sessionInfo, string modelString, string channelString = \"\") Parameters sessionInfo DCPowerSessionInformation The DCPowerSessionInformation object. modelString string The model string of the associated instrument. channelString string The channel string containing one or more instrument channels. For Example: \"SMU_4147_C2_16/0\", or \"SMU_4147_C2_16/3, SMU_4137_C2_17/0\". Remarks This method does not abort the underlying driver session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigurePulseTriggerSoftwareEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigurePulseTriggerSoftwareEdge.html",
    "title": "Method ConfigurePulseTriggerSoftwareEdge | Semiconductor Test Library",
    "keywords": "Method ConfigurePulseTriggerSoftwareEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigurePulseTriggerSoftwareEdge(DCPowerSessionInformation, string, string) Configures a software edge trigger for the PulseTrigger. public static void ConfigurePulseTriggerSoftwareEdge(this DCPowerSessionInformation sessionInfo, string modelString, string channelString = \"\") Parameters sessionInfo DCPowerSessionInformation The DCPowerSessionInformation object. modelString string The model string of the associated instrument. channelString string The channel string containing one or more instrument channels. For Example: \"SMU_4147_C2_16/0\", or \"SMU_4147_C2_16/3, SMU_4137_C2_17/0\". Remarks This method does not abort the underlying driver session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureSequenceAdvanceTriggerDigitalEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureSequenceAdvanceTriggerDigitalEdge.html",
    "title": "Method ConfigureSequenceAdvanceTriggerDigitalEdge | Semiconductor Test Library",
    "keywords": "Method ConfigureSequenceAdvanceTriggerDigitalEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureSequenceAdvanceTriggerDigitalEdge(DCPowerSessionInformation, string, string, DCPowerTriggerEdge, string) Configures a digital edge trigger for the SequenceAdvanceTrigger. public static void ConfigureSequenceAdvanceTriggerDigitalEdge(this DCPowerSessionInformation sessionInfo, string tiggerTerminal, string modelString, DCPowerTriggerEdge triggerEdge = DCPowerTriggerEdge.Rising, string channelString = \"\") Parameters sessionInfo DCPowerSessionInformation The DCPowerSessionInformation object. tiggerTerminal string The input terminal to configure the trigger to look for a Digital Edge. This is the fully qualified terminal string, which should be in the form of \"/Dev1/PXI_Trig0\" , where Dev1 is the instrument generating the trigger and PXI_Trig0 is the trigger line the trigger is being sent on. Note that the input terminal can also be a terminal from another instrument or channel. For example, you can set the input terminal on Dev1 to be /Dev2/Engine0/SourceCompleteEvent, where Engine0 is channel 0. modelString string The model string of the associated instrument. triggerEdge DCPowerTriggerEdge The digital edge to look for, either NationalInstruments.ModularInstruments.NIDCPower.DCPowerTriggerEdge.Rising or NationalInstruments.ModularInstruments.NIDCPower.DCPowerTriggerEdge.Falling. channelString string The channel string containing one or more instrument channels. For Example: \"SMU_4147_C2_16/0\", or \"SMU_4147_C2_16/3, SMU_4137_C2_17/0\". Remarks This method does not abort the underlying driver session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureSequenceAdvanceTriggerDisable.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureSequenceAdvanceTriggerDisable.html",
    "title": "Method ConfigureSequenceAdvanceTriggerDisable | Semiconductor Test Library",
    "keywords": "Method ConfigureSequenceAdvanceTriggerDisable Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureSequenceAdvanceTriggerDisable(DCPowerSessionInformation, string, string) Disables the SequenceAdvanceTrigger. public static void ConfigureSequenceAdvanceTriggerDisable(this DCPowerSessionInformation sessionInfo, string modelString, string channelString = \"\") Parameters sessionInfo DCPowerSessionInformation The DCPowerSessionInformation object. modelString string The model string of the associated instrument. channelString string The channel string containing one or more instrument channels. For Example: \"SMU_4147_C2_16/0\", or \"SMU_4147_C2_16/3, SMU_4137_C2_17/0\". Remarks This method does not abort the underlying driver session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureSequenceAdvanceTriggerSoftwareEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureSequenceAdvanceTriggerSoftwareEdge.html",
    "title": "Method ConfigureSequenceAdvanceTriggerSoftwareEdge | Semiconductor Test Library",
    "keywords": "Method ConfigureSequenceAdvanceTriggerSoftwareEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureSequenceAdvanceTriggerSoftwareEdge(DCPowerSessionInformation, string, string) Configures a software edge trigger for the SequenceAdvanceTrigger. public static void ConfigureSequenceAdvanceTriggerSoftwareEdge(this DCPowerSessionInformation sessionInfo, string modelString, string channelString = \"\") Parameters sessionInfo DCPowerSessionInformation The DCPowerSessionInformation object. modelString string The model string of the associated instrument. channelString string The channel string containing one or more instrument channels. For Example: \"SMU_4147_C2_16/0\", or \"SMU_4147_C2_16/3, SMU_4137_C2_17/0\". Remarks This method does not abort the underlying driver session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureSourceTriggerDigitalEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureSourceTriggerDigitalEdge.html",
    "title": "Method ConfigureSourceTriggerDigitalEdge | Semiconductor Test Library",
    "keywords": "Method ConfigureSourceTriggerDigitalEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureSourceTriggerDigitalEdge(DCPowerSessionInformation, string, string, DCPowerTriggerEdge, string) Configures a digital edge trigger for the SourceTrigger. public static void ConfigureSourceTriggerDigitalEdge(this DCPowerSessionInformation sessionInfo, string tiggerTerminal, string modelString, DCPowerTriggerEdge triggerEdge = DCPowerTriggerEdge.Rising, string channelString = \"\") Parameters sessionInfo DCPowerSessionInformation The DCPowerSessionInformation object. tiggerTerminal string The input terminal to configure the trigger to look for a Digital Edge. This is the fully qualified terminal string, which should be in the form of \"/Dev1/PXI_Trig0\" , where Dev1 is the instrument generating the trigger and PXI_Trig0 is the trigger line the trigger is being sent on. Note that the input terminal can also be a terminal from another instrument or channel. For example, you can set the input terminal on Dev1 to be /Dev2/Engine0/SourceCompleteEvent, where Engine0 is channel 0. modelString string The model string of the associated instrument. triggerEdge DCPowerTriggerEdge The digital edge to look for, either NationalInstruments.ModularInstruments.NIDCPower.DCPowerTriggerEdge.Rising or NationalInstruments.ModularInstruments.NIDCPower.DCPowerTriggerEdge.Falling. channelString string The channel string containing one or more instrument channels. For Example: \"SMU_4147_C2_16/0\", or \"SMU_4147_C2_16/3, SMU_4137_C2_17/0\". Remarks This method does not abort the underlying driver session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureSourceTriggerDisable.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureSourceTriggerDisable.html",
    "title": "Method ConfigureSourceTriggerDisable | Semiconductor Test Library",
    "keywords": "Method ConfigureSourceTriggerDisable Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureSourceTriggerDisable(DCPowerSessionInformation, string, string) Disables the SourceTrigger. public static void ConfigureSourceTriggerDisable(this DCPowerSessionInformation sessionInfo, string modelString, string channelString = \"\") Parameters sessionInfo DCPowerSessionInformation The DCPowerSessionInformation object. modelString string The model string of the associated instrument. channelString string The channel string containing one or more instrument channels. For Example: \"SMU_4147_C2_16/0\", or \"SMU_4147_C2_16/3, SMU_4137_C2_17/0\". Remarks This method does not abort the underlying driver session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureSourceTriggerSoftwareEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureSourceTriggerSoftwareEdge.html",
    "title": "Method ConfigureSourceTriggerSoftwareEdge | Semiconductor Test Library",
    "keywords": "Method ConfigureSourceTriggerSoftwareEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureSourceTriggerSoftwareEdge(DCPowerSessionInformation, string, string) Configures a software edge trigger for the SourceTrigger. public static void ConfigureSourceTriggerSoftwareEdge(this DCPowerSessionInformation sessionInfo, string modelString, string channelString = \"\") Parameters sessionInfo DCPowerSessionInformation The DCPowerSessionInformation object. modelString string The model string of the associated instrument. channelString string The channel string containing one or more instrument channels. For Example: \"SMU_4147_C2_16/0\", or \"SMU_4147_C2_16/3, SMU_4137_C2_17/0\". Remarks This method does not abort the underlying driver session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureStartTriggerDigitalEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureStartTriggerDigitalEdge.html",
    "title": "Method ConfigureStartTriggerDigitalEdge | Semiconductor Test Library",
    "keywords": "Method ConfigureStartTriggerDigitalEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureStartTriggerDigitalEdge(DCPowerSessionInformation, string, string, DCPowerTriggerEdge, string) Configures a digital edge trigger for the StartTrigger. public static void ConfigureStartTriggerDigitalEdge(this DCPowerSessionInformation sessionInfo, string tiggerTerminal, string modelString, DCPowerTriggerEdge triggerEdge = DCPowerTriggerEdge.Rising, string channelString = \"\") Parameters sessionInfo DCPowerSessionInformation The DCPowerSessionInformation object. tiggerTerminal string The input terminal to configure the trigger to look for a Digital Edge. This is the fully qualified terminal string, which should be in the form of \"/Dev1/PXI_Trig0\" , where Dev1 is the instrument generating the trigger and PXI_Trig0 is the trigger line the trigger is being sent on. Note that the input terminal can also be a terminal from another instrument or channel. For example, you can set the input terminal on Dev1 to be /Dev2/Engine0/SourceCompleteEvent, where Engine0 is channel 0. modelString string The model string of the associated instrument. triggerEdge DCPowerTriggerEdge The digital edge to look for, either NationalInstruments.ModularInstruments.NIDCPower.DCPowerTriggerEdge.Rising or NationalInstruments.ModularInstruments.NIDCPower.DCPowerTriggerEdge.Falling. channelString string The channel string containing one or more instrument channels. For Example: \"SMU_4147_C2_16/0\", or \"SMU_4147_C2_16/3, SMU_4137_C2_17/0\". Remarks This method does not abort the underlying driver session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureStartTriggerDisable.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureStartTriggerDisable.html",
    "title": "Method ConfigureStartTriggerDisable | Semiconductor Test Library",
    "keywords": "Method ConfigureStartTriggerDisable Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureStartTriggerDisable(DCPowerSessionInformation, string, string) Disables the StartTrigger. public static void ConfigureStartTriggerDisable(this DCPowerSessionInformation sessionInfo, string modelString, string channelString = \"\") Parameters sessionInfo DCPowerSessionInformation The DCPowerSessionInformation object. modelString string The model string of the associated instrument. channelString string The channel string containing one or more instrument channels. For Example: \"SMU_4147_C2_16/0\", or \"SMU_4147_C2_16/3, SMU_4137_C2_17/0\". Remarks This method does not abort the underlying driver session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureStartTriggerSoftwareEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureStartTriggerSoftwareEdge.html",
    "title": "Method ConfigureStartTriggerSoftwareEdge | Semiconductor Test Library",
    "keywords": "Method ConfigureStartTriggerSoftwareEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureStartTriggerSoftwareEdge(DCPowerSessionInformation, string, string) Configures a software edge trigger for the StartTrigger. public static void ConfigureStartTriggerSoftwareEdge(this DCPowerSessionInformation sessionInfo, string modelString, string channelString = \"\") Parameters sessionInfo DCPowerSessionInformation The DCPowerSessionInformation object. modelString string The model string of the associated instrument. channelString string The channel string containing one or more instrument channels. For Example: \"SMU_4147_C2_16/0\", or \"SMU_4147_C2_16/3, SMU_4137_C2_17/0\". Remarks This method does not abort the underlying driver session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureTriggerDigitalEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureTriggerDigitalEdge.html",
    "title": "Method ConfigureTriggerDigitalEdge | Semiconductor Test Library",
    "keywords": "Method ConfigureTriggerDigitalEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureTriggerDigitalEdge(DCPowerSessionsBundle, TriggerType, string, DCPowerTriggerEdge) Configures a digital edge trigger for the selected TriggerType: MeasureTrigger, PulseTrigger, SequenceAdvanceTrigger, SourceTrigger, and StartTrigger. public static void ConfigureTriggerDigitalEdge(this DCPowerSessionsBundle sessionsBundle, TriggerType triggerType, string tiggerTerminal, DCPowerTriggerEdge triggerEdge = DCPowerTriggerEdge.Rising) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. triggerType TriggerType Type of trigger, either MeasureTrigger, PulseTrigger, SequenceAdvanceTrigger, SourceTrigger, StartTrigger. tiggerTerminal string The input terminal to configure the trigger to look for a Digital Edge. This is the fully qualified terminal string, which should be in the form of \"/Dev1/PXI_Trig0\" , where Dev1 is the instrument generating the trigger and PXI_Trig0 is the trigger line the trigger is being sent on. Note that the input terminal can also be a terminal from another instrument or channel. For example, you can set the input terminal on Dev1 to be /Dev2/Engine0/SourceCompleteEvent, where Engine0 is channel 0. triggerEdge DCPowerTriggerEdge The digital edge to look for, either NationalInstruments.ModularInstruments.NIDCPower.DCPowerTriggerEdge.Rising or NationalInstruments.ModularInstruments.NIDCPower.DCPowerTriggerEdge.Falling."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureTriggerSoftwareEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ConfigureTriggerSoftwareEdge.html",
    "title": "Method ConfigureTriggerSoftwareEdge | Semiconductor Test Library",
    "keywords": "Method ConfigureTriggerSoftwareEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureTriggerSoftwareEdge(DCPowerSessionsBundle, TriggerType) Configures a software edge trigger for the selected TriggerType: MeasureTrigger, PulseTrigger, SequenceAdvanceTrigger, SourceTrigger, and StartTrigger. public static void ConfigureTriggerSoftwareEdge(this DCPowerSessionsBundle sessionsBundle, TriggerType triggerType) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. triggerType TriggerType Type of trigger, either MeasureTrigger, PulseTrigger, SequenceAdvanceTrigger, SourceTrigger, or StartTrigger."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.DisableTriggers.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.DisableTriggers.html",
    "title": "Method DisableTriggers | Semiconductor Test Library",
    "keywords": "Method DisableTriggers Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll DisableTriggers(DCPowerSessionsBundle) Disables all triggers by configuring them to None: PulseTrigger, SequenceAdvanceTrigger, SourceTrigger, and StartTrigger. Note that MeasureTrigger is not supported. It does not need to be disabled. public static void DisableTriggers(this DCPowerSessionsBundle sessionsBundle) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ExportSignal.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.ExportSignal.html",
    "title": "Method ExportSignal | Semiconductor Test Library",
    "keywords": "Method ExportSignal Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ExportSignal(DCPowerSessionsBundle, DCPowerSignalSource, string) Exports the selected DCPowerSignalSource to the target output terminal. public static void ExportSignal(this DCPowerSessionsBundle sessionsBundle, DCPowerSignalSource signalSource, string outputTerminal) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. signalSource DCPowerSignalSource The signal source to export. outputTerminal string The output terminal the signal routes to."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.SendSoftwareEdgeTrigger.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.SendSoftwareEdgeTrigger.html",
    "title": "Method SendSoftwareEdgeTrigger | Semiconductor Test Library",
    "keywords": "Method SendSoftwareEdgeTrigger Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll SendSoftwareEdgeTrigger(DCPowerSessionsBundle, TriggerType) Sends a software trigger as the selected TriggerType. public static void SendSoftwareEdgeTrigger(this DCPowerSessionsBundle sessionsBundle, TriggerType triggerType) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. triggerType TriggerType The type of the trigger."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.WaitForEvent.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.WaitForEvent.html",
    "title": "Method WaitForEvent | Semiconductor Test Library",
    "keywords": "Method WaitForEvent Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll WaitForEvent(DCPowerSessionsBundle, EventType, double) Waits for the selected EventType to occur. public static void WaitForEvent(this DCPowerSessionsBundle sessionsBundle, EventType eventType, double timeout = 5) Parameters sessionsBundle DCPowerSessionsBundle The DCPowerSessionsBundle object. eventType EventType The type of event to wait for. timeout double The maximum time to wait. Default is 5 seconds."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.TriggersAndEvents.html",
    "title": "Class TriggersAndEvents | Semiconductor Test Library",
    "keywords": "Class TriggersAndEvents Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines methods for DCPower triggers and events. public static class TriggersAndEvents Inheritance object TriggersAndEvents Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ClearTriggers(DCPowerSessionsBundle) Clears all trigger types. ConfigureMeasureTriggerDigitalEdge(DCPowerSessionInformation, string, string, DCPowerTriggerEdge, string) Configures a digital edge trigger for the MeasureTrigger. ConfigureMeasureTriggerSoftwareEdge(DCPowerSessionInformation, string, string) Configures a software edge trigger for the MeasureTrigger. ConfigurePulseTriggerDigitalEdge(DCPowerSessionInformation, string, string, DCPowerTriggerEdge, string) Configures a digital edge trigger for the PulseTrigger. ConfigurePulseTriggerDisable(DCPowerSessionInformation, string, string) Disables the PulseTrigger. ConfigurePulseTriggerSoftwareEdge(DCPowerSessionInformation, string, string) Configures a software edge trigger for the PulseTrigger. ConfigureSequenceAdvanceTriggerDigitalEdge(DCPowerSessionInformation, string, string, DCPowerTriggerEdge, string) Configures a digital edge trigger for the SequenceAdvanceTrigger. ConfigureSequenceAdvanceTriggerDisable(DCPowerSessionInformation, string, string) Disables the SequenceAdvanceTrigger. ConfigureSequenceAdvanceTriggerSoftwareEdge(DCPowerSessionInformation, string, string) Configures a software edge trigger for the SequenceAdvanceTrigger. ConfigureSourceTriggerDigitalEdge(DCPowerSessionInformation, string, string, DCPowerTriggerEdge, string) Configures a digital edge trigger for the SourceTrigger. ConfigureSourceTriggerDisable(DCPowerSessionInformation, string, string) Disables the SourceTrigger. ConfigureSourceTriggerSoftwareEdge(DCPowerSessionInformation, string, string) Configures a software edge trigger for the SourceTrigger. ConfigureStartTriggerDigitalEdge(DCPowerSessionInformation, string, string, DCPowerTriggerEdge, string) Configures a digital edge trigger for the StartTrigger. ConfigureStartTriggerDisable(DCPowerSessionInformation, string, string) Disables the StartTrigger. ConfigureStartTriggerSoftwareEdge(DCPowerSessionInformation, string, string) Configures a software edge trigger for the StartTrigger. ConfigureTriggerDigitalEdge(DCPowerSessionsBundle, TriggerType, string, DCPowerTriggerEdge) Configures a digital edge trigger for the selected TriggerType: MeasureTrigger, PulseTrigger, SequenceAdvanceTrigger, SourceTrigger, and StartTrigger. ConfigureTriggerSoftwareEdge(DCPowerSessionsBundle, TriggerType) Configures a software edge trigger for the selected TriggerType: MeasureTrigger, PulseTrigger, SequenceAdvanceTrigger, SourceTrigger, and StartTrigger. DisableTriggers(DCPowerSessionsBundle) Disables all triggers by configuring them to None: PulseTrigger, SequenceAdvanceTrigger, SourceTrigger, and StartTrigger. Note that MeasureTrigger is not supported. It does not need to be disabled. ExportSignal(DCPowerSessionsBundle, DCPowerSignalSource, string) Exports the selected DCPowerSignalSource to the target output terminal. SendSoftwareEdgeTrigger(DCPowerSessionsBundle, TriggerType) Sends a software trigger as the selected TriggerType. WaitForEvent(DCPowerSessionsBundle, EventType, double) Waits for the selected EventType to occur."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower.html",
    "title": "Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower | Semiconductor Test Library",
    "keywords": "Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower Classes Control Defines methods for controlling the NI-DCPower session. DCPowerMeasureSettings Defines DCPower measure settings. DCPowerSessionInformation Defines an object that contains an individual NationalInstruments.ModularInstruments.NIDCPower.NIDCPower session and its related information. DCPowerSessionsBundle Defines an object that contains one or more DCPowerSessionInformation objects. DCPowerSettings Defines DCPower settings. DCPowerSourceSettings Defines DCPower source settings. DCPowerWaveformAcquisitionSettings Defines DCPower waveform acquisition settings. DCPowerWaveformResults Defines DCPower waveform results. InitializeAndClose Defines NationalInstruments.ModularInstruments.NIDCPower.NIDCPower sessions initialize and close APIs. Measure Defines methods for DCPower measurements. Source Defines methods for DCPower voltage/current sourcing. TriggersAndEvents Defines methods for DCPower triggers and events. Structs DCPowerModelStrings Defines DCPower model strings according to the driver definition below. https://dev.azure.com/ni/DevCentral/_git/ni-central?path=/src/nidcpower/base/nidcpowerSharedSource/source/nidcpowerSharedSource/productid/ProductID.h SingleDCPowerFetchResult Structure that defines the result of a single fetch operation. Enums EventType Defines DCPower event type. TriggerType Defines DCPower trigger type."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionInformation.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionInformation.-ctor.html",
    "title": "Constructor DMMSessionInformation | Semiconductor Test Library",
    "keywords": "Constructor DMMSessionInformation Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll DMMSessionInformation(NIDmm) Constructs a session information object that associates with a NationalInstruments.ModularInstruments.NIDmm.NIDmm instrument session. public DMMSessionInformation(NIDmm session) Parameters session NIDmm The NationalInstruments.ModularInstruments.NIDmm.NIDmm session. DMMSessionInformation(NIDmm, IList<SitePinInfo>) Constructs a session information object. public DMMSessionInformation(NIDmm session, IList<SitePinInfo> associatedSitePinList) Parameters session NIDmm The NationalInstruments.ModularInstruments.NIDmm.NIDmm session. associatedSitePinList IList<SitePinInfo> The specified subset of channels associated with the session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionInformation.AssociatedSitePinList.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionInformation.AssociatedSitePinList.html",
    "title": "Property AssociatedSitePinList | Semiconductor Test Library",
    "keywords": "Property AssociatedSitePinList Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AssociatedSitePinList Gets a list of SitePinInfo objects containing information for the individual site-pin pairs associated with the driver session. public IList<SitePinInfo> AssociatedSitePinList { get; } Property Value IList<SitePinInfo>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionInformation.GenerateResourceDescriptorToSitePinDictionary.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionInformation.GenerateResourceDescriptorToSitePinDictionary.html",
    "title": "Method GenerateResourceDescriptorToSitePinDictionary | Semiconductor Test Library",
    "keywords": "Method GenerateResourceDescriptorToSitePinDictionary Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll GenerateResourceDescriptorToSitePinDictionary(ISemiconductorModuleContext) Generates a dictionary that takes a resource descriptor and returns the associated site-pin pair information. public static void GenerateResourceDescriptorToSitePinDictionary(ISemiconductorModuleContext tsmContext) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionInformation.Session.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionInformation.Session.html",
    "title": "Property Session | Semiconductor Test Library",
    "keywords": "Property Session Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Session The NationalInstruments.ModularInstruments.NIDmm.NIDmm session. public NIDmm Session { get; } Property Value NIDmm"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionInformation.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionInformation.html",
    "title": "Class DMMSessionInformation | Semiconductor Test Library",
    "keywords": "Class DMMSessionInformation Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an object that contains an individual NationalInstruments.ModularInstruments.NIDmm.NIDmm session and its related information. public class DMMSessionInformation : ISessionInformation Inheritance object DMMSessionInformation Implements ISessionInformation Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DMMSessionInformation(NIDmm) Constructs a session information object that associates with a NationalInstruments.ModularInstruments.NIDmm.NIDmm instrument session. DMMSessionInformation(NIDmm, IList<SitePinInfo>) Constructs a session information object. Properties AssociatedSitePinList Gets a list of SitePinInfo objects containing information for the individual site-pin pairs associated with the driver session. Session The NationalInstruments.ModularInstruments.NIDmm.NIDmm session. Methods GenerateResourceDescriptorToSitePinDictionary(ISemiconductorModuleContext) Generates a dictionary that takes a resource descriptor and returns the associated site-pin pair information."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionsBundle.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionsBundle.-ctor.html",
    "title": "Constructor DMMSessionsBundle | Semiconductor Test Library",
    "keywords": "Constructor DMMSessionsBundle Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll DMMSessionsBundle(ISemiconductorModuleContext, IEnumerable<DMMSessionInformation>) Constructs a sessions bundle object that represents a bunch of DMMSessionInformations. public DMMSessionsBundle(ISemiconductorModuleContext tsmContext, IEnumerable<DMMSessionInformation> allSessionInfo) Parameters tsmContext ISemiconductorModuleContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. allSessionInfo IEnumerable<DMMSessionInformation> An enumerable of DMMSessionInformations."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionsBundle.AggregateSitePinList.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionsBundle.AggregateSitePinList.html",
    "title": "Property AggregateSitePinList | Semiconductor Test Library",
    "keywords": "Property AggregateSitePinList Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AggregateSitePinList An aggregated list of SitePinInfo objects containing information for all of the individual site-pin pairs associated with each of the session information objects within the bundle. public IList<SitePinInfo> AggregateSitePinList { get; } Property Value IList<SitePinInfo>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionsBundle.FilterByPin.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionsBundle.FilterByPin.html",
    "title": "Method FilterByPin | Semiconductor Test Library",
    "keywords": "Method FilterByPin Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll FilterByPin(string) Filter current DMMSessionsBundle and returns a new one with the requested pin. public DMMSessionsBundle FilterByPin(string requestedPin) Parameters requestedPin string The requested pin. Returns DMMSessionsBundle A new DMMSessionsBundle object with the requested pin. FilterByPin(string[]) Filters current DMMSessionsBundle and returns a new one with requested pins. public DMMSessionsBundle FilterByPin(string[] requestedPins) Parameters requestedPins string[] The requested pins. Returns DMMSessionsBundle A new DMMSessionsBundle object with requested pins."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionsBundle.FilterBySite.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionsBundle.FilterBySite.html",
    "title": "Method FilterBySite | Semiconductor Test Library",
    "keywords": "Method FilterBySite Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll FilterBySite(int) Filters current DMMSessionsBundle and returns a new one with the requested site. public DMMSessionsBundle FilterBySite(int requestedSite) Parameters requestedSite int The requested site. Returns DMMSessionsBundle A new DMMSessionsBundle object with the requested site. FilterBySite(int[]) Filters current DMMSessionsBundle and returns a new one with requested sites. public DMMSessionsBundle FilterBySite(int[] requestedSites) Parameters requestedSites int[] The requested sites. Returns DMMSessionsBundle A new DMMSessionsBundle object with requested sites."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionsBundle.InstrumentSessions.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionsBundle.InstrumentSessions.html",
    "title": "Property InstrumentSessions | Semiconductor Test Library",
    "keywords": "Property InstrumentSessions Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll InstrumentSessions An enumerable of ISessionInformation. public IEnumerable<DMMSessionInformation> InstrumentSessions { get; } Property Value IEnumerable<DMMSessionInformation>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionsBundle.TSMContext.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionsBundle.TSMContext.html",
    "title": "Property TSMContext | Semiconductor Test Library",
    "keywords": "Property TSMContext Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll TSMContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. public ISemiconductorModuleContext TSMContext { get; } Property Value ISemiconductorModuleContext"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionsBundle.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.DMMSessionsBundle.html",
    "title": "Class DMMSessionsBundle | Semiconductor Test Library",
    "keywords": "Class DMMSessionsBundle Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an object that contains one or more DMMSessionInformation objects. public class DMMSessionsBundle : ISessionsBundle<DMMSessionInformation> Inheritance object DMMSessionsBundle Implements ISessionsBundle<DMMSessionInformation> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool[]>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double[]>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<double[], double[]>>, string, string) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult>) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1, TResult2>>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, int, TResult[]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[,]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1[], TResult2[]>>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, SitePinInfo>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int, SitePinInfo>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation>) Publish.PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[], string) Publish.PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[][], string) Constructors DMMSessionsBundle(ISemiconductorModuleContext, IEnumerable<DMMSessionInformation>) Constructs a sessions bundle object that represents a bunch of DMMSessionInformations. Properties AggregateSitePinList An aggregated list of SitePinInfo objects containing information for all of the individual site-pin pairs associated with each of the session information objects within the bundle. InstrumentSessions An enumerable of ISessionInformation. TSMContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. Methods FilterByPin(string) Filter current DMMSessionsBundle and returns a new one with the requested pin. FilterByPin(string[]) Filters current DMMSessionsBundle and returns a new one with requested pins. FilterBySite(int) Filters current DMMSessionsBundle and returns a new one with the requested site. FilterBySite(int[]) Filters current DMMSessionsBundle and returns a new one with requested sites."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.InitializeAndClose.Close.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.InitializeAndClose.Close.html",
    "title": "Method Close | Semiconductor Test Library",
    "keywords": "Method Close Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Close(ISemiconductorModuleContext, bool) Closes all NationalInstruments.ModularInstruments.NIDmm.NIDmm sessions. public static void Close(ISemiconductorModuleContext tsmContext, bool resetDevice = true) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to reset the device sessions before closing."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.InitializeAndClose.Initialize.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.InitializeAndClose.Initialize.html",
    "title": "Method Initialize | Semiconductor Test Library",
    "keywords": "Method Initialize Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Initialize(ISemiconductorModuleContext, bool) Initializes NationalInstruments.ModularInstruments.NIDmm.NIDmm sessions in the test system. public static void Initialize(ISemiconductorModuleContext tsmContext, bool resetDevice = false) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to reset device during initialization."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.InitializeAndClose.Reset.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.InitializeAndClose.Reset.html",
    "title": "Method Reset | Semiconductor Test Library",
    "keywords": "Method Reset Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Reset(ISemiconductorModuleContext) Resets all NationalInstruments.ModularInstruments.NIDmm.NIDmm sessions. public static void Reset(ISemiconductorModuleContext tsmContext) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.InitializeAndClose.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.InitializeAndClose.html",
    "title": "Class InitializeAndClose | Semiconductor Test Library",
    "keywords": "Class InitializeAndClose Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines NIDMM sessions initialize and close APIs. public static class InitializeAndClose Inheritance object InitializeAndClose Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Close(ISemiconductorModuleContext, bool) Closes all NationalInstruments.ModularInstruments.NIDmm.NIDmm sessions. Initialize(ISemiconductorModuleContext, bool) Initializes NationalInstruments.ModularInstruments.NIDmm.NIDmm sessions in the test system. Reset(ISemiconductorModuleContext) Resets all NationalInstruments.ModularInstruments.NIDmm.NIDmm sessions."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.Measurement.Abort.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.Measurement.Abort.html",
    "title": "Method Abort | Semiconductor Test Library",
    "keywords": "Method Abort Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Abort(DMMSessionsBundle) Aborts an acquisition. public static void Abort(this DMMSessionsBundle sessionsBundle) Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.Measurement.Fetch.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.Measurement.Fetch.html",
    "title": "Method Fetch | Semiconductor Test Library",
    "keywords": "Method Fetch Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Fetch(DMMSessionsBundle, double) Fetches the values from previously initiated measurements. public static PinSiteData<double> Fetch(this DMMSessionsBundle sessionsBundle, double maximumTimeInMilliseconds) Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object. maximumTimeInMilliseconds double The maximum time for the fetch to complete in milliseconds. Returns PinSiteData<double> The measurement results in per-site per-pin format."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.Measurement.FetchAndPublish.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.Measurement.FetchAndPublish.html",
    "title": "Method FetchAndPublish | Semiconductor Test Library",
    "keywords": "Method FetchAndPublish Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll FetchAndPublish(DMMSessionsBundle, double, string) Fetches the values from previously initiated measurements and publishes measurement results. public static double[] FetchAndPublish(this DMMSessionsBundle sessionsBundle, double maximumTimeInMilliseconds, string publishedDataId = \"\") Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object. maximumTimeInMilliseconds double The maximum time for the fetch to complete in milliseconds. publishedDataId string The unique data id to be used when publishing. Returns double[] The measurement results in per-instrument format."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.Measurement.FetchMultiPoint.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.Measurement.FetchMultiPoint.html",
    "title": "Method FetchMultiPoint | Semiconductor Test Library",
    "keywords": "Method FetchMultiPoint Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll FetchMultiPoint(DMMSessionsBundle, int, double) Fetches the specified number of values from previously initiated measurements. public static double[][] FetchMultiPoint(this DMMSessionsBundle sessionsBundle, int numberToRead, double maximumTimeInMilliseconds) Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object. numberToRead int The number of values to fetch. maximumTimeInMilliseconds double The maximum time for the fetch to complete in milliseconds. Returns double[][] The measurement results in per-instrument per-point format."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.Measurement.Initiate.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.Measurement.Initiate.html",
    "title": "Method Initiate | Semiconductor Test Library",
    "keywords": "Method Initiate Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Initiate(DMMSessionsBundle) Initiates an acquisition. public static void Initiate(this DMMSessionsBundle sessionsBundle) Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.Measurement.Read.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.Measurement.Read.html",
    "title": "Method Read | Semiconductor Test Library",
    "keywords": "Method Read Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Read(DMMSessionsBundle, double) Reads measurement results. public static PinSiteData<double> Read(this DMMSessionsBundle sessionsBundle, double maximumTimeInMilliseconds) Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object. maximumTimeInMilliseconds double The maximum time for the fetch to complete in milliseconds. Returns PinSiteData<double> The measurement results in per-site per-pin format."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.Measurement.ReadAndPublish.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.Measurement.ReadAndPublish.html",
    "title": "Method ReadAndPublish | Semiconductor Test Library",
    "keywords": "Method ReadAndPublish Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ReadAndPublish(DMMSessionsBundle, double, string) Reads measurement results and publishes measurement results. public static double[] ReadAndPublish(this DMMSessionsBundle sessionsBundle, double maximumTimeInMilliseconds, string publishedDataId = \"\") Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object. maximumTimeInMilliseconds double The maximum time for the fetch to complete in milliseconds. publishedDataId string The unique data id to use when publishing. Returns double[] The measurement results in per-instrument format."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.Measurement.ReadMultiPoint.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.Measurement.ReadMultiPoint.html",
    "title": "Method ReadMultiPoint | Semiconductor Test Library",
    "keywords": "Method ReadMultiPoint Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ReadMultiPoint(DMMSessionsBundle, int, double) Reads specified number of measurement results. public static double[][] ReadMultiPoint(this DMMSessionsBundle sessionsBundle, int numberToRead, double maximumTimeInMilliseconds) Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object. numberToRead int The number of values to fetch. maximumTimeInMilliseconds double The maximum time for the fetch to complete in milliseconds. Returns double[][] The measurement results in per-instrument per-value format."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.Measurement.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.Measurement.html",
    "title": "Class Measurement | Semiconductor Test Library",
    "keywords": "Class Measurement Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines methods for data acquisition. public static class Measurement Inheritance object Measurement Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Abort(DMMSessionsBundle) Aborts an acquisition. Fetch(DMMSessionsBundle, double) Fetches the values from previously initiated measurements. FetchAndPublish(DMMSessionsBundle, double, string) Fetches the values from previously initiated measurements and publishes measurement results. FetchMultiPoint(DMMSessionsBundle, int, double) Fetches the specified number of values from previously initiated measurements. Initiate(DMMSessionsBundle) Initiates an acquisition. Read(DMMSessionsBundle, double) Reads measurement results. ReadAndPublish(DMMSessionsBundle, double, string) Reads measurement results and publishes measurement results. ReadMultiPoint(DMMSessionsBundle, int, double) Reads specified number of measurement results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigureACBandwidth.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigureACBandwidth.html",
    "title": "Method ConfigureACBandwidth | Semiconductor Test Library",
    "keywords": "Method ConfigureACBandwidth Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureACBandwidth(DMMSessionsBundle, double, double) Configures AC bandwidth for AC measurements. public static void ConfigureACBandwidth(this DMMSessionsBundle sessionsBundle, double minimumFrequency = 20, double maximumFrequency = 25000) Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object. minimumFrequency double The minimum frequency value in Hz to use. maximumFrequency double The maximum frequency value in Hz to use."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigureADCCalibration.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigureADCCalibration.html",
    "title": "Method ConfigureADCCalibration | Semiconductor Test Library",
    "keywords": "Method ConfigureADCCalibration Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureADCCalibration(DMMSessionsBundle, DmmAdcCalibration) Allows the DMM to compensate for gain drift since the last external or self-calibration. public static void ConfigureADCCalibration(this DMMSessionsBundle sessionsBundle, DmmAdcCalibration dmmAdcCalibrationMode) Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object. dmmAdcCalibrationMode DmmAdcCalibration The ADC calibration mode to be used. Remarks When ADC Calibration is AUTO, the DMM enables or disables ADC calibration. When ADC Calibration is ON, the DMM measures an internal reference to calculate the correct gain for the measurement. When ADC Calibration is OFF, the DMM does not compensate for changes to the gain."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigureApertureTime.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigureApertureTime.html",
    "title": "Method ConfigureApertureTime | Semiconductor Test Library",
    "keywords": "Method ConfigureApertureTime Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureApertureTime(DMMSessionsBundle, DmmApertureTimeUnits, double) Configures aperture time. public static void ConfigureApertureTime(this DMMSessionsBundle sessionsBundle, DmmApertureTimeUnits apertureTimeUnits = DmmApertureTimeUnits.Seconds, double apertureTime = 0) Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object. apertureTimeUnits DmmApertureTimeUnits The unit of the aperture time. apertureTime double The aperture time to use."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigureAutoZero.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigureAutoZero.html",
    "title": "Method ConfigureAutoZero | Semiconductor Test Library",
    "keywords": "Method ConfigureAutoZero Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureAutoZero(DMMSessionsBundle, DmmAuto) Configures the DMM for auto zero. public static void ConfigureAutoZero(this DMMSessionsBundle sessionsBundle, DmmAuto autoZeroMode) Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object. autoZeroMode DmmAuto The auto zero mode to be used: AUTO, OFF, ON, or ONCE. Remarks When Auto Zero is AUTO, the DMM chooses the AutoZero setting based on the configured function and resolution. When Auto Zero is OFF, the DMM does not compensate for zero reading offset. Not Supported on 4065 DMM models. When Auto Zero is ONCE, the DMM takes a zero reading once and then turns off Auto Zero. Not Supported on 4065 DMM models. When Auto Zero is ON, the DMM internally disconnects the input, takes a zero reading, and then subtracts the zero reading from the measurement. This prevents offset voltages present on the input circuitry of the DMM from affecting measurement accuracy. Exceptions NISemiconductorTestException A device in an underlying session does not support configuring Auto Zero."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigureMeasurementAbsolute.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigureMeasurementAbsolute.html",
    "title": "Method ConfigureMeasurementAbsolute | Semiconductor Test Library",
    "keywords": "Method ConfigureMeasurementAbsolute Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureMeasurementAbsolute(DMMSessionsBundle, DmmMeasurementFunction, double, double) Configures measurements using absolute resolution. public static void ConfigureMeasurementAbsolute(this DMMSessionsBundle sessionsBundle, DmmMeasurementFunction measurementFunction = DmmMeasurementFunction.DCVolts, double range = 0.02, double resolutionAbsolute = 0.001) Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object. measurementFunction DmmMeasurementFunction The measurement function to use. range double The range to use. resolutionAbsolute double The absolute resolution to use."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigureMeasurementDigits.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigureMeasurementDigits.html",
    "title": "Method ConfigureMeasurementDigits | Semiconductor Test Library",
    "keywords": "Method ConfigureMeasurementDigits Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureMeasurementDigits(DMMSessionsBundle, DmmMeasurementFunction, double, double) Configures measurements using number of digits resolution. public static void ConfigureMeasurementDigits(this DMMSessionsBundle sessionsBundle, DmmMeasurementFunction measurementFunction = DmmMeasurementFunction.DCVolts, double range = 0.02, double resolutionDigits = 5.5) Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object. measurementFunction DmmMeasurementFunction The measurement function to use. range double The range to use. resolutionDigits double The resolution number of digits to use."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigureMultiPoint.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigureMultiPoint.html",
    "title": "Method ConfigureMultiPoint | Semiconductor Test Library",
    "keywords": "Method ConfigureMultiPoint Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureMultiPoint(DMMSessionsBundle, int, int, string, double) Configures multi-point acquisition. public static void ConfigureMultiPoint(this DMMSessionsBundle sessionsBundle, int triggerCount, int sampleCount, string sampleTrigger, double sampleIntervalInSeconds) Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object. triggerCount int The number of the triggers the device receives before returning to the idle state. sampleCount int The number of measurements the device makes in each measurement sequence initiated by a trigger. sampleTrigger string The name of the trigger source that initiates the acquisition. sampleIntervalInSeconds double The interval in seconds that the device waits between measurements."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigurePowerlineFrequency.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigurePowerlineFrequency.html",
    "title": "Method ConfigurePowerlineFrequency | Semiconductor Test Library",
    "keywords": "Method ConfigurePowerlineFrequency Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigurePowerlineFrequency(DMMSessionsBundle, double) Configures power line frequency. public static void ConfigurePowerlineFrequency(this DMMSessionsBundle sessionsBundle, double powerlineFrequency = 60) Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object. powerlineFrequency double The frequency in Hz to use."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigureSettleTime.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigureSettleTime.html",
    "title": "Method ConfigureSettleTime | Semiconductor Test Library",
    "keywords": "Method ConfigureSettleTime Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureSettleTime(DMMSessionsBundle, double) Configures settle time. public static void ConfigureSettleTime(this DMMSessionsBundle sessionsBundle, double settleTime = 0.01) Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object. settleTime double The settle time to use."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigureTrigger.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.ConfigureTrigger.html",
    "title": "Method ConfigureTrigger | Semiconductor Test Library",
    "keywords": "Method ConfigureTrigger Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureTrigger(DMMSessionsBundle, DmmTriggerSource, double) Configures trigger. public static void ConfigureTrigger(this DMMSessionsBundle sessionsBundle, DmmTriggerSource triggerSource, double triggerDelayInSeconds) Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object. triggerSource DmmTriggerSource The name of the trigger source that initiates the acquisition. triggerDelayInSeconds double The interval in seconds that the device waits after it has received a trigger before taking a measurement."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.SendSoftwareTrigger.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.SendSoftwareTrigger.html",
    "title": "Method SendSoftwareTrigger | Semiconductor Test Library",
    "keywords": "Method SendSoftwareTrigger Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll SendSoftwareTrigger(DMMSessionsBundle) Sends out software trigger. public static void SendSoftwareTrigger(this DMMSessionsBundle sessionsBundle) Parameters sessionsBundle DMMSessionsBundle The DMMSessionsBundle object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.PropertiesConfiguration.html",
    "title": "Class PropertiesConfiguration | Semiconductor Test Library",
    "keywords": "Class PropertiesConfiguration Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines methods to configure NationalInstruments.ModularInstruments.NIDmm.NIDmm sessions. public static class PropertiesConfiguration Inheritance object PropertiesConfiguration Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ConfigureACBandwidth(DMMSessionsBundle, double, double) Configures AC bandwidth for AC measurements. ConfigureADCCalibration(DMMSessionsBundle, DmmAdcCalibration) Allows the DMM to compensate for gain drift since the last external or self-calibration. ConfigureApertureTime(DMMSessionsBundle, DmmApertureTimeUnits, double) Configures aperture time. ConfigureAutoZero(DMMSessionsBundle, DmmAuto) Configures the DMM for auto zero. ConfigureMeasurementAbsolute(DMMSessionsBundle, DmmMeasurementFunction, double, double) Configures measurements using absolute resolution. ConfigureMeasurementDigits(DMMSessionsBundle, DmmMeasurementFunction, double, double) Configures measurements using number of digits resolution. ConfigureMultiPoint(DMMSessionsBundle, int, int, string, double) Configures multi-point acquisition. ConfigurePowerlineFrequency(DMMSessionsBundle, double) Configures power line frequency. ConfigureSettleTime(DMMSessionsBundle, double) Configures settle time. ConfigureTrigger(DMMSessionsBundle, DmmTriggerSource, double) Configures trigger. SendSoftwareTrigger(DMMSessionsBundle) Sends out software trigger."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM.html",
    "title": "Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM | Semiconductor Test Library",
    "keywords": "Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DMM Classes DMMSessionInformation Defines an object that contains an individual NationalInstruments.ModularInstruments.NIDmm.NIDmm session and its related information. DMMSessionsBundle Defines an object that contains one or more DMMSessionInformation objects. InitializeAndClose Defines NIDMM sessions initialize and close APIs. Measurement Defines methods for data acquisition. PropertiesConfiguration Defines methods to configure NationalInstruments.ModularInstruments.NIDmm.NIDmm sessions."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionInformation.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionInformation.-ctor.html",
    "title": "Constructor DigitalSessionInformation | Semiconductor Test Library",
    "keywords": "Constructor DigitalSessionInformation Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll DigitalSessionInformation(NIDigital, string, string) Constructs a session information object that associates with a NationalInstruments.ModularInstruments.NIDigital.NIDigital instrument session. public DigitalSessionInformation(NIDigital session, string pinSetString, string siteList) Parameters session NIDigital The NationalInstruments.ModularInstruments.NIDigital.NIDigital session. pinSetString string The pin set string associated with the NationalInstruments.ModularInstruments.NIDigital.NIDigital session. siteList string The site list associated with the NationalInstruments.ModularInstruments.NIDigital.NIDigital session. DigitalSessionInformation(NIDigital, IList<SitePinInfo>) Constructs a session information object. public DigitalSessionInformation(NIDigital session, IList<SitePinInfo> associatedSitePinList) Parameters session NIDigital The NationalInstruments.ModularInstruments.NIDigital.NIDigital session. associatedSitePinList IList<SitePinInfo> The specified subset of channels associated with the session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionInformation.AssociatedSiteList.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionInformation.AssociatedSiteList.html",
    "title": "Property AssociatedSiteList | Semiconductor Test Library",
    "keywords": "Property AssociatedSiteList Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AssociatedSiteList The site numbers corresponding to SiteListString in a more accessible format. public IList<int> AssociatedSiteList { get; } Property Value IList<int>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionInformation.AssociatedSitePinList.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionInformation.AssociatedSitePinList.html",
    "title": "Property AssociatedSitePinList | Semiconductor Test Library",
    "keywords": "Property AssociatedSitePinList Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AssociatedSitePinList The pin set info corresponding to PinSetString in a more accessible format. public IList<SitePinInfo> AssociatedSitePinList { get; } Property Value IList<SitePinInfo>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionInformation.GetPerSitePinSetStrings.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionInformation.GetPerSitePinSetStrings.html",
    "title": "Method GetPerSitePinSetStrings | Semiconductor Test Library",
    "keywords": "Method GetPerSitePinSetStrings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll GetPerSitePinSetStrings() Gets pin set strings on per-site basis. public IDictionary<string, string> GetPerSitePinSetStrings() Returns IDictionary<string, string> A dictionary that contains per-site pin set strings."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionInformation.PinSet.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionInformation.PinSet.html",
    "title": "Property PinSet | Semiconductor Test Library",
    "keywords": "Property PinSet Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll PinSet The NationalInstruments.ModularInstruments.NIDigital.DigitalPinSet according to PinSetString on the Session. public DigitalPinSet PinSet { get; } Property Value DigitalPinSet"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionInformation.PinSetString.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionInformation.PinSetString.html",
    "title": "Property PinSetString | Semiconductor Test Library",
    "keywords": "Property PinSetString Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll PinSetString The pin set string associated with the Session. public string PinSetString { get; } Property Value string Remarks It's a comma-separated string of site-pin pairs, e.g. \"site0/A, site0/B\"."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionInformation.Session.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionInformation.Session.html",
    "title": "Property Session | Semiconductor Test Library",
    "keywords": "Property Session Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Session The NationalInstruments.ModularInstruments.NIDigital.NIDigital session. public NIDigital Session { get; } Property Value NIDigital"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionInformation.SiteListString.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionInformation.SiteListString.html",
    "title": "Property SiteListString | Semiconductor Test Library",
    "keywords": "Property SiteListString Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll SiteListString The site list string associated with the Session. public string SiteListString { get; } Property Value string Remarks It's a comma-separated string of sites, e.g. \"site0, site1\"."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionInformation.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionInformation.html",
    "title": "Class DigitalSessionInformation | Semiconductor Test Library",
    "keywords": "Class DigitalSessionInformation Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an object that contains an individual NationalInstruments.ModularInstruments.NIDigital.NIDigital session and its related information. public class DigitalSessionInformation : ISessionInformation Inheritance object DigitalSessionInformation Implements ISessionInformation Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DigitalSessionInformation(NIDigital, IList<SitePinInfo>) Constructs a session information object. DigitalSessionInformation(NIDigital, string, string) Constructs a session information object that associates with a NationalInstruments.ModularInstruments.NIDigital.NIDigital instrument session. Properties AssociatedSiteList The site numbers corresponding to SiteListString in a more accessible format. AssociatedSitePinList The pin set info corresponding to PinSetString in a more accessible format. PinSet The NationalInstruments.ModularInstruments.NIDigital.DigitalPinSet according to PinSetString on the Session. PinSetString The pin set string associated with the Session. Session The NationalInstruments.ModularInstruments.NIDigital.NIDigital session. SiteListString The site list string associated with the Session. Methods GetPerSitePinSetStrings() Gets pin set strings on per-site basis."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.-ctor.html",
    "title": "Constructor DigitalSessionsBundle | Semiconductor Test Library",
    "keywords": "Constructor DigitalSessionsBundle Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll DigitalSessionsBundle(ISemiconductorModuleContext, IEnumerable<string>, IEnumerable<DigitalSessionInformation>) Constructs a sessions bundle object that represents a bunch of DigitalSessionInformations. public DigitalSessionsBundle(ISemiconductorModuleContext tsmContext, IEnumerable<string> pins, IEnumerable<DigitalSessionInformation> allSessionInfo) Parameters tsmContext ISemiconductorModuleContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. pins IEnumerable<string> The pins associated with this sessions bundle. allSessionInfo IEnumerable<DigitalSessionInformation> An enumerable of DigitalSessionInformations."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.AggregateSitePinList.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.AggregateSitePinList.html",
    "title": "Property AggregateSitePinList | Semiconductor Test Library",
    "keywords": "Property AggregateSitePinList Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AggregateSitePinList An aggregated list of SitePinInfo objects containing information for all of the individual site-pin pairs associated with each of the session information objects within the bundle. public IList<SitePinInfo> AggregateSitePinList { get; } Property Value IList<SitePinInfo>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.Do.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.Do.html",
    "title": "Method Do | Semiconductor Test Library",
    "keywords": "Method Do Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Do<T>(SiteData<T>, Action<DigitalSessionInformation, T[]>) Does an operation on each DigitalSessionInformation in parallel with the given per-site data. public void Do<T>(SiteData<T> data, Action<DigitalSessionInformation, T[]> action) Parameters data SiteData<T> The per-site data the action relies on. action Action<DigitalSessionInformation, T[]> The operation to do. This operation takes DigitalSessionInformation and per-site data as inputs. Type Parameters T The element type of the per-site data."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.DoAndReturnPerSiteResults.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.DoAndReturnPerSiteResults.html",
    "title": "Method DoAndReturnPerSiteResults | Semiconductor Test Library",
    "keywords": "Method DoAndReturnPerSiteResults Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll DoAndReturnPerSiteResults<T>(Func<DigitalSessionInformation, T[]>) Does an operation on each DigitalSessionInformation in parallel and returns per-site results. public SiteData<T> DoAndReturnPerSiteResults<T>(Func<DigitalSessionInformation, T[]> function) Parameters function Func<DigitalSessionInformation, T[]> The operation to do. This operation takes DigitalSessionInformation as input and returns per-site array result. Returns SiteData<T> The results for all sites. Type Parameters T The element type of the per-site result. DoAndReturnPerSiteResults<T>(Func<DigitalSessionInformation, SiteData<T>>) Does an operation on each DigitalSessionInformation in parallel and returns per-site results. public SiteData<T> DoAndReturnPerSiteResults<T>(Func<DigitalSessionInformation, SiteData<T>> function) Parameters function Func<DigitalSessionInformation, SiteData<T>> The operation to do. This operation takes DigitalSessionInformation as input and returns per-site dictionary result. Returns SiteData<T> The results for all sites. Type Parameters T The element type of the per-site result."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.FilterByPin.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.FilterByPin.html",
    "title": "Method FilterByPin | Semiconductor Test Library",
    "keywords": "Method FilterByPin Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll FilterByPin(string) Filters current DigitalSessionsBundle and returns a new one with the requested pin. public DigitalSessionsBundle FilterByPin(string requestedPin) Parameters requestedPin string The requested pin. Returns DigitalSessionsBundle A new DigitalSessionsBundle object with the requested pin. FilterByPin(string[]) Filters current DigitalSessionsBundle and returns a new one with requested pins. public DigitalSessionsBundle FilterByPin(string[] requestedPins) Parameters requestedPins string[] The requested pins. Returns DigitalSessionsBundle A new DigitalSessionsBundle object with requested pins."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.FilterBySite.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.FilterBySite.html",
    "title": "Method FilterBySite | Semiconductor Test Library",
    "keywords": "Method FilterBySite Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll FilterBySite(int) Filters current DigitalSessionsBundle and returns a new one with the requested site. public DigitalSessionsBundle FilterBySite(int requestedSite) Parameters requestedSite int The requested site. Returns DigitalSessionsBundle A new DigitalSessionsBundle object with the requested site. FilterBySite(int[]) Filters current DigitalSessionsBundle and returns a new one with requested sites. public DigitalSessionsBundle FilterBySite(int[] requestedSites) Parameters requestedSites int[] The requested sites. Returns DigitalSessionsBundle A new DigitalSessionsBundle object with requested sites."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.InstrumentSessions.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.InstrumentSessions.html",
    "title": "Property InstrumentSessions | Semiconductor Test Library",
    "keywords": "Property InstrumentSessions Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll InstrumentSessions An enumerable of DigitalSessionInformations. public IEnumerable<DigitalSessionInformation> InstrumentSessions { get; } Property Value IEnumerable<DigitalSessionInformation>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.PerInstrumentPerSiteResultsToPerSiteResults.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.PerInstrumentPerSiteResultsToPerSiteResults.html",
    "title": "Method PerInstrumentPerSiteResultsToPerSiteResults | Semiconductor Test Library",
    "keywords": "Method PerInstrumentPerSiteResultsToPerSiteResults Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll PerInstrumentPerSiteResultsToPerSiteResults<T>(T[][]) Converts per-instrument per-site results to per-site results. public IDictionary<int, T> PerInstrumentPerSiteResultsToPerSiteResults<T>(T[][] perInstrumentPerSiteResults) Parameters perInstrumentPerSiteResults T[][] The per-instrument per-site results to convert. Returns IDictionary<int, T> The converted per-site results. Type Parameters T The type of the per-instrument per-site result."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.Pins.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.Pins.html",
    "title": "Property Pins | Semiconductor Test Library",
    "keywords": "Property Pins Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Pins public IEnumerable<string> Pins { get; } Property Value IEnumerable<string>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.PublishPatternResults.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.PublishPatternResults.html",
    "title": "Method PublishPatternResults | Semiconductor Test Library",
    "keywords": "Method PublishPatternResults Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll PublishPatternResults(bool[][], string) Publishes measurement results. public void PublishPatternResults(bool[][] results, string publishedDataId) Parameters results bool[][] The pattern result data from multiple pins connected to multiple NI-Digital Pattern instruments. Each element in the burst results array is an array that contains pattern results for the sites of a single instrument session. publishedDataId string The unique data id to use when publishing."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.TSMContext.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.TSMContext.html",
    "title": "Property TSMContext | Semiconductor Test Library",
    "keywords": "Property TSMContext Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll TSMContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. public ISemiconductorModuleContext TSMContext { get; } Property Value ISemiconductorModuleContext"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.DigitalSessionsBundle.html",
    "title": "Class DigitalSessionsBundle | Semiconductor Test Library",
    "keywords": "Class DigitalSessionsBundle Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an object that contains one or more DigitalSessionInformation objects. public class DigitalSessionsBundle : ISessionsBundle<DigitalSessionInformation> Inheritance object DigitalSessionsBundle Implements ISessionsBundle<DigitalSessionInformation> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool[]>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double[]>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<double[], double[]>>, string, string) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult>) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1, TResult2>>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, int, TResult[]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[,]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1[], TResult2[]>>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, SitePinInfo>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int, SitePinInfo>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation>) Publish.PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[], string) Publish.PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[][], string) Constructors DigitalSessionsBundle(ISemiconductorModuleContext, IEnumerable<string>, IEnumerable<DigitalSessionInformation>) Constructs a sessions bundle object that represents a bunch of DigitalSessionInformations. Properties AggregateSitePinList An aggregated list of SitePinInfo objects containing information for all of the individual site-pin pairs associated with each of the session information objects within the bundle. InstrumentSessions An enumerable of DigitalSessionInformations. Pins TSMContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. Methods DoAndReturnPerSiteResults<T>(Func<DigitalSessionInformation, SiteData<T>>) Does an operation on each DigitalSessionInformation in parallel and returns per-site results. DoAndReturnPerSiteResults<T>(Func<DigitalSessionInformation, T[]>) Does an operation on each DigitalSessionInformation in parallel and returns per-site results. Do<T>(SiteData<T>, Action<DigitalSessionInformation, T[]>) Does an operation on each DigitalSessionInformation in parallel with the given per-site data. FilterByPin(string) Filters current DigitalSessionsBundle and returns a new one with the requested pin. FilterByPin(string[]) Filters current DigitalSessionsBundle and returns a new one with requested pins. FilterBySite(int) Filters current DigitalSessionsBundle and returns a new one with the requested site. FilterBySite(int[]) Filters current DigitalSessionsBundle and returns a new one with requested sites. PerInstrumentPerSiteResultsToPerSiteResults<T>(T[][]) Converts per-instrument per-site results to per-site results. PublishPatternResults(bool[][], string) Publishes measurement results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.FrequencyCounter.MeasureFrequency.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.FrequencyCounter.MeasureFrequency.html",
    "title": "Method MeasureFrequency | Semiconductor Test Library",
    "keywords": "Method MeasureFrequency Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MeasureFrequency(DigitalSessionsBundle, FrequencyMeasurementMode?, double?) Measures frequency and returns a pin- and site-aware data object. public static PinSiteData<double> MeasureFrequency(this DigitalSessionsBundle sessionsBundle, FrequencyMeasurementMode? measurementMode = null, double? measurementTime = null) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. measurementMode FrequencyMeasurementMode? The frequency measurement mode. measurementTime double? The measurement time in seconds. Returns PinSiteData<double> The measurements in per-site per-pin format."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.FrequencyCounter.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.FrequencyCounter.html",
    "title": "Class FrequencyCounter | Semiconductor Test Library",
    "keywords": "Class FrequencyCounter Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines methods for frequency measurements. public static class FrequencyCounter Inheritance object FrequencyCounter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods MeasureFrequency(DigitalSessionsBundle, FrequencyMeasurementMode?, double?) Measures frequency and returns a pin- and site-aware data object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAM.Configure.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAM.Configure.html",
    "title": "Method Configure | Semiconductor Test Library",
    "keywords": "Method Configure Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Configure(NIDigital, HistoryRAMSettings) Configures History RAM. public static void Configure(this NIDigital session, HistoryRAMSettings settings) Parameters session NIDigital The NationalInstruments.ModularInstruments.NIDigital.NIDigital session. settings HistoryRAMSettings The configuration to apply."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAM.ConfigureHistoryRAM.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAM.ConfigureHistoryRAM.html",
    "title": "Method ConfigureHistoryRAM | Semiconductor Test Library",
    "keywords": "Method ConfigureHistoryRAM Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureHistoryRAM(DigitalSessionsBundle, HistoryRAMSettings) Configures History RAM. public static void ConfigureHistoryRAM(this DigitalSessionsBundle sessionsBundle, HistoryRAMSettings settings) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. settings HistoryRAMSettings The configuration to apply."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAM.FetchHistoryRAMResults.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAM.FetchHistoryRAMResults.html",
    "title": "Method FetchHistoryRAMResults | Semiconductor Test Library",
    "keywords": "Method FetchHistoryRAMResults Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll FetchHistoryRAMResults(DigitalSessionsBundle) Fetches results from the History RAM and returns as a site-aware object of type DigitalHistoryRamCycleInformation. public static SiteData<HistoryRAMResults> FetchHistoryRAMResults(this DigitalSessionsBundle sessionsBundle) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. Returns SiteData<HistoryRAMResults> The per-site History RAM cycle information and scan cycle numbers. FetchHistoryRAMResults(NIDigital, IDictionary<string, string>) Fetches History RAM results. public static SiteData<HistoryRAMResults> FetchHistoryRAMResults(this NIDigital session, IDictionary<string, string> perSitePinSetStrings) Parameters session NIDigital The NationalInstruments.ModularInstruments.NIDigital.NIDigital session. perSitePinSetStrings IDictionary<string, string> The per-site pin set strings associated with the session. Returns SiteData<HistoryRAMResults> The single session per-site History RAM cycle information and scan cycle numbers."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAM.GetConfiguration.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAM.GetConfiguration.html",
    "title": "Method GetConfiguration | Semiconductor Test Library",
    "keywords": "Method GetConfiguration Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll GetConfiguration(NIDigital) Gets History RAM configuration. public static HistoryRAMSettings GetConfiguration(this NIDigital session) Parameters session NIDigital The NationalInstruments.ModularInstruments.NIDigital.NIDigital session. Returns HistoryRAMSettings Current History RAM configuration."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAM.GetHistoryRAMConfiguration.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAM.GetHistoryRAMConfiguration.html",
    "title": "Method GetHistoryRAMConfiguration | Semiconductor Test Library",
    "keywords": "Method GetHistoryRAMConfiguration Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll GetHistoryRAMConfiguration(DigitalSessionsBundle) Gets History RAM configuration. public static HistoryRAMSettings GetHistoryRAMConfiguration(this DigitalSessionsBundle sessionsBundle) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. Returns HistoryRAMSettings Current History RAM configuration."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAM.LogResultsToFiles.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAM.LogResultsToFiles.html",
    "title": "Method LogResultsToFiles | Semiconductor Test Library",
    "keywords": "Method LogResultsToFiles Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll LogResultsToFiles(DigitalSessionsBundle, SiteData<List<DigitalHistoryRamCycleInformation>>, SiteData<List<long>>, string, string) Logs History RAM results to CSV files. This method should be used for debug only. public static void LogResultsToFiles(this DigitalSessionsBundle sessionsBundle, SiteData<List<DigitalHistoryRamCycleInformation>> cycleInformation, SiteData<List<long>> scanCycleNumbers, string patternName, string outputDirectory) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. cycleInformation SiteData<List<DigitalHistoryRamCycleInformation>> The per-site cycle information. scanCycleNumbers SiteData<List<long>> The per-site scan cycle numbers. patternName string The name of the pattern. outputDirectory string The directory to save the CSV files."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAM.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAM.html",
    "title": "Class HistoryRAM | Semiconductor Test Library",
    "keywords": "Class HistoryRAM Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines methods for History RAM. public static class HistoryRAM Inheritance object HistoryRAM Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Configure(NIDigital, HistoryRAMSettings) Configures History RAM. ConfigureHistoryRAM(DigitalSessionsBundle, HistoryRAMSettings) Configures History RAM. FetchHistoryRAMResults(NIDigital, IDictionary<string, string>) Fetches History RAM results. FetchHistoryRAMResults(DigitalSessionsBundle) Fetches results from the History RAM and returns as a site-aware object of type DigitalHistoryRamCycleInformation. GetConfiguration(NIDigital) Gets History RAM configuration. GetHistoryRAMConfiguration(DigitalSessionsBundle) Gets History RAM configuration. LogResultsToFiles(DigitalSessionsBundle, SiteData<List<DigitalHistoryRamCycleInformation>>, SiteData<List<long>>, string, string) Logs History RAM results to CSV files. This method should be used for debug only."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMResults.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMResults.-ctor.html",
    "title": "Constructor HistoryRAMResults | Semiconductor Test Library",
    "keywords": "Constructor HistoryRAMResults Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll HistoryRAMResults(List<DigitalHistoryRamCycleInformation>, List<long>) Constructs a History RAM results object. public HistoryRAMResults(List<DigitalHistoryRamCycleInformation> cycleInformation, List<long> scanCycleNumbers) Parameters cycleInformation List<DigitalHistoryRamCycleInformation> The cycle information. scanCycleNumbers List<long> The scan cycle numbers."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMResults.CycleInformation.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMResults.CycleInformation.html",
    "title": "Property CycleInformation | Semiconductor Test Library",
    "keywords": "Property CycleInformation Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll CycleInformation The per-site cycle information. public List<DigitalHistoryRamCycleInformation> CycleInformation { get; } Property Value List<DigitalHistoryRamCycleInformation>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMResults.ScanCycleNumbers.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMResults.ScanCycleNumbers.html",
    "title": "Property ScanCycleNumbers | Semiconductor Test Library",
    "keywords": "Property ScanCycleNumbers Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ScanCycleNumbers The per-site scan cycle numbers. public List<long> ScanCycleNumbers { get; } Property Value List<long>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMResults.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMResults.html",
    "title": "Class HistoryRAMResults | Semiconductor Test Library",
    "keywords": "Class HistoryRAMResults Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines History RAM results type. public class HistoryRAMResults Inheritance object HistoryRAMResults Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors HistoryRAMResults(List<DigitalHistoryRamCycleInformation>, List<long>) Constructs a History RAM results object. Properties CycleInformation The per-site cycle information. ScanCycleNumbers The per-site scan cycle numbers."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMSettings.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMSettings.-ctor.html",
    "title": "Constructor HistoryRAMSettings | Semiconductor Test Library",
    "keywords": "Constructor HistoryRAMSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll HistoryRAMSettings() public HistoryRAMSettings()"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMSettings.BufferSizePerSite.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMSettings.BufferSizePerSite.html",
    "title": "Property BufferSizePerSite | Semiconductor Test Library",
    "keywords": "Property BufferSizePerSite Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll BufferSizePerSite The in-memory History RAM buffer size in samples. public long BufferSizePerSite { get; set; } Property Value long"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMSettings.CyclesToAcquire.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMSettings.CyclesToAcquire.html",
    "title": "Property CyclesToAcquire | Semiconductor Test Library",
    "keywords": "Property CyclesToAcquire Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll CyclesToAcquire The cycles to acquire after the trigger conditions are met. public HistoryRamCycle CyclesToAcquire { get; set; } Property Value HistoryRamCycle"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMSettings.MaximumSamplesToAcquirePerSite.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMSettings.MaximumSamplesToAcquirePerSite.html",
    "title": "Property MaximumSamplesToAcquirePerSite | Semiconductor Test Library",
    "keywords": "Property MaximumSamplesToAcquirePerSite Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MaximumSamplesToAcquirePerSite The maximum samples to acquire for each site. public int MaximumSamplesToAcquirePerSite { get; set; } Property Value int"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMSettings.NumberOfSamplesIsFinite.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMSettings.NumberOfSamplesIsFinite.html",
    "title": "Property NumberOfSamplesIsFinite | Semiconductor Test Library",
    "keywords": "Property NumberOfSamplesIsFinite Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll NumberOfSamplesIsFinite Whether the number of samples is finite. public bool NumberOfSamplesIsFinite { get; set; } Property Value bool"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMSettings.TriggerSettings.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMSettings.TriggerSettings.html",
    "title": "Property TriggerSettings | Semiconductor Test Library",
    "keywords": "Property TriggerSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll TriggerSettings The History RAM trigger settings. public HistoryRAMTriggerSettings TriggerSettings { get; set; } Property Value HistoryRAMTriggerSettings"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMSettings.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMSettings.html",
    "title": "Class HistoryRAMSettings | Semiconductor Test Library",
    "keywords": "Class HistoryRAMSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines settings of History RAM. public class HistoryRAMSettings Inheritance object HistoryRAMSettings Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors HistoryRAMSettings() Properties BufferSizePerSite The in-memory History RAM buffer size in samples. CyclesToAcquire The cycles to acquire after the trigger conditions are met. MaximumSamplesToAcquirePerSite The maximum samples to acquire for each site. NumberOfSamplesIsFinite Whether the number of samples is finite. TriggerSettings The History RAM trigger settings."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMTriggerSettings.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMTriggerSettings.-ctor.html",
    "title": "Constructor HistoryRAMTriggerSettings | Semiconductor Test Library",
    "keywords": "Constructor HistoryRAMTriggerSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll HistoryRAMTriggerSettings() public HistoryRAMTriggerSettings()"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMTriggerSettings.CycleNumber.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMTriggerSettings.CycleNumber.html",
    "title": "Property CycleNumber | Semiconductor Test Library",
    "keywords": "Property CycleNumber Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll CycleNumber The number of cycles to execute. Use this property only when TriggerType is set to NationalInstruments.ModularInstruments.NIDigital.HistoryRamTriggerType.CycleNumber. public long CycleNumber { get; set; } Property Value long"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMTriggerSettings.CycleOffset.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMTriggerSettings.CycleOffset.html",
    "title": "Property CycleOffset | Semiconductor Test Library",
    "keywords": "Property CycleOffset Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll CycleOffset The cycle offset. Use this property only when TriggerType is set to NationalInstruments.ModularInstruments.NIDigital.HistoryRamTriggerType.PatternLabel. public long CycleOffset { get; set; } Property Value long"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMTriggerSettings.PatternLabel.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMTriggerSettings.PatternLabel.html",
    "title": "Property PatternLabel | Semiconductor Test Library",
    "keywords": "Property PatternLabel Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll PatternLabel The pattern label. Use this property only when TriggerType is set to NationalInstruments.ModularInstruments.NIDigital.HistoryRamTriggerType.PatternLabel. public string PatternLabel { get; set; } Property Value string"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMTriggerSettings.PretriggerSamples.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMTriggerSettings.PretriggerSamples.html",
    "title": "Property PretriggerSamples | Semiconductor Test Library",
    "keywords": "Property PretriggerSamples Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll PretriggerSamples The number of samples to acquire before the History RAM trigger. public int PretriggerSamples { get; set; } Property Value int"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMTriggerSettings.TriggerType.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMTriggerSettings.TriggerType.html",
    "title": "Property TriggerType | Semiconductor Test Library",
    "keywords": "Property TriggerType Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll TriggerType The trigger type. public HistoryRamTriggerType TriggerType { get; set; } Property Value HistoryRamTriggerType"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMTriggerSettings.VectorOffset.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMTriggerSettings.VectorOffset.html",
    "title": "Property VectorOffset | Semiconductor Test Library",
    "keywords": "Property VectorOffset Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll VectorOffset The vector offset. Use this property only when TriggerType is set to NationalInstruments.ModularInstruments.NIDigital.HistoryRamTriggerType.PatternLabel. public long VectorOffset { get; set; } Property Value long"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMTriggerSettings.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.HistoryRAMTriggerSettings.html",
    "title": "Class HistoryRAMTriggerSettings | Semiconductor Test Library",
    "keywords": "Class HistoryRAMTriggerSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines History RAM trigger settings. public class HistoryRAMTriggerSettings Inheritance object HistoryRAMTriggerSettings Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors HistoryRAMTriggerSettings() Properties CycleNumber The number of cycles to execute. Use this property only when TriggerType is set to NationalInstruments.ModularInstruments.NIDigital.HistoryRamTriggerType.CycleNumber. CycleOffset The cycle offset. Use this property only when TriggerType is set to NationalInstruments.ModularInstruments.NIDigital.HistoryRamTriggerType.PatternLabel. PatternLabel The pattern label. Use this property only when TriggerType is set to NationalInstruments.ModularInstruments.NIDigital.HistoryRamTriggerType.PatternLabel. PretriggerSamples The number of samples to acquire before the History RAM trigger. TriggerType The trigger type. VectorOffset The vector offset. Use this property only when TriggerType is set to NationalInstruments.ModularInstruments.NIDigital.HistoryRamTriggerType.PatternLabel."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.InitializeAndClose.Close.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.InitializeAndClose.Close.html",
    "title": "Method Close | Semiconductor Test Library",
    "keywords": "Method Close Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Close(ISemiconductorModuleContext, bool) Closes all NationalInstruments.ModularInstruments.NIDigital.NIDigital sessions. public static void Close(ISemiconductorModuleContext tsmContext, bool reset = true) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. reset bool Whether to reset the device sessions before closing."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.InitializeAndClose.Initialize.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.InitializeAndClose.Initialize.html",
    "title": "Method Initialize | Semiconductor Test Library",
    "keywords": "Method Initialize Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Initialize(ISemiconductorModuleContext, string, string, bool, bool) Initializes NationalInstruments.ModularInstruments.NIDigital.NIDigital sessions in the test system. public static void Initialize(ISemiconductorModuleContext tsmContext, string levelsSheetToApply = \"\", string timingSheetToApply = \"\", bool resetDevice = false, bool applySourceWaveformData = false) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. levelsSheetToApply string The name of the levels sheet to apply. timingSheetToApply string The name of the timing sheet to apply. resetDevice bool Whether to reset device during initialization. applySourceWaveformData bool Whether to apply the data in waveform files to source waveforms."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.InitializeAndClose.Reset.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.InitializeAndClose.Reset.html",
    "title": "Method Reset | Semiconductor Test Library",
    "keywords": "Method Reset Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Reset(ISemiconductorModuleContext, bool) Resets all NationalInstruments.ModularInstruments.NIDigital.NIDigital sessions. public static void Reset(ISemiconductorModuleContext tsmContext, bool resetDevice = false) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to perform a hard reset on the device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.InitializeAndClose.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.InitializeAndClose.html",
    "title": "Class InitializeAndClose | Semiconductor Test Library",
    "keywords": "Class InitializeAndClose Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines NationalInstruments.ModularInstruments.NIDigital.NIDigital sessions initialize and close APIs. public static class InitializeAndClose Inheritance object InitializeAndClose Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Close(ISemiconductorModuleContext, bool) Closes all NationalInstruments.ModularInstruments.NIDigital.NIDigital sessions. Initialize(ISemiconductorModuleContext, string, string, bool, bool) Initializes NationalInstruments.ModularInstruments.NIDigital.NIDigital sessions in the test system. Reset(ISemiconductorModuleContext, bool) Resets all NationalInstruments.ModularInstruments.NIDigital.NIDigital sessions."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.ApplyLevelsAndTiming.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.ApplyLevelsAndTiming.html",
    "title": "Method ApplyLevelsAndTiming | Semiconductor Test Library",
    "keywords": "Method ApplyLevelsAndTiming Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ApplyLevelsAndTiming(DigitalSessionsBundle, string, string) Applies digital levels and timing defined in the loaded levels and timing sheets. public static void ApplyLevelsAndTiming(this DigitalSessionsBundle sessionsBundle, string levelsSheet, string timingSheet) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. levelsSheet string The name of the levels sheet to apply. timingSheet string The name of the timing sheet to apply."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.ApplyTDROffsets.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.ApplyTDROffsets.html",
    "title": "Method ApplyTDROffsets | Semiconductor Test Library",
    "keywords": "Method ApplyTDROffsets Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ApplyTDROffsets(DigitalSessionsBundle, PinSiteData<PrecisionTimeSpan>) Applies the correction for propagation delay offsets to a digital pattern instrument. Use this method to apply per-site per-pin offsets. public static void ApplyTDROffsets(this DigitalSessionsBundle sessionsBundle, PinSiteData<PrecisionTimeSpan> offsets) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. offsets PinSiteData<PrecisionTimeSpan> The per-site per-pin offsets to apply. ApplyTDROffsets(DigitalSessionsBundle, PrecisionTimeSpan[][]) Applies the correction for propagation delay offsets to a digital pattern instrument. Use this method to apply per-instrument session per-pin offsets. public static void ApplyTDROffsets(this DigitalSessionsBundle sessionsBundle, PrecisionTimeSpan[][] offsets) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. offsets PrecisionTimeSpan[][] Offsets to apply. Where the first dimension represents instrument sessions and the second dimension represents pins."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.ConfigureSingleLevel.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.ConfigureSingleLevel.html",
    "title": "Method ConfigureSingleLevel | Semiconductor Test Library",
    "keywords": "Method ConfigureSingleLevel Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureSingleLevel(DigitalSessionsBundle, LevelType, double) Configures a single level. Use this method to configure the same level for all sessions. public static void ConfigureSingleLevel(this DigitalSessionsBundle sessionsBundle, LevelsAndTiming.LevelType levelType, double levelValue) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. levelType LevelsAndTiming.LevelType The type of level to configure. levelValue double The value of level to configure. ConfigureSingleLevel(DigitalSessionsBundle, LevelType, SiteData<double>) Configures a single level. Use this method to configure different levels for different sites. public static void ConfigureSingleLevel(this DigitalSessionsBundle sessionsBundle, LevelsAndTiming.LevelType levelType, SiteData<double> perSiteLevelValues) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. levelType LevelsAndTiming.LevelType The type of level to configure. perSiteLevelValues SiteData<double> The per-site value of level to configure. ConfigureSingleLevel(DigitalPinSet, LevelType, double) Configures a single level. public static void ConfigureSingleLevel(this DigitalPinSet pinSet, LevelsAndTiming.LevelType levelType, double levelValue) Parameters pinSet DigitalPinSet The NationalInstruments.ModularInstruments.NIDigital.DigitalPinSet object. levelType LevelsAndTiming.LevelType The type of the level to configure. levelValue double The value of the level to configure."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.ConfigureTdrEndpointTermination.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.ConfigureTdrEndpointTermination.html",
    "title": "Method ConfigureTdrEndpointTermination | Semiconductor Test Library",
    "keywords": "Method ConfigureTdrEndpointTermination Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureTdrEndpointTermination(DigitalSessionsBundle, TdrEndpointTermination) public static void ConfigureTdrEndpointTermination(this DigitalSessionsBundle sessionsBundle, TdrEndpointTermination tdrEndpointTermination) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. tdrEndpointTermination TdrEndpointTermination TDR Endpoint Termination type. The default value is NationalInstruments.ModularInstruments.NIDigital.TdrEndpointTermination.TdrToOpenCircuit."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.ConfigureTerminationMode.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.ConfigureTerminationMode.html",
    "title": "Method ConfigureTerminationMode | Semiconductor Test Library",
    "keywords": "Method ConfigureTerminationMode Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureTerminationMode(DigitalSessionsBundle, TerminationMode) Configures termination mode. public static void ConfigureTerminationMode(this DigitalSessionsBundle sessionsBundle, TerminationMode terminationMode) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. terminationMode TerminationMode The termination mode to configure."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.ConfigureTimeSetCompareEdgesStrobe.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.ConfigureTimeSetCompareEdgesStrobe.html",
    "title": "Method ConfigureTimeSetCompareEdgesStrobe | Semiconductor Test Library",
    "keywords": "Method ConfigureTimeSetCompareEdgesStrobe Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureTimeSetCompareEdgesStrobe(DigitalSessionsBundle, string, double) Configures the strobe edge time. Use this method to configure the same strobe edge time to all sessions. public static void ConfigureTimeSetCompareEdgesStrobe(this DigitalSessionsBundle sessionsBundle, string timeSet, double compareEdge) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. timeSet string The name of the time set. compareEdge double The strobe edge time to configure. ConfigureTimeSetCompareEdgesStrobe(DigitalSessionsBundle, string, SiteData<double>) Configures the strobe edge time. Use this method to configure different strobe edge times for different sites. public static void ConfigureTimeSetCompareEdgesStrobe(this DigitalSessionsBundle sessionsBundle, string timeSet, SiteData<double> compareEdges) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. timeSet string The name of the time set. compareEdges SiteData<double> The per-site strobe edge time to configure. ConfigureTimeSetCompareEdgesStrobe(DigitalSessionsBundle, string, PinSiteData<double>) Configures the strobe edge time. Use this method to configure different strobe edge times for different site-pin pairs. public static void ConfigureTimeSetCompareEdgesStrobe(this DigitalSessionsBundle sessionsBundle, string timeSet, PinSiteData<double> compareEdges) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. timeSet string The name of the time set. compareEdges PinSiteData<double> The strobe edge time for all site-pin pairs to configure."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.ConfigureTimeSetDriveEdges.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.ConfigureTimeSetDriveEdges.html",
    "title": "Method ConfigureTimeSetDriveEdges | Semiconductor Test Library",
    "keywords": "Method ConfigureTimeSetDriveEdges Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureTimeSetDriveEdges(DigitalSessionsBundle, string, DriveFormat, double, double, double, double) Configures the drive format and drive edge placement. public static void ConfigureTimeSetDriveEdges(this DigitalSessionsBundle sessionsBundle, string timeSet, DriveFormat format, double driveOn, double driveData, double driveReturn, double driveOff) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. timeSet string The name of the time set. format DriveFormat The drive format of the time set. driveOn double The delay from the beginning of the vector period for turning on the pin driver. driveData double The delay from the beginning of the vector period until the pattern data is driven to the pattern value. driveReturn double The delay from the beginning of the vector period until the pin changes from the pattern data to the return value. driveOff double The delay from the beginning of the vector period to turn off the pin driver. ConfigureTimeSetDriveEdges(DigitalSessionsBundle, string, DriveFormat, double, double, double, double, double, double) Configures the drive format and drive edge placement. public static void ConfigureTimeSetDriveEdges(this DigitalSessionsBundle sessionsBundle, string timeSet, DriveFormat format, double driveOn, double driveData, double driveReturn, double driveOff, double driveData2, double driveReturn2) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. timeSet string The name of the time set. format DriveFormat The drive format of the time set. driveOn double The delay from the beginning of the vector period for turning on the pin driver. driveData double The delay from the beginning of the vector period until the pattern data is driven to the pattern value. driveReturn double The delay from the beginning of the vector period until the pin changes from the pattern data to the return value. driveOff double The delay from the beginning of the vector period to turn off the pin driver. driveData2 double The delay from the beginning of the vector period until the pattern data is driven to the second pattern value. driveReturn2 double The delay from the beginning of the vector period until the pin changes from the second pattern data to the return value."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.ConfigureTimeSetPeriod.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.ConfigureTimeSetPeriod.html",
    "title": "Method ConfigureTimeSetPeriod | Semiconductor Test Library",
    "keywords": "Method ConfigureTimeSetPeriod Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureTimeSetPeriod(DigitalSessionsBundle, string, double) Configures the period of a time set. public static void ConfigureTimeSetPeriod(this DigitalSessionsBundle sessionsBundle, string timeSet, double period) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. timeSet string The name of the time set. period double The period to configure."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.ConfigureVoltageLevels.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.ConfigureVoltageLevels.html",
    "title": "Method ConfigureVoltageLevels | Semiconductor Test Library",
    "keywords": "Method ConfigureVoltageLevels Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureVoltageLevels(DigitalSessionsBundle, double, double, double, double, double) Configures multiple types of levels. public static void ConfigureVoltageLevels(this DigitalSessionsBundle sessionsBundle, double vil, double vih, double vol, double voh, double vterm) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. vil double The vil value to configure. vih double The vih value to configure. vol double The vol value to configure. voh double The voh value to configure. vterm double The vterm value to configure."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.LevelType.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.LevelType.html",
    "title": "Enum LevelsAndTiming.LevelType | Semiconductor Test Library",
    "keywords": "Enum LevelsAndTiming.LevelType Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines voltage level types. public enum LevelsAndTiming.LevelType Fields Ioh = 6 The current that the DUT sources to the active load while outputting a voltage above Vcom. Iol = 5 The current that the DUT sinks from the active load while outputting a voltage below Vcom. Vcom = 7 The commutating voltage at which the active load circuit switches between sourcing current and sinking current. Vih = 1 The input voltage that the digital pattern instrument applies to the input of the DUT when the test instrument drives a logic high (1). Vil = 0 The input voltage that the digital pattern instrument applies to the input of the DUT when the test instrument drives a logic low (0). Voh = 3 The output voltage from the DUT above which the comparator on the test instrument interprets a logic high (H). Vol = 2 The output voltage from the DUT below which the comparator on the test instrument interprets a logic low (L). Vterm = 4 The termination voltage the instrument applies during non-drive cycles."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.LoadTDROffsetsFromFile.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.LoadTDROffsetsFromFile.html",
    "title": "Method LoadTDROffsetsFromFile | Semiconductor Test Library",
    "keywords": "Method LoadTDROffsetsFromFile Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll LoadTDROffsetsFromFile(DigitalSessionsBundle, string, bool) Loads TDR offsets from a file. public static PinSiteData<PrecisionTimeSpan> LoadTDROffsetsFromFile(this DigitalSessionsBundle sessionsBundle, string filePath, bool throwOnMissingChannels = true) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. filePath string The path of the file to load the offsets. throwOnMissingChannels bool Whether to throw an exception if the offset for any channel is missing. Returns PinSiteData<PrecisionTimeSpan> TDR offset values retrieved from the file. Exceptions ArgumentException This exception will be thrown if throwOnMissingChannels is true and an offset value was not found in the file for one or more of channels in the sessions bundle. LoadTDROffsetsFromFile(DigitalSessionsBundle, string, out PrecisionTimeSpan[][], bool) Loads TDR offsets from a file. public static void LoadTDROffsetsFromFile(this DigitalSessionsBundle sessionsBundle, string filePath, out PrecisionTimeSpan[][] offsets, bool throwOnMissingChannels = true) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. filePath string The path of the file to load the offsets. offsets PrecisionTimeSpan[][] TDR offset values retrieved from the file. Where the first dimension represents instrument sessions and the second dimension represents pins. throwOnMissingChannels bool Whether to throw a message if the offset for any channel is missing. Exceptions ArgumentException This exception will be thrown if throwOnMissingChannels is true and an offset value was not found in the file for one or more of channels in the sessions bundle."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.MeasureTDROffsets.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.MeasureTDROffsets.html",
    "title": "Method MeasureTDROffsets | Semiconductor Test Library",
    "keywords": "Method MeasureTDROffsets Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MeasureTDROffsets(DigitalSessionsBundle, bool) Measures propagation delays through cables, connectors, and load boards using Time-Domain Reflectometry (TDR). You can optionally apply the offsets to the pins. Use this method to measure per-site per-pin offsets. public static PinSiteData<PrecisionTimeSpan> MeasureTDROffsets(this DigitalSessionsBundle sessionsBundle, bool apply = false) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. apply bool Whether to apply the offsets to the pins. Returns PinSiteData<PrecisionTimeSpan> MeasureTDROffsets(DigitalSessionsBundle, out PrecisionTimeSpan[][], bool) Measures propagation delays through cables, connectors, and load boards using Time-Domain Reflectometry (TDR). You can optionally apply the offsets to the pins. Use this method to measure per-instrument session per-pin offsets. public static void MeasureTDROffsets(this DigitalSessionsBundle sessionsBundle, out PrecisionTimeSpan[][] offsets, bool apply = false) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. offsets PrecisionTimeSpan[][] The measured TDR offsets. Where the first dimension represents instrument sessions, and the second dimension represents pins. apply bool Whether to apply the offsets to the pins."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.SaveTDROffsetsToFile.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.SaveTDROffsetsToFile.html",
    "title": "Method SaveTDROffsetsToFile | Semiconductor Test Library",
    "keywords": "Method SaveTDROffsetsToFile Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll SaveTDROffsetsToFile(DigitalSessionsBundle, PinSiteData<PrecisionTimeSpan>, string) Saves TDR offsets to a file. public static void SaveTDROffsetsToFile(this DigitalSessionsBundle sessionsBundle, PinSiteData<PrecisionTimeSpan> offsets, string filePath) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. offsets PinSiteData<PrecisionTimeSpan> The per-site per-pin offsets to save. filePath string The path of the file to save the offsets to. SaveTDROffsetsToFile(DigitalSessionsBundle, PrecisionTimeSpan[][], string) Saves TDR offsets to a file. public static void SaveTDROffsetsToFile(this DigitalSessionsBundle sessionsBundle, PrecisionTimeSpan[][] offsets, string filePath) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. offsets PrecisionTimeSpan[][] The per-instrument session per-pin offsets to save. Where the first dimension represents instrument sessions and the second dimension represents pins. filePath string The path of the file to save the offsets to. Remarks The resulting file is pinmap specific. It is recommended that the filename provided contains the same name as the pinmap, as well as timestamp."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.LevelsAndTiming.html",
    "title": "Class LevelsAndTiming | Semiconductor Test Library",
    "keywords": "Class LevelsAndTiming Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines methods for levels and timing. public static class LevelsAndTiming Inheritance object LevelsAndTiming Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ApplyLevelsAndTiming(DigitalSessionsBundle, string, string) Applies digital levels and timing defined in the loaded levels and timing sheets. ApplyTDROffsets(DigitalSessionsBundle, PrecisionTimeSpan[][]) Applies the correction for propagation delay offsets to a digital pattern instrument. Use this method to apply per-instrument session per-pin offsets. ApplyTDROffsets(DigitalSessionsBundle, PinSiteData<PrecisionTimeSpan>) Applies the correction for propagation delay offsets to a digital pattern instrument. Use this method to apply per-site per-pin offsets. ConfigureSingleLevel(DigitalPinSet, LevelType, double) Configures a single level. ConfigureSingleLevel(DigitalSessionsBundle, LevelType, SiteData<double>) Configures a single level. Use this method to configure different levels for different sites. ConfigureSingleLevel(DigitalSessionsBundle, LevelType, double) Configures a single level. Use this method to configure the same level for all sessions. ConfigureTdrEndpointTermination(DigitalSessionsBundle, TdrEndpointTermination) ConfigureTerminationMode(DigitalSessionsBundle, TerminationMode) Configures termination mode. ConfigureTimeSetCompareEdgesStrobe(DigitalSessionsBundle, string, PinSiteData<double>) Configures the strobe edge time. Use this method to configure different strobe edge times for different site-pin pairs. ConfigureTimeSetCompareEdgesStrobe(DigitalSessionsBundle, string, SiteData<double>) Configures the strobe edge time. Use this method to configure different strobe edge times for different sites. ConfigureTimeSetCompareEdgesStrobe(DigitalSessionsBundle, string, double) Configures the strobe edge time. Use this method to configure the same strobe edge time to all sessions. ConfigureTimeSetDriveEdges(DigitalSessionsBundle, string, DriveFormat, double, double, double, double) Configures the drive format and drive edge placement. ConfigureTimeSetDriveEdges(DigitalSessionsBundle, string, DriveFormat, double, double, double, double, double, double) Configures the drive format and drive edge placement. ConfigureTimeSetPeriod(DigitalSessionsBundle, string, double) Configures the period of a time set. ConfigureVoltageLevels(DigitalSessionsBundle, double, double, double, double, double) Configures multiple types of levels. LoadTDROffsetsFromFile(DigitalSessionsBundle, string, out PrecisionTimeSpan[][], bool) Loads TDR offsets from a file. LoadTDROffsetsFromFile(DigitalSessionsBundle, string, bool) Loads TDR offsets from a file. MeasureTDROffsets(DigitalSessionsBundle, out PrecisionTimeSpan[][], bool) Measures propagation delays through cables, connectors, and load boards using Time-Domain Reflectometry (TDR). You can optionally apply the offsets to the pins. Use this method to measure per-instrument session per-pin offsets. MeasureTDROffsets(DigitalSessionsBundle, bool) Measures propagation delays through cables, connectors, and load boards using Time-Domain Reflectometry (TDR). You can optionally apply the offsets to the pins. Use this method to measure per-site per-pin offsets. SaveTDROffsetsToFile(DigitalSessionsBundle, PrecisionTimeSpan[][], string) Saves TDR offsets to a file. SaveTDROffsetsToFile(DigitalSessionsBundle, PinSiteData<PrecisionTimeSpan>, string) Saves TDR offsets to a file."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.ConfigureApertureTime.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.ConfigureApertureTime.html",
    "title": "Method ConfigureApertureTime | Semiconductor Test Library",
    "keywords": "Method ConfigureApertureTime Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureApertureTime(DigitalSessionsBundle, double) Configures the aperture time for the PPMU measurement. public static void ConfigureApertureTime(this DigitalSessionsBundle sessionsBundle, double apertureTimeInSeconds) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. apertureTimeInSeconds double The aperture time in seconds."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.DisconnectOutput.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.DisconnectOutput.html",
    "title": "Method DisconnectOutput | Semiconductor Test Library",
    "keywords": "Method DisconnectOutput Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll DisconnectOutput(DigitalSessionsBundle, double?) The pin is electrically disconnected from instrument functions. public static void DisconnectOutput(this DigitalSessionsBundle sessionsBundle, double? settlingTimeInSeconds = null) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. settlingTimeInSeconds double? The settling time in seconds. Passing a Null value (default) bypasses the wait operation (No-op). Remarks Remarks: Selecting this function causes the PPMU to stop sourcing prior to disconnecting the pin. CAUTION: In the Disconnect state, some I/O protection and sensing circuitry remain exposed. Do not subject the instrument to voltage beyond its operating range. Example: DigitalSessionsBundle myDutPin = new TSMSessionManager().Digital(\"MyDutPin\"); myDutPin.DisconnectOutput(settlingTimeInSeconds: 0.1);"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.Force.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.Force.html",
    "title": "Method Force | Semiconductor Test Library",
    "keywords": "Method Force Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Force(NIDigital, string, PPMUSettings) Forces on digital devices. public static void Force(this NIDigital session, string pinSetString, PPMUSettings settings) Parameters session NIDigital The NationalInstruments.ModularInstruments.NIDigital.NIDigital session. pinSetString string The pin set string. settings PPMUSettings The forcing settings."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.ForceCurrent.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.ForceCurrent.html",
    "title": "Method ForceCurrent | Semiconductor Test Library",
    "keywords": "Method ForceCurrent Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ForceCurrent(DigitalSessionsBundle, double, double?, double?, double?, double?, double?) Forces current on the target pin(s) at the specified level. You must provide a current level value, and the method will assume all other properties that have been previously set. Optionally, you can also provide a specific voltage limit and current level range values directly. public static void ForceCurrent(this DigitalSessionsBundle sessionsBundle, double currentLevel, double? currentLevelRange = null, double? voltageLimitLow = null, double? voltageLimitHigh = null, double? apertureTime = null, double? settlingTime = null) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. currentLevel double The current level. currentLevelRange double? The current level range. voltageLimitLow double? The low voltage limit. voltageLimitHigh double? The high voltage limit. apertureTime double? The aperture time. settlingTime double? The settling time. Remarks Use this method to force the same current level on all sites. ForceCurrent(DigitalSessionsBundle, IDictionary<string, PPMUSettings>) Forces current on the target pin(s). public static void ForceCurrent(this DigitalSessionsBundle sessionsBundle, IDictionary<string, PPMUSettings> settings) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. settings IDictionary<string, PPMUSettings> The per-pin settings to use."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.ForceVoltage.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.ForceVoltage.html",
    "title": "Method ForceVoltage | Semiconductor Test Library",
    "keywords": "Method ForceVoltage Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ForceVoltage(DigitalSessionsBundle, double, double?, double?, double?) Forces voltage on the target pin(s) at the specified level. You must provide the voltage level value, and the method will assume all other properties that have been previously set. Optionally, you can also provide a specific current limit, current limit range, and voltage level range values directly. public static void ForceVoltage(this DigitalSessionsBundle sessionsBundle, double voltageLevel, double? currentLimitRange = null, double? apertureTime = null, double? settlingTime = null) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. voltageLevel double The voltage level. currentLimitRange double? The current limit range. apertureTime double? The aperture Time. settlingTime double? The settling time. Remarks Use this method to force the same voltage level on all sessions. ForceVoltage(DigitalSessionsBundle, SiteData<double>, double?, double?, double?) Forces voltage on the target pin(s) at the specified level. You must provide the voltage level values, and the method will assume all other properties that have been previously set. Optionally, you can also provide a specific current limit, current limit range, and voltage level range values directly. public static void ForceVoltage(this DigitalSessionsBundle sessionsBundle, SiteData<double> voltageLevels, double? currentLimitRange = null, double? apertureTime = null, double? settlingTime = null) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. voltageLevels SiteData<double> The voltage levels for all sites. currentLimitRange double? The current limit range. apertureTime double? The aperture Time. settlingTime double? The settling time. Remarks Use this method to force different voltage levels on different sites. ForceVoltage(DigitalSessionsBundle, PinSiteData<double>, double?, double?, double?) Forces voltage on the target pin(s) at the specified level. You must provide the voltage level values, and the method will assume all other properties that have been previously set. Optionally, you can also provide a specific current limit, current limit range, and voltage level range values directly. public static void ForceVoltage(this DigitalSessionsBundle sessionsBundle, PinSiteData<double> voltageLevels, double? currentLimitRange = null, double? apertureTime = null, double? settlingTime = null) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. voltageLevels PinSiteData<double> The voltage levels for all site-pin pairs. currentLimitRange double? The current limit range. apertureTime double? The aperture Time. settlingTime double? The settling time. Remarks Use this method to force different voltage levels for different site-pin pairs. ForceVoltage(DigitalSessionsBundle, IDictionary<string, PPMUSettings>) Forces voltage on the target pin(s). public static void ForceVoltage(this DigitalSessionsBundle sessionsBundle, IDictionary<string, PPMUSettings> settings) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. settings IDictionary<string, PPMUSettings> The per-pin settings to use."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.Measure.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.Measure.html",
    "title": "Method Measure | Semiconductor Test Library",
    "keywords": "Method Measure Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Measure(DigitalSessionInformation, MeasurementType) Measures on digital devices. public static double[] Measure(this DigitalSessionInformation sessionInfo, MeasurementType measurementType) Parameters sessionInfo DigitalSessionInformation The DigitalSessionInformation object. measurementType MeasurementType The type of the measurement, could be either voltage or current. Returns double[] The measurements."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.MeasureAndPublishCurrent.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.MeasureAndPublishCurrent.html",
    "title": "Method MeasureAndPublishCurrent | Semiconductor Test Library",
    "keywords": "Method MeasureAndPublishCurrent Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MeasureAndPublishCurrent(DigitalSessionsBundle, string, out double[][]) Measures the current on the target pin(s) and immediately publishes the results using the publishedDataId passed in. public static void MeasureAndPublishCurrent(this DigitalSessionsBundle sessionsBundle, string publishedDataId, out double[][] currentMeasurements) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. publishedDataId string The unique data id to be used when publishing. currentMeasurements double[][] The returned current measurements. Remarks Use this method to save test time if the measurement results are not needed for any other operations. Otherwise, use the override for this method that returns PinSiteData. MeasureAndPublishCurrent(DigitalSessionsBundle, string) Measures the current on the target pin(s) and immediately publishes the results using the publishedDataId passed in. public static PinSiteData<double> MeasureAndPublishCurrent(this DigitalSessionsBundle sessionsBundle, string publishedDataId) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. publishedDataId string The unique data id to use when publishing. Returns PinSiteData<double> The pin-site aware current measurements."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.MeasureAndPublishVoltage.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.MeasureAndPublishVoltage.html",
    "title": "Method MeasureAndPublishVoltage | Semiconductor Test Library",
    "keywords": "Method MeasureAndPublishVoltage Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MeasureAndPublishVoltage(DigitalSessionsBundle, string, out double[][]) Measures the voltage on the target pin(s) and immediately publishes the results using the publishedDataId passed in. public static void MeasureAndPublishVoltage(this DigitalSessionsBundle sessionsBundle, string publishedDataId, out double[][] voltageMeasurements) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. publishedDataId string The unique data id to use when publishing. voltageMeasurements double[][] The returned voltage measurements. Remarks Use this method to save test time if the measurement results are not needed for any other operations. Otherwise, use the override for this method that returns PinSiteData. MeasureAndPublishVoltage(DigitalSessionsBundle, string) Measures the voltage on the target pin(s) and immediately publishes the results using the publishedDataId passed in. public static PinSiteData<double> MeasureAndPublishVoltage(this DigitalSessionsBundle sessionsBundle, string publishedDataId) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. publishedDataId string The unique data id to use when publishing. Returns PinSiteData<double> The pin-site aware voltage measurements."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.MeasureAndReturnPerInstrumentPerChannelResults.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.MeasureAndReturnPerInstrumentPerChannelResults.html",
    "title": "Method MeasureAndReturnPerInstrumentPerChannelResults | Semiconductor Test Library",
    "keywords": "Method MeasureAndReturnPerInstrumentPerChannelResults Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MeasureAndReturnPerInstrumentPerChannelResults(DigitalSessionsBundle, MeasurementType) Measures and returns per-instrument per-channel results. public static double[][] MeasureAndReturnPerInstrumentPerChannelResults(this DigitalSessionsBundle sessionsBundle, MeasurementType measurementType) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. measurementType MeasurementType The type of the measurement, could be either voltage or current. Returns double[][] The measurements in per-instrument per-channel format."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.MeasureCurrent.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.MeasureCurrent.html",
    "title": "Method MeasureCurrent | Semiconductor Test Library",
    "keywords": "Method MeasureCurrent Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MeasureCurrent(DigitalSessionsBundle) Measures the current on the target pin(s) and returns a pin- and site-aware data object. public static PinSiteData<double> MeasureCurrent(this DigitalSessionsBundle sessionsBundle) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. Returns PinSiteData<double> The current measurements."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.MeasureVoltage.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.MeasureVoltage.html",
    "title": "Method MeasureVoltage | Semiconductor Test Library",
    "keywords": "Method MeasureVoltage Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll MeasureVoltage(DigitalSessionsBundle) Measures the voltage on the target pin(s) and returns a pin- and site-aware data object. public static PinSiteData<double> MeasureVoltage(this DigitalSessionsBundle sessionsBundle) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. Returns PinSiteData<double> The voltage measurements."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.SelectDigital.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.SelectDigital.html",
    "title": "Method SelectDigital | Semiconductor Test Library",
    "keywords": "Method SelectDigital Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll SelectDigital(DigitalSessionsBundle, double?) Sets the Selected Function mode to Digital, such that the pattern sequencer controls the specified pin(s). public static void SelectDigital(this DigitalSessionsBundle sessionsBundle, double? settlingTimeInSeconds = null) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. settlingTimeInSeconds double? The settling time in seconds. Passing a Null value (default) bypasses the wait operation (No-op). Remarks Remarks: If a pattern is being bursted, the pin immediately switches to bursting the pattern. The PPMU stops sourcing and turns off when the Digital function is selected. Despite this, you can still make voltage measurements. Internally within the instrument the pin electrics are now connected to the driver, comparator, and active load functions. The state of the digital pin driver when you change the selected function to Digital is determined by the most recent call to WriteStatic or the last vector of the most recently bursted pattern, whichever is latter. Example: DigitalSessionsBundle myDutPin = new TSMSessionManager().Digital(\"MyDutPin\"); myDutPin.SelectDigital();"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.SelectPPMU.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.SelectPPMU.html",
    "title": "Method SelectPPMU | Semiconductor Test Library",
    "keywords": "Method SelectPPMU Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll SelectPPMU(DigitalSessionsBundle, double?) Sets the Selected Function mode to PPMU, such that the PPMU controls the specified pin(s) and connects the PPMU. The pin driver is in a non-drive state, and the active load is disabled. public static void SelectPPMU(this DigitalSessionsBundle sessionsBundle, double? settlingTimeInSeconds = null) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. settlingTimeInSeconds double? The settling time in seconds. Passing a Null value (default) bypasses the wait operation (No-op). Remarks Remarks: The PPMU does not start sourcing or measuring until ForceVoltage(), ForceCurrent(), MeasureVoltage(), or MeasureCurrent() is called. The driver, comparator, and active load are off while this function is selected. If you change the Selected Function mode to PPMU using this method, the PPMU is initially not sourcing. Note: you can make PPMU voltage measurements calling MeasureVoltage or MeasureCurrent from within any selected function. Example: DigitalSessionsBundle myDutPin = new TSMSessionManager().Digital(\"MyDutPin\"); myDutPin.SelectPPMU();"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.TurnOffOutput.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.TurnOffOutput.html",
    "title": "Method TurnOffOutput | Semiconductor Test Library",
    "keywords": "Method TurnOffOutput Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll TurnOffOutput(DigitalSessionsBundle, double?) Sets the Selected Function mode to Off to put the digital driver into a non-drive state, disables the active load, disconnects the PPMU, and closes the I/O switch connecting the instrument channel. public static void TurnOffOutput(this DigitalSessionsBundle sessionsBundle, double? settlingTimeInSeconds = null) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. settlingTimeInSeconds double? The settling time in seconds. Null means immediately turning off operation to settle. Remarks Note that the output channel is still physically connected after calling this method. To physically disconnect the output channel, call DisconnectOutput() method. Example: DigitalSessionsBundle myDutPin = new TSMSessionManager().Digital(\"MyDutPin\"); myDutPin.TurnOffOutput(settlingTimeInSeconds: 0.1);"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMU.html",
    "title": "Class PPMU | Semiconductor Test Library",
    "keywords": "Class PPMU Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines methods for PPMU measurements. public static class PPMU Inheritance object PPMU Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ConfigureApertureTime(DigitalSessionsBundle, double) Configures the aperture time for the PPMU measurement. DisconnectOutput(DigitalSessionsBundle, double?) The pin is electrically disconnected from instrument functions. Force(NIDigital, string, PPMUSettings) Forces on digital devices. ForceCurrent(DigitalSessionsBundle, IDictionary<string, PPMUSettings>) Forces current on the target pin(s). ForceCurrent(DigitalSessionsBundle, double, double?, double?, double?, double?, double?) Forces current on the target pin(s) at the specified level. You must provide a current level value, and the method will assume all other properties that have been previously set. Optionally, you can also provide a specific voltage limit and current level range values directly. ForceVoltage(DigitalSessionsBundle, PinSiteData<double>, double?, double?, double?) Forces voltage on the target pin(s) at the specified level. You must provide the voltage level values, and the method will assume all other properties that have been previously set. Optionally, you can also provide a specific current limit, current limit range, and voltage level range values directly. ForceVoltage(DigitalSessionsBundle, SiteData<double>, double?, double?, double?) Forces voltage on the target pin(s) at the specified level. You must provide the voltage level values, and the method will assume all other properties that have been previously set. Optionally, you can also provide a specific current limit, current limit range, and voltage level range values directly. ForceVoltage(DigitalSessionsBundle, IDictionary<string, PPMUSettings>) Forces voltage on the target pin(s). ForceVoltage(DigitalSessionsBundle, double, double?, double?, double?) Forces voltage on the target pin(s) at the specified level. You must provide the voltage level value, and the method will assume all other properties that have been previously set. Optionally, you can also provide a specific current limit, current limit range, and voltage level range values directly. Measure(DigitalSessionInformation, MeasurementType) Measures on digital devices. MeasureAndPublishCurrent(DigitalSessionsBundle, string) Measures the current on the target pin(s) and immediately publishes the results using the publishedDataId passed in. MeasureAndPublishCurrent(DigitalSessionsBundle, string, out double[][]) Measures the current on the target pin(s) and immediately publishes the results using the publishedDataId passed in. MeasureAndPublishVoltage(DigitalSessionsBundle, string) Measures the voltage on the target pin(s) and immediately publishes the results using the publishedDataId passed in. MeasureAndPublishVoltage(DigitalSessionsBundle, string, out double[][]) Measures the voltage on the target pin(s) and immediately publishes the results using the publishedDataId passed in. MeasureAndReturnPerInstrumentPerChannelResults(DigitalSessionsBundle, MeasurementType) Measures and returns per-instrument per-channel results. MeasureCurrent(DigitalSessionsBundle) Measures the current on the target pin(s) and returns a pin- and site-aware data object. MeasureVoltage(DigitalSessionsBundle) Measures the voltage on the target pin(s) and returns a pin- and site-aware data object. SelectDigital(DigitalSessionsBundle, double?) Sets the Selected Function mode to Digital, such that the pattern sequencer controls the specified pin(s). SelectPPMU(DigitalSessionsBundle, double?) Sets the Selected Function mode to PPMU, such that the PPMU controls the specified pin(s) and connects the PPMU. The pin driver is in a non-drive state, and the active load is disabled. TurnOffOutput(DigitalSessionsBundle, double?) Sets the Selected Function mode to Off to put the digital driver into a non-drive state, disables the active load, disconnects the PPMU, and closes the I/O switch connecting the instrument channel."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.-ctor.html",
    "title": "Constructor PPMUSettings | Semiconductor Test Library",
    "keywords": "Constructor PPMUSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll PPMUSettings() Default constructor. public PPMUSettings()"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.ApertureTime.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.ApertureTime.html",
    "title": "Property ApertureTime | Semiconductor Test Library",
    "keywords": "Property ApertureTime Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ApertureTime The aperture time. Null value will be ignored. public double? ApertureTime { get; set; } Property Value double?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.CurrentLevel.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.CurrentLevel.html",
    "title": "Property CurrentLevel | Semiconductor Test Library",
    "keywords": "Property CurrentLevel Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll CurrentLevel The current level when forcing current. public double CurrentLevel { get; set; } Property Value double"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.CurrentLevelRange.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.CurrentLevelRange.html",
    "title": "Property CurrentLevelRange | Semiconductor Test Library",
    "keywords": "Property CurrentLevelRange Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll CurrentLevelRange The current level range when forcing current. Null value will be ignored. public double? CurrentLevelRange { get; set; } Property Value double?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.CurrentLimitRange.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.CurrentLimitRange.html",
    "title": "Property CurrentLimitRange | Semiconductor Test Library",
    "keywords": "Property CurrentLimitRange Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll CurrentLimitRange The current limit range when forcing voltage. public double? CurrentLimitRange { get; set; } Property Value double?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.OutputFunction.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.OutputFunction.html",
    "title": "Property OutputFunction | Semiconductor Test Library",
    "keywords": "Property OutputFunction Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll OutputFunction The output function. public PpmuOutputFunction OutputFunction { get; set; } Property Value PpmuOutputFunction"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.SettlingTime.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.SettlingTime.html",
    "title": "Property SettlingTime | Semiconductor Test Library",
    "keywords": "Property SettlingTime Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll SettlingTime The settling time. Null value will be ignored. public double? SettlingTime { get; set; } Property Value double?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.VoltageLevel.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.VoltageLevel.html",
    "title": "Property VoltageLevel | Semiconductor Test Library",
    "keywords": "Property VoltageLevel Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll VoltageLevel The voltage level when forcing voltage. public double VoltageLevel { get; set; } Property Value double"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.VoltageLimitHigh.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.VoltageLimitHigh.html",
    "title": "Property VoltageLimitHigh | Semiconductor Test Library",
    "keywords": "Property VoltageLimitHigh Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll VoltageLimitHigh The high voltage limit when forcing current. Null value will be ignored. public double? VoltageLimitHigh { get; set; } Property Value double?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.VoltageLimitLow.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.VoltageLimitLow.html",
    "title": "Property VoltageLimitLow | Semiconductor Test Library",
    "keywords": "Property VoltageLimitLow Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll VoltageLimitLow The low voltage limit when forcing current. Null value will be ignored. public double? VoltageLimitLow { get; set; } Property Value double?"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.PPMUSettings.html",
    "title": "Class PPMUSettings | Semiconductor Test Library",
    "keywords": "Class PPMUSettings Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines settings for PPMU. public class PPMUSettings Inheritance object PPMUSettings Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors PPMUSettings() Default constructor. Properties ApertureTime The aperture time. Null value will be ignored. CurrentLevel The current level when forcing current. CurrentLevelRange The current level range when forcing current. Null value will be ignored. CurrentLimitRange The current limit range when forcing voltage. OutputFunction The output function. SettlingTime The settling time. Null value will be ignored. VoltageLevel The voltage level when forcing voltage. VoltageLimitHigh The high voltage limit when forcing current. Null value will be ignored. VoltageLimitLow The low voltage limit when forcing current. Null value will be ignored."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.Pattern.AbortKeepAlivePattern.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.Pattern.AbortKeepAlivePattern.html",
    "title": "Method AbortKeepAlivePattern | Semiconductor Test Library",
    "keywords": "Method AbortKeepAlivePattern Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll AbortKeepAlivePattern(DigitalSessionsBundle) Stops the keep alive pattern if it is currently running. public static void AbortKeepAlivePattern(this DigitalSessionsBundle sessionsBundle) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.Pattern.AbortPattern.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.Pattern.AbortPattern.html",
    "title": "Method AbortPattern | Semiconductor Test Library",
    "keywords": "Method AbortPattern Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll AbortPattern(DigitalSessionsBundle) Stops bursting the pattern. public static void AbortPattern(this DigitalSessionsBundle sessionsBundle) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.Pattern.BurstPattern.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.Pattern.BurstPattern.html",
    "title": "Method BurstPattern | Semiconductor Test Library",
    "keywords": "Method BurstPattern Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll BurstPattern(DigitalSessionsBundle, string, bool, bool, double) Bursts a digital pattern. public static void BurstPattern(this DigitalSessionsBundle sessionsBundle, string startLabel, bool selectDigitalFunction = true, bool waitUntilDone = true, double timeoutInSeconds = 5) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. startLabel string The pattern name or exported pattern label from which to start bursting the pattern. selectDigitalFunction bool Whether to set selected function to digital. waitUntilDone bool Whether to wait for pattern burst to complete. timeoutInSeconds double The maximum time interval allowed for the pattern burst to complete."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.Pattern.BurstPatternAndPublishResults.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.Pattern.BurstPatternAndPublishResults.html",
    "title": "Method BurstPatternAndPublishResults | Semiconductor Test Library",
    "keywords": "Method BurstPatternAndPublishResults Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll BurstPatternAndPublishResults(DigitalSessionsBundle, string, bool, double, string) Bursts a digital pattern and publishes pass/fail comparison results. public static bool[][] BurstPatternAndPublishResults(this DigitalSessionsBundle sessionsBundle, string startLabel, bool selectDigitalFunction = true, double timeoutInSeconds = 5, string publishedDataId = \"\") Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. startLabel string The pattern name or exported pattern label from which to start bursting the pattern. selectDigitalFunction bool Whether to set selected function to digital. timeoutInSeconds double The maximum time interval allowed for the pattern burst to complete. publishedDataId string The unique data id to be used when publishing. Returns bool[][] The pass/fail comparison results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.Pattern.BurstPatternSynchronized.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.Pattern.BurstPatternSynchronized.html",
    "title": "Method BurstPatternSynchronized | Semiconductor Test Library",
    "keywords": "Method BurstPatternSynchronized Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll BurstPatternSynchronized(DigitalSessionsBundle, string, bool, bool, double) Starts a pattern burst on digital pattern instruments that you have previously synchronized using NI-TClk. public static void BurstPatternSynchronized(this DigitalSessionsBundle sessionsBundle, string startLabel, bool selectDigitalFunction = true, bool waitUntilDone = true, double timeoutInSeconds = 5) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. startLabel string The pattern name or exported pattern label from which to start bursting the pattern. selectDigitalFunction bool Whether to set selected function to digital. waitUntilDone bool Whether to wait for pattern burst to complete. timeoutInSeconds double The maximum time interval allowed for the pattern burst to complete."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.Pattern.GetFailCount.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.Pattern.GetFailCount.html",
    "title": "Method GetFailCount | Semiconductor Test Library",
    "keywords": "Method GetFailCount Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll GetFailCount(DigitalSessionsBundle) Gets fail count on a per-pin per-site basis of last burst pattern (long). public static PinSiteData<long> GetFailCount(this DigitalSessionsBundle sessionsBundle) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. Returns PinSiteData<long> The per-site per-pin fail count."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.Pattern.GetSitePassFail.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.Pattern.GetSitePassFail.html",
    "title": "Method GetSitePassFail | Semiconductor Test Library",
    "keywords": "Method GetSitePassFail Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll GetSitePassFail(DigitalSessionsBundle) Gets the per-site pass/fail comparison results of last burst pattern (long) as a SiteData object of type Bool. public static SiteData<bool> GetSitePassFail(this DigitalSessionsBundle sessionsBundle) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. Returns SiteData<bool> The per-site pass/fail comparison results."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.Pattern.WaitUntilDone.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.Pattern.WaitUntilDone.html",
    "title": "Method WaitUntilDone | Semiconductor Test Library",
    "keywords": "Method WaitUntilDone Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll WaitUntilDone(DigitalSessionsBundle, double) Waits until the pattern burst is complete. This method is a blocking call, but will timeout after the specified time. public static void WaitUntilDone(this DigitalSessionsBundle sessionsBundle, double timeoutInSeconds = 10) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. timeoutInSeconds double Timeout in seconds for which to abort this wait operation. Exceptions ArgumentException The value for timeoutInSeconds is invalid. MaxTimeExceededException The pattern burst takes longer than the specified timeoutInSeconds."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.Pattern.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.Pattern.html",
    "title": "Class Pattern | Semiconductor Test Library",
    "keywords": "Class Pattern Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines methods to deal with digital patterns. public static class Pattern Inheritance object Pattern Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AbortKeepAlivePattern(DigitalSessionsBundle) Stops the keep alive pattern if it is currently running. AbortPattern(DigitalSessionsBundle) Stops bursting the pattern. BurstPattern(DigitalSessionsBundle, string, bool, bool, double) Bursts a digital pattern. BurstPatternAndPublishResults(DigitalSessionsBundle, string, bool, double, string) Bursts a digital pattern and publishes pass/fail comparison results. BurstPatternSynchronized(DigitalSessionsBundle, string, bool, bool, double) Starts a pattern burst on digital pattern instruments that you have previously synchronized using NI-TClk. GetFailCount(DigitalSessionsBundle) Gets fail count on a per-pin per-site basis of last burst pattern (long). GetSitePassFail(DigitalSessionsBundle) Gets the per-site pass/fail comparison results of last burst pattern (long) as a SiteData object of type Bool. WaitUntilDone(DigitalSessionsBundle, double) Waits until the pattern burst is complete. This method is a blocking call, but will timeout after the specified time."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SequencerFlagsAndRegisters.ReadSequencerFlag.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SequencerFlagsAndRegisters.ReadSequencerFlag.html",
    "title": "Method ReadSequencerFlag | Semiconductor Test Library",
    "keywords": "Method ReadSequencerFlag Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ReadSequencerFlag(DigitalSessionsBundle, string) Reads the Boolean value of a pattern sequencer flag. public static bool[] ReadSequencerFlag(this DigitalSessionsBundle sessionsBundle, string flag) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. flag string The name of the pattern sequencer flag to read. Possible values include \"seqflag0\", \"seqflag1\", \"seqflag2\", or \"seqflag3\". Returns bool[] An array of the states for the specified pattern sequencer flag, one state value per session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SequencerFlagsAndRegisters.ReadSequencerFlagDistinct.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SequencerFlagsAndRegisters.ReadSequencerFlagDistinct.html",
    "title": "Method ReadSequencerFlagDistinct | Semiconductor Test Library",
    "keywords": "Method ReadSequencerFlagDistinct Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ReadSequencerFlagDistinct(DigitalSessionsBundle, string) Reads the Boolean state of a pattern sequencer flag. public static bool ReadSequencerFlagDistinct(this DigitalSessionsBundle sessionsBundle, string flag) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. flag string The name of the pattern sequencer flag to read. Possible values include \"seqflag0\", \"seqflag1\", \"seqflag2\", or \"seqflag3\". Returns bool An array of the states for the specified pattern sequencer flag, one state value per session. Remarks This method is the same as ReadSequencerFlag(DigitalSessionsBundle, string), except it also checks to confirm if the flag state is the same across all sessions in the bundle. If the states are the same, it will return the single boolean state value. Otherwise, it will throw an exception. Exceptions NISemiconductorTestException The state of the sequence flag is not the same between instrument sessions."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SequencerFlagsAndRegisters.ReadSequencerRegister.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SequencerFlagsAndRegisters.ReadSequencerRegister.html",
    "title": "Method ReadSequencerRegister | Semiconductor Test Library",
    "keywords": "Method ReadSequencerRegister Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ReadSequencerRegister(DigitalSessionsBundle, string) Reads the numeric state of a pattern sequencer register. public static int[] ReadSequencerRegister(this DigitalSessionsBundle sessionsBundle, string registerName) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. registerName string Specifies pattern sequencer register to read. Possible values include \"reg0\" through \"reg15\". Returns int[] An array of the values for the specified pattern sequencer register, one integer value per session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SequencerFlagsAndRegisters.ReadSequencerRegisterDistinct.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SequencerFlagsAndRegisters.ReadSequencerRegisterDistinct.html",
    "title": "Method ReadSequencerRegisterDistinct | Semiconductor Test Library",
    "keywords": "Method ReadSequencerRegisterDistinct Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ReadSequencerRegisterDistinct(DigitalSessionsBundle, string) Reads the numeric state of a pattern sequencer flag. public static int ReadSequencerRegisterDistinct(this DigitalSessionsBundle sessionsBundle, string registerName) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. registerName string Specifies pattern sequencer register to read. Possible values include \"reg0\" through \"reg15\". Returns int An single int value for the specified pattern sequencer register. Remarks This method is the same as ReadSequencerRegister(DigitalSessionsBundle, string), except it also checks to confirm if the register values are the same across all sessions in the bundle. If the states are indeed the same, it will return the single integer value. Otherwise, it will throw an exception. Exceptions NISemiconductorTestException The state of the sequence register is not the same between instrument sessions."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SequencerFlagsAndRegisters.WriteSequencerFlag.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SequencerFlagsAndRegisters.WriteSequencerFlag.html",
    "title": "Method WriteSequencerFlag | Semiconductor Test Library",
    "keywords": "Method WriteSequencerFlag Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll WriteSequencerFlag(DigitalSessionsBundle, string, bool) Writes a Boolean state of a pattern sequencer flag. public static void WriteSequencerFlag(this DigitalSessionsBundle sessionsBundle, string flag, bool value) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. flag string The name of the pattern sequencer flag to read. Possible values include \"seqflag0\", \"seqflag1\", \"seqflag2\", or \"seqflag3\". value bool The value to assign to the specified pattern sequencer flag."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SequencerFlagsAndRegisters.WriteSequencerFlagSynchronized.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SequencerFlagsAndRegisters.WriteSequencerFlagSynchronized.html",
    "title": "Method WriteSequencerFlagSynchronized | Semiconductor Test Library",
    "keywords": "Method WriteSequencerFlagSynchronized Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll WriteSequencerFlagSynchronized(DigitalSessionsBundle, string, bool) Writes a Boolean state to a specified pattern sequencer flag for synchronized instruments. public static void WriteSequencerFlagSynchronized(this DigitalSessionsBundle sessionsBundle, string flag, bool value) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. flag string The name of the pattern sequencer flag to read. Possible values include \"seqflag0\", \"seqflag1\", \"seqflag2\", or \"seqflag3\". value bool The value to assign to the specified pattern sequencer flag."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SequencerFlagsAndRegisters.WriteSequencerRegister.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SequencerFlagsAndRegisters.WriteSequencerRegister.html",
    "title": "Method WriteSequencerRegister | Semiconductor Test Library",
    "keywords": "Method WriteSequencerRegister Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll WriteSequencerRegister(DigitalSessionsBundle, string, int) Writes a value to a pattern sequencer register. public static void WriteSequencerRegister(this DigitalSessionsBundle sessionsBundle, string register, int value) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. register string Specifies the sequencer register to which you would like to write the specified value. Possible values include \"reg0\" through \"reg15\". value int The value to write to the specified pattern sequence register."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SequencerFlagsAndRegisters.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SequencerFlagsAndRegisters.html",
    "title": "Class SequencerFlagsAndRegisters | Semiconductor Test Library",
    "keywords": "Class SequencerFlagsAndRegisters Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines methods to deal with digital pattern sequencer flags and registers. public static class SequencerFlagsAndRegisters Inheritance object SequencerFlagsAndRegisters Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ReadSequencerFlag(DigitalSessionsBundle, string) Reads the Boolean value of a pattern sequencer flag. ReadSequencerFlagDistinct(DigitalSessionsBundle, string) Reads the Boolean state of a pattern sequencer flag. ReadSequencerRegister(DigitalSessionsBundle, string) Reads the numeric state of a pattern sequencer register. ReadSequencerRegisterDistinct(DigitalSessionsBundle, string) Reads the numeric state of a pattern sequencer flag. WriteSequencerFlag(DigitalSessionsBundle, string, bool) Writes a Boolean state of a pattern sequencer flag. WriteSequencerFlagSynchronized(DigitalSessionsBundle, string, bool) Writes a Boolean state to a specified pattern sequencer flag for synchronized instruments. WriteSequencerRegister(DigitalSessionsBundle, string, int) Writes a value to a pattern sequencer register."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SourceAndCapture.CreateParallelCaptureWaveform.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SourceAndCapture.CreateParallelCaptureWaveform.html",
    "title": "Method CreateParallelCaptureWaveform | Semiconductor Test Library",
    "keywords": "Method CreateParallelCaptureWaveform Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll CreateParallelCaptureWaveform(DigitalSessionsBundle, string) Creates the capture waveform settings for parallel acquisition. Settings apply across all sites if multiple sites are configured in the pin map. You cannot reconfigure settings after waveforms are created. public static void CreateParallelCaptureWaveform(this DigitalSessionsBundle sessionsBundle, string waveformName) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. waveformName string The name of the capture waveform. CreateParallelCaptureWaveform(DigitalSessionsBundle, string, string) Creates the capture waveform settings for parallel acquisition. Settings apply across all sites if multiple sites are configured in the pin map. You cannot reconfigure settings after waveforms are created. public static void CreateParallelCaptureWaveform(this DigitalSessionsBundle sessionsBundle, string pin, string waveformName) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. pin string The pin for which to create the capture waveform. waveformName string The name of the capture waveform. CreateParallelCaptureWaveform(DigitalSessionsBundle, string[], string) Creates the capture waveform settings for parallel acquisition. Settings apply across all sites if multiple sites are configured in the pin map. You cannot reconfigure settings after waveforms are created. public static void CreateParallelCaptureWaveform(this DigitalSessionsBundle sessionsBundle, string[] pins, string waveformName) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. pins string[] The pins for which to create the capture waveform. waveformName string The name of the capture waveform."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SourceAndCapture.CreateParallelSourceWaveform.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SourceAndCapture.CreateParallelSourceWaveform.html",
    "title": "Method CreateParallelSourceWaveform | Semiconductor Test Library",
    "keywords": "Method CreateParallelSourceWaveform Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll CreateParallelSourceWaveform(DigitalSessionsBundle, string[], string, SourceDataMapping) Creates source waveform settings required for serial sourcing. Settings apply across all sites if multiple sites are configured in the pin map. You cannot reconfigure settings after waveforms are created. public static void CreateParallelSourceWaveform(this DigitalSessionsBundle sessionsBundle, string[] pins, string waveformName, SourceDataMapping sourceDataMapping) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. pins string[] The pins for which to source the source waveform. waveformName string The name of the source waveform. sourceDataMapping SourceDataMapping The source data mapping: NationalInstruments.ModularInstruments.NIDigital.SourceDataMapping.Broadcast or NationalInstruments.ModularInstruments.NIDigital.SourceDataMapping.SiteUnique Exceptions IviCDriverException The NI-Digital Pattern Driver returned an error. SelectorNameException The pinSet contains a pin or pin group name not loaded in the pin map. InvalidOperationException The pinSet contains a system pin ArgumentException The value for waveformName is an empty string or contains an invalid character. OutOfRangeException The number of waveforms in capture memory exceeds the maximum number of waveforms allowed."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SourceAndCapture.CreateSerialCaptureWaveform.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SourceAndCapture.CreateSerialCaptureWaveform.html",
    "title": "Method CreateSerialCaptureWaveform | Semiconductor Test Library",
    "keywords": "Method CreateSerialCaptureWaveform Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll CreateSerialCaptureWaveform(DigitalSessionsBundle, string, uint, BitOrder) Creates capture waveform settings for serial acquisition. Settings apply across all sites if multiple sites are configured in the pin map. You cannot reconfigure settings after waveforms are created. public static void CreateSerialCaptureWaveform(this DigitalSessionsBundle sessionsBundle, string waveformName, uint sampleWidth, BitOrder bitOrder = BitOrder.MostSignificantBitFirst) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. waveformName string The name of the capture waveform. sampleWidth uint The width in bits of each serial sample. The value must be between 1 and 32. bitOrder BitOrder The bit order significance. Remarks The number of waveforms is limited to 512. CreateSerialCaptureWaveform(DigitalSessionsBundle, string, string, uint, BitOrder) Creates capture waveform settings for serial acquisition. Settings apply across all sites if multiple sites are configured in the pin map. You cannot reconfigure settings after waveforms are created. public static void CreateSerialCaptureWaveform(this DigitalSessionsBundle sessionsBundle, string pin, string waveformName, uint sampleWidth, BitOrder bitOrder = BitOrder.MostSignificantBitFirst) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. pin string The pin for which to create the capture waveform. waveformName string The name of the capture waveform. sampleWidth uint The width in bits of each serial sample. The value must be between 1 and 32. bitOrder BitOrder The bit order significance. Remarks The number of waveforms is limited to 512."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SourceAndCapture.CreateSerialSourceWaveform.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SourceAndCapture.CreateSerialSourceWaveform.html",
    "title": "Method CreateSerialSourceWaveform | Semiconductor Test Library",
    "keywords": "Method CreateSerialSourceWaveform Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll CreateSerialSourceWaveform(DigitalSessionsBundle, string, SourceDataMapping, uint, BitOrder) Creates source waveform settings required for serial sourcing. Settings apply across all sites if multiple sites are configured in the pin map. You cannot reconfigure settings after waveforms are created. public static void CreateSerialSourceWaveform(this DigitalSessionsBundle sessionsBundle, string waveformName, SourceDataMapping dataMapping, uint sampleWidth, BitOrder bitOrder) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. waveformName string The name of the source waveform. dataMapping SourceDataMapping Specifies whether the waveform is broadcasted to all sites or a unique waveform is sourced per site. sampleWidth uint The width in bits of each serial sample. The value must be between 1 and 32. bitOrder BitOrder The bit order significance. CreateSerialSourceWaveform(DigitalSessionsBundle, string, string, SourceDataMapping, uint, BitOrder) Creates source waveform settings required for serial sourcing. Settings apply across all sites if multiple sites are configured in the pin map. You cannot reconfigure settings after waveforms are created. public static void CreateSerialSourceWaveform(this DigitalSessionsBundle sessionsBundle, string pin, string waveformName, SourceDataMapping dataMapping, uint sampleWidth, BitOrder bitOrder) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. pin string The pin for which to create the source waveform. waveformName string The name of the source waveform. dataMapping SourceDataMapping Specifies whether the waveform is broadcasted to all sites or a unique waveform is sourced per site. sampleWidth uint The width in bits of each serial sample. The value must be between 1 and 32. bitOrder BitOrder The bit order significance."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SourceAndCapture.FetchCaptureWaveform.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SourceAndCapture.FetchCaptureWaveform.html",
    "title": "Method FetchCaptureWaveform | Semiconductor Test Library",
    "keywords": "Method FetchCaptureWaveform Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll FetchCaptureWaveform(DigitalSessionsBundle, string, int, double) Fetches the capture waveform and returns a pin- and site-aware object of uint values. public static SiteData<uint[]> FetchCaptureWaveform(this DigitalSessionsBundle sessionsBundle, string waveformName, int samplesToRead, double timeoutInSeconds = 5) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. waveformName string The name of the capture waveform. samplesToRead int The number of samples to read. timeoutInSeconds double The maximum time to read for waveform samples. Returns SiteData<uint[]> The captured data."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SourceAndCapture.WriteSourceWaveformBroadcast.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SourceAndCapture.WriteSourceWaveformBroadcast.html",
    "title": "Method WriteSourceWaveformBroadcast | Semiconductor Test Library",
    "keywords": "Method WriteSourceWaveformBroadcast Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll WriteSourceWaveformBroadcast(DigitalSessionsBundle, string, uint[], bool, int) Writes source waveform. Use this method to write the same waveform data to all sites. public static void WriteSourceWaveformBroadcast(this DigitalSessionsBundle sessionsBundle, string waveformName, uint[] waveformData, bool expandToMinimumSize = false, int minimumSize = 128) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. waveformName string The name of the source waveform. waveformData uint[] The waveform data. expandToMinimumSize bool Whether to make the size of the waveform data at least a specified value. minimumSize int The minimum size of the waveform data."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SourceAndCapture.WriteSourceWaveformSiteUnique.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SourceAndCapture.WriteSourceWaveformSiteUnique.html",
    "title": "Method WriteSourceWaveformSiteUnique | Semiconductor Test Library",
    "keywords": "Method WriteSourceWaveformSiteUnique Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll WriteSourceWaveformSiteUnique(DigitalSessionsBundle, string, SiteData<uint[]>, bool, int) Writes source waveform. Use this method to write different waveform data to different sites. public static void WriteSourceWaveformSiteUnique(this DigitalSessionsBundle sessionsBundle, string waveformName, SiteData<uint[]> perSiteWaveformData, bool expandToMinimumSize = false, int minimumSize = 128) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. waveformName string The name of the source waveform. perSiteWaveformData SiteData<uint[]> The per-site waveform data. expandToMinimumSize bool Whether to make the size of the waveform data at least a specified value. minimumSize int The minimum size of the waveform data. Remarks This method takes per-site source waveform."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SourceAndCapture.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.SourceAndCapture.html",
    "title": "Class SourceAndCapture | Semiconductor Test Library",
    "keywords": "Class SourceAndCapture Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines methods for sourcing and capturing waveforms. public static class SourceAndCapture Inheritance object SourceAndCapture Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateParallelCaptureWaveform(DigitalSessionsBundle, string) Creates the capture waveform settings for parallel acquisition. Settings apply across all sites if multiple sites are configured in the pin map. You cannot reconfigure settings after waveforms are created. CreateParallelCaptureWaveform(DigitalSessionsBundle, string, string) Creates the capture waveform settings for parallel acquisition. Settings apply across all sites if multiple sites are configured in the pin map. You cannot reconfigure settings after waveforms are created. CreateParallelCaptureWaveform(DigitalSessionsBundle, string[], string) Creates the capture waveform settings for parallel acquisition. Settings apply across all sites if multiple sites are configured in the pin map. You cannot reconfigure settings after waveforms are created. CreateParallelSourceWaveform(DigitalSessionsBundle, string[], string, SourceDataMapping) Creates source waveform settings required for serial sourcing. Settings apply across all sites if multiple sites are configured in the pin map. You cannot reconfigure settings after waveforms are created. CreateSerialCaptureWaveform(DigitalSessionsBundle, string, string, uint, BitOrder) Creates capture waveform settings for serial acquisition. Settings apply across all sites if multiple sites are configured in the pin map. You cannot reconfigure settings after waveforms are created. CreateSerialCaptureWaveform(DigitalSessionsBundle, string, uint, BitOrder) Creates capture waveform settings for serial acquisition. Settings apply across all sites if multiple sites are configured in the pin map. You cannot reconfigure settings after waveforms are created. CreateSerialSourceWaveform(DigitalSessionsBundle, string, SourceDataMapping, uint, BitOrder) Creates source waveform settings required for serial sourcing. Settings apply across all sites if multiple sites are configured in the pin map. You cannot reconfigure settings after waveforms are created. CreateSerialSourceWaveform(DigitalSessionsBundle, string, string, SourceDataMapping, uint, BitOrder) Creates source waveform settings required for serial sourcing. Settings apply across all sites if multiple sites are configured in the pin map. You cannot reconfigure settings after waveforms are created. FetchCaptureWaveform(DigitalSessionsBundle, string, int, double) Fetches the capture waveform and returns a pin- and site-aware object of uint values. WriteSourceWaveformBroadcast(DigitalSessionsBundle, string, uint[], bool, int) Writes source waveform. Use this method to write the same waveform data to all sites. WriteSourceWaveformSiteUnique(DigitalSessionsBundle, string, SiteData<uint[]>, bool, int) Writes source waveform. Use this method to write different waveform data to different sites."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.StaticState.ReadStatic.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.StaticState.ReadStatic.html",
    "title": "Method ReadStatic | Semiconductor Test Library",
    "keywords": "Method ReadStatic Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ReadStatic(DigitalSessionsBundle) Reads the current state to target the pin(s) and returns as pin- and site-aware data object. public static PinSiteData<PinState> ReadStatic(this DigitalSessionsBundle sessionsBundle) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. Returns PinSiteData<PinState> The states in per-site per-pin format."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.StaticState.WriteStatic.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.StaticState.WriteStatic.html",
    "title": "Method WriteStatic | Semiconductor Test Library",
    "keywords": "Method WriteStatic Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll WriteStatic(DigitalSessionsBundle, PinState) Writes static state to target the pin(s) that will take effect immediately. public static void WriteStatic(this DigitalSessionsBundle sessionsBundle, PinState state) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. state PinState The state to write. Remarks Use this method to write the same state on all sessions. WriteStatic(DigitalSessionsBundle, SiteData<PinState>) Writes static state to target the pin(s) that will take effect immediately. public static void WriteStatic(this DigitalSessionsBundle sessionsBundle, SiteData<PinState> states) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. states SiteData<PinState> The states to write for all sites. Remarks Use this method to write different states on different sites. WriteStatic(DigitalSessionsBundle, PinSiteData<PinState>) Writes static state to target the pin(s) that will take effect immediately. public static void WriteStatic(this DigitalSessionsBundle sessionsBundle, PinSiteData<PinState> states) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. states PinSiteData<PinState> The states to write for all site-pin pairs. Remarks Use this method to write different states for different site-pin pairs."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.StaticState.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.StaticState.html",
    "title": "Class StaticState | Semiconductor Test Library",
    "keywords": "Class StaticState Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines methods for static state read/write. public static class StaticState Inheritance object StaticState Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ReadStatic(DigitalSessionsBundle) Reads the current state to target the pin(s) and returns as pin- and site-aware data object. WriteStatic(DigitalSessionsBundle, PinState) Writes static state to target the pin(s) that will take effect immediately. WriteStatic(DigitalSessionsBundle, PinSiteData<PinState>) Writes static state to target the pin(s) that will take effect immediately. WriteStatic(DigitalSessionsBundle, SiteData<PinState>) Writes static state to target the pin(s) that will take effect immediately."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.ConfigureConditionalJumpTriggerDigitalEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.ConfigureConditionalJumpTriggerDigitalEdge.html",
    "title": "Method ConfigureConditionalJumpTriggerDigitalEdge | Semiconductor Test Library",
    "keywords": "Method ConfigureConditionalJumpTriggerDigitalEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureConditionalJumpTriggerDigitalEdge(DigitalSessionsBundle, string, int, DigitalEdge) Configures a digital edge trigger for the specified Conditional Jump Trigger. public static void ConfigureConditionalJumpTriggerDigitalEdge(this DigitalSessionsBundle sessionsBundle, string source, int conditionalJumpTriggerId, DigitalEdge digitalEdge = DigitalEdge.Rising) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. source string The source terminal for the start trigger. Possible values include but are not limited to \"PXI_Trig0\", \"PXI_Trig1\", \"PXI_Trig2\", \"PXI_Trig3\", \"PXI_Trig4\", \"PXI_Trig5\", \"PXI_Trig6\", or \"PXI_Trig7\". conditionalJumpTriggerId int The ID of the of ConditionalJumpTrigger to configure. Valid values include: 0, 1, 2, and 3, which all equate to conditionalJumpTrigger0, conditionalJumpTrigger1, conditionalJumpTrigger2, and conditionalJumpTrigger3, respectively. digitalEdge DigitalEdge The edge of the digital signal that should be triggered on: Rising edge (default) or Falling edge. Exceptions OutOfRangeException The value for type is invalid."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.ConfigureConditionalJumpTriggerSoftwareEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.ConfigureConditionalJumpTriggerSoftwareEdge.html",
    "title": "Method ConfigureConditionalJumpTriggerSoftwareEdge | Semiconductor Test Library",
    "keywords": "Method ConfigureConditionalJumpTriggerSoftwareEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureConditionalJumpTriggerSoftwareEdge(DigitalSessionsBundle, int) Configures a software edge trigger for the specified Conditional Jump Trigger. public static void ConfigureConditionalJumpTriggerSoftwareEdge(this DigitalSessionsBundle sessionsBundle, int conditionalJumpTriggerId) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. conditionalJumpTriggerId int The ID of the of ConditionalJumpTrigger to configure. Valid values include: 0, 1, 2, and 3, which all equate to conditionalJumpTrigger0, conditionalJumpTrigger1, conditionalJumpTrigger2, and conditionalJumpTrigger3, respectively."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.ConfigureStartTriggerDigitalEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.ConfigureStartTriggerDigitalEdge.html",
    "title": "Method ConfigureStartTriggerDigitalEdge | Semiconductor Test Library",
    "keywords": "Method ConfigureStartTriggerDigitalEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureStartTriggerDigitalEdge(DigitalSessionsBundle, string, DigitalEdge) Configures a digital edge trigger for the Start Trigger. public static void ConfigureStartTriggerDigitalEdge(this DigitalSessionsBundle sessionsBundle, string source, DigitalEdge digitalEdge = DigitalEdge.Rising) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. source string The source terminal for the start trigger. Possible values include but are not limited to \"PXI_Trig0\", \"PXI_Trig1\", \"PXI_Trig2\", \"PXI_Trig3\", \"PXI_Trig4\", \"PXI_Trig5\", \"PXI_Trig6\", or \"PXI_Trig7\". digitalEdge DigitalEdge The edge of the digital signal that should be triggered on: Rising edge (default) or Falling edge. Exceptions OutOfRangeException The value for type is invalid."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.ConfigureStartTriggerSoftwareEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.ConfigureStartTriggerSoftwareEdge.html",
    "title": "Method ConfigureStartTriggerSoftwareEdge | Semiconductor Test Library",
    "keywords": "Method ConfigureStartTriggerSoftwareEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ConfigureStartTriggerSoftwareEdge(DigitalSessionsBundle) Configures a software edge trigger for the Start Trigger. public static void ConfigureStartTriggerSoftwareEdge(this DigitalSessionsBundle sessionsBundle) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.DisableConditionalJumpTrigger.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.DisableConditionalJumpTrigger.html",
    "title": "Method DisableConditionalJumpTrigger | Semiconductor Test Library",
    "keywords": "Method DisableConditionalJumpTrigger Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll DisableConditionalJumpTrigger(DigitalSessionsBundle, int) Disables the specified ConditionalJumpTrigger by configuring it to None. public static void DisableConditionalJumpTrigger(this DigitalSessionsBundle sessionsBundle, int conditionalJumpTriggerId) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. conditionalJumpTriggerId int The ID of the of ConditionalJumpTrigger to configure. Valid values include: 0, 1, 2, and 3, which all equate to conditionalJumpTrigger0, conditionalJumpTrigger1, conditionalJumpTrigger2, and conditionalJumpTrigger3, respectively."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.DisableConditionalJumpTriggers.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.DisableConditionalJumpTriggers.html",
    "title": "Method DisableConditionalJumpTriggers | Semiconductor Test Library",
    "keywords": "Method DisableConditionalJumpTriggers Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll DisableConditionalJumpTriggers(DigitalSessionsBundle) Disables all ConditionalJumpTriggers by configuring them to None. public static void DisableConditionalJumpTriggers(this DigitalSessionsBundle sessionsBundle) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.DisableStartTrigger.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.DisableStartTrigger.html",
    "title": "Method DisableStartTrigger | Semiconductor Test Library",
    "keywords": "Method DisableStartTrigger Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll DisableStartTrigger(DigitalSessionsBundle) Disables StartTrigger trigger by configuring it to None. public static void DisableStartTrigger(this DigitalSessionsBundle sessionsBundle) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.ExportSignal.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.ExportSignal.html",
    "title": "Method ExportSignal | Semiconductor Test Library",
    "keywords": "Method ExportSignal Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ExportSignal(DigitalSessionsBundle, SignalType, string, string) Routes trigger and event signals to the specified outputTerminal. public static void ExportSignal(this DigitalSessionsBundle sessionsBundle, SignalType signalType, string signalID, string outputTerminal) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. signalType SignalType The type of signal to export. signalID string The instance of the selected signal to export. Possible values include \"patternOpcodeEvent0\", \"patternOpcodeEvent1\", \"patternOpcodeEvent2\", or \"patternOpcodeEvent3\". outputTerminal string The terminal to which to export the signal. Possible values include but are not limited to \"PXI_Trig0\", \"PXI_Trig1\", \"PXI_Trig2\", \"PXI_Trig3\", \"PXI_Trig4\", \"PXI_Trig5\", \"PXI_Trig6\", or \"PXI_Trig7\". Exceptions ArgumentException The value for one or all of the parameters, signalType, signalID, or outputTerminal, is invalid. IviCDriverException The underlying NI-Digital Pattern Driver returned an error."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.SendSoftwareEdgeConditionalJumpTrigger.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.SendSoftwareEdgeConditionalJumpTrigger.html",
    "title": "Method SendSoftwareEdgeConditionalJumpTrigger | Semiconductor Test Library",
    "keywords": "Method SendSoftwareEdgeConditionalJumpTrigger Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll SendSoftwareEdgeConditionalJumpTrigger(DigitalSessionsBundle, int) Sends the Software Conditional Jump Trigger to a digital pattern instrument, forcing the Conditional Jump Trigger to assert, regardless of how the Conditional Jump Trigger is configured. public static void SendSoftwareEdgeConditionalJumpTrigger(this DigitalSessionsBundle sessionsBundle, int conditionalJumpTriggerId) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object. conditionalJumpTriggerId int The ID of the of ConditionalJumpTrigger to configure. Valid values include: 0, 1, 2, and 3, which all equate to conditionalJumpTrigger0, conditionalJumpTrigger1, conditionalJumpTrigger2, and conditionalJumpTrigger3, respectively."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.SendSoftwareEdgeStartTrigger.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.SendSoftwareEdgeStartTrigger.html",
    "title": "Method SendSoftwareEdgeStartTrigger | Semiconductor Test Library",
    "keywords": "Method SendSoftwareEdgeStartTrigger Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll SendSoftwareEdgeStartTrigger(DigitalSessionsBundle) Sends the software start trigger to a digital pattern instrument, forcing the start trigger to assert, regardless of how the start trigger is configured. public static void SendSoftwareEdgeStartTrigger(this DigitalSessionsBundle sessionsBundle) Parameters sessionsBundle DigitalSessionsBundle The DigitalSessionsBundle object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.TriggersAndEvents.html",
    "title": "Class TriggersAndEvents | Semiconductor Test Library",
    "keywords": "Class TriggersAndEvents Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines methods to deal with digital pattern triggers and events. public static class TriggersAndEvents Inheritance object TriggersAndEvents Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ConfigureConditionalJumpTriggerDigitalEdge(DigitalSessionsBundle, string, int, DigitalEdge) Configures a digital edge trigger for the specified Conditional Jump Trigger. ConfigureConditionalJumpTriggerSoftwareEdge(DigitalSessionsBundle, int) Configures a software edge trigger for the specified Conditional Jump Trigger. ConfigureStartTriggerDigitalEdge(DigitalSessionsBundle, string, DigitalEdge) Configures a digital edge trigger for the Start Trigger. ConfigureStartTriggerSoftwareEdge(DigitalSessionsBundle) Configures a software edge trigger for the Start Trigger. DisableConditionalJumpTrigger(DigitalSessionsBundle, int) Disables the specified ConditionalJumpTrigger by configuring it to None. DisableConditionalJumpTriggers(DigitalSessionsBundle) Disables all ConditionalJumpTriggers by configuring them to None. DisableStartTrigger(DigitalSessionsBundle) Disables StartTrigger trigger by configuring it to None. ExportSignal(DigitalSessionsBundle, SignalType, string, string) Routes trigger and event signals to the specified outputTerminal. SendSoftwareEdgeConditionalJumpTrigger(DigitalSessionsBundle, int) Sends the Software Conditional Jump Trigger to a digital pattern instrument, forcing the Conditional Jump Trigger to assert, regardless of how the Conditional Jump Trigger is configured. SendSoftwareEdgeStartTrigger(DigitalSessionsBundle) Sends the software start trigger to a digital pattern instrument, forcing the start trigger to assert, regardless of how the start trigger is configured."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital.html",
    "title": "Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital | Semiconductor Test Library",
    "keywords": "Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Digital Classes DigitalSessionInformation Defines an object that contains an individual NationalInstruments.ModularInstruments.NIDigital.NIDigital session and its related information. DigitalSessionsBundle Defines an object that contains one or more DigitalSessionInformation objects. FrequencyCounter Defines methods for frequency measurements. HistoryRAM Defines methods for History RAM. HistoryRAMResults Defines History RAM results type. HistoryRAMSettings Defines settings of History RAM. HistoryRAMTriggerSettings Defines History RAM trigger settings. InitializeAndClose Defines NationalInstruments.ModularInstruments.NIDigital.NIDigital sessions initialize and close APIs. LevelsAndTiming Defines methods for levels and timing. PPMU Defines methods for PPMU measurements. PPMUSettings Defines settings for PPMU. Pattern Defines methods to deal with digital patterns. SequencerFlagsAndRegisters Defines methods to deal with digital pattern sequencer flags and registers. SourceAndCapture Defines methods for sourcing and capturing waveforms. StaticState Defines methods for static state read/write. TriggersAndEvents Defines methods to deal with digital pattern triggers and events. Enums LevelsAndTiming.LevelType Defines voltage level types."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionInformation.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionInformation.-ctor.html",
    "title": "Constructor FgenSessionInformation | Semiconductor Test Library",
    "keywords": "Constructor FgenSessionInformation Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll FgenSessionInformation(NIFgen, string) Constructs a session information object that associates with a NationalInstruments.ModularInstruments.NIFgen.NIFgen instrument session. public FgenSessionInformation(NIFgen session, string channelList) Parameters session NIFgen The NationalInstruments.ModularInstruments.NIFgen.NIFgen session. channelList string The channels list associated with the NationalInstruments.ModularInstruments.NIFgen.NIFgen session. FgenSessionInformation(NIFgen, IList<SitePinInfo>) Constructs a session information object. public FgenSessionInformation(NIFgen session, IList<SitePinInfo> associatedSitePinList) Parameters session NIFgen The NationalInstruments.ModularInstruments.NIFgen.NIFgen session. associatedSitePinList IList<SitePinInfo> The specified subset of channels associated with the session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionInformation.AllChannelsString.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionInformation.AllChannelsString.html",
    "title": "Property AllChannelsString | Semiconductor Test Library",
    "keywords": "Property AllChannelsString Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AllChannelsString The all channels string associated with the Session. public string AllChannelsString { get; } Property Value string"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionInformation.AssociatedSitePinList.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionInformation.AssociatedSitePinList.html",
    "title": "Property AssociatedSitePinList | Semiconductor Test Library",
    "keywords": "Property AssociatedSitePinList Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AssociatedSitePinList Gets a list of SitePinInfo objects containing information for the individual site-pin pairs associated with the driver session. public IList<SitePinInfo> AssociatedSitePinList { get; } Property Value IList<SitePinInfo>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionInformation.GenerateInstrumentChannelToSitePinDictionary.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionInformation.GenerateInstrumentChannelToSitePinDictionary.html",
    "title": "Method GenerateInstrumentChannelToSitePinDictionary | Semiconductor Test Library",
    "keywords": "Method GenerateInstrumentChannelToSitePinDictionary Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll GenerateInstrumentChannelToSitePinDictionary(ISemiconductorModuleContext) Generates a dictionary that takes a channel string and returns the associated site-pin pair information. public static void GenerateInstrumentChannelToSitePinDictionary(ISemiconductorModuleContext tsmContext) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionInformation.ModelString.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionInformation.ModelString.html",
    "title": "Property ModelString | Semiconductor Test Library",
    "keywords": "Property ModelString Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ModelString The NI-FGEN instrument model string. public string ModelString { get; } Property Value string"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionInformation.Session.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionInformation.Session.html",
    "title": "Property Session | Semiconductor Test Library",
    "keywords": "Property Session Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Session The NationalInstruments.ModularInstruments.NIFgen.NIFgen session. public NIFgen Session { get; } Property Value NIFgen"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionInformation.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionInformation.html",
    "title": "Class FgenSessionInformation | Semiconductor Test Library",
    "keywords": "Class FgenSessionInformation Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an object that contains an individual NationalInstruments.ModularInstruments.NIFgen.NIFgen session and its related information. public class FgenSessionInformation : ISessionInformation Inheritance object FgenSessionInformation Implements ISessionInformation Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors FgenSessionInformation(NIFgen, IList<SitePinInfo>) Constructs a session information object. FgenSessionInformation(NIFgen, string) Constructs a session information object that associates with a NationalInstruments.ModularInstruments.NIFgen.NIFgen instrument session. Properties AllChannelsString The all channels string associated with the Session. AssociatedSitePinList Gets a list of SitePinInfo objects containing information for the individual site-pin pairs associated with the driver session. ModelString The NI-FGEN instrument model string. Session The NationalInstruments.ModularInstruments.NIFgen.NIFgen session. Methods GenerateInstrumentChannelToSitePinDictionary(ISemiconductorModuleContext) Generates a dictionary that takes a channel string and returns the associated site-pin pair information."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionsBundle.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionsBundle.-ctor.html",
    "title": "Constructor FgenSessionsBundle | Semiconductor Test Library",
    "keywords": "Constructor FgenSessionsBundle Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll FgenSessionsBundle(ISemiconductorModuleContext, IEnumerable<FgenSessionInformation>) Constructs a sessions bundle object that represents a bunch of FgenSessionInformations. public FgenSessionsBundle(ISemiconductorModuleContext tsmContext, IEnumerable<FgenSessionInformation> allSessionInfo) Parameters tsmContext ISemiconductorModuleContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. allSessionInfo IEnumerable<FgenSessionInformation> An enumerable of FgenSessionInformations."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionsBundle.AggregateSitePinList.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionsBundle.AggregateSitePinList.html",
    "title": "Property AggregateSitePinList | Semiconductor Test Library",
    "keywords": "Property AggregateSitePinList Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AggregateSitePinList An aggregated list of SitePinInfo objects containing information for all of the individual site-pin pairs associated with each of the session information objects within the bundle. public IList<SitePinInfo> AggregateSitePinList { get; } Property Value IList<SitePinInfo>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionsBundle.FilterByPin.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionsBundle.FilterByPin.html",
    "title": "Method FilterByPin | Semiconductor Test Library",
    "keywords": "Method FilterByPin Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll FilterByPin(string) Filters current FgenSessionsBundle and returns a new one with the requested pin. public FgenSessionsBundle FilterByPin(string requestedPin) Parameters requestedPin string The requested pin. Returns FgenSessionsBundle A new FgenSessionsBundle object with the requested pin. FilterByPin(string[]) Filters current FgenSessionsBundle and returns a new one with requested pins. public FgenSessionsBundle FilterByPin(string[] requestedPins) Parameters requestedPins string[] The requested pins. Returns FgenSessionsBundle A new FgenSessionsBundle object with requested pins."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionsBundle.FilterBySite.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionsBundle.FilterBySite.html",
    "title": "Method FilterBySite | Semiconductor Test Library",
    "keywords": "Method FilterBySite Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll FilterBySite(int) Filters current FgenSessionsBundle and returns a new one with the requested site. public FgenSessionsBundle FilterBySite(int requestedSite) Parameters requestedSite int The requested site. Returns FgenSessionsBundle A new FgenSessionsBundle object with the requested site. FilterBySite(int[]) Filters current FgenSessionsBundle and returns a new one with requested sites. public FgenSessionsBundle FilterBySite(int[] requestedSites) Parameters requestedSites int[] The requested sites. Returns FgenSessionsBundle A new FgenSessionsBundle object with requested sites."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionsBundle.InstrumentSessions.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionsBundle.InstrumentSessions.html",
    "title": "Property InstrumentSessions | Semiconductor Test Library",
    "keywords": "Property InstrumentSessions Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll InstrumentSessions An enumerable of ISessionInformation. public IEnumerable<FgenSessionInformation> InstrumentSessions { get; } Property Value IEnumerable<FgenSessionInformation>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionsBundle.TSMContext.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionsBundle.TSMContext.html",
    "title": "Property TSMContext | Semiconductor Test Library",
    "keywords": "Property TSMContext Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll TSMContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. public ISemiconductorModuleContext TSMContext { get; } Property Value ISemiconductorModuleContext"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionsBundle.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.FgenSessionsBundle.html",
    "title": "Class FgenSessionsBundle | Semiconductor Test Library",
    "keywords": "Class FgenSessionsBundle Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an object that contains one or more FgenSessionInformation objects. public class FgenSessionsBundle : ISessionsBundle<FgenSessionInformation> Inheritance object FgenSessionsBundle Implements ISessionsBundle<FgenSessionInformation> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool[]>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double[]>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<double[], double[]>>, string, string) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult>) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1, TResult2>>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, int, TResult[]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[,]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1[], TResult2[]>>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, SitePinInfo>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int, SitePinInfo>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation>) Publish.PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[], string) Publish.PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[][], string) Constructors FgenSessionsBundle(ISemiconductorModuleContext, IEnumerable<FgenSessionInformation>) Constructs a sessions bundle object that represents a bunch of FgenSessionInformations. Properties AggregateSitePinList An aggregated list of SitePinInfo objects containing information for all of the individual site-pin pairs associated with each of the session information objects within the bundle. InstrumentSessions An enumerable of ISessionInformation. TSMContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. Methods FilterByPin(string) Filters current FgenSessionsBundle and returns a new one with the requested pin. FilterByPin(string[]) Filters current FgenSessionsBundle and returns a new one with requested pins. FilterBySite(int) Filters current FgenSessionsBundle and returns a new one with the requested site. FilterBySite(int[]) Filters current FgenSessionsBundle and returns a new one with requested sites."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.InitializeAndClose.Close.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.InitializeAndClose.Close.html",
    "title": "Method Close | Semiconductor Test Library",
    "keywords": "Method Close Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Close(ISemiconductorModuleContext, bool) Closes all NationalInstruments.ModularInstruments.NIFgen.NIFgen sessions. public static void Close(ISemiconductorModuleContext tsmContext, bool reset = true) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. reset bool Whether to reset the device sessions before closing."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.InitializeAndClose.Initialize.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.InitializeAndClose.Initialize.html",
    "title": "Method Initialize | Semiconductor Test Library",
    "keywords": "Method Initialize Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Initialize(ISemiconductorModuleContext, bool) Initializes NationalInstruments.ModularInstruments.NIFgen.NIFgen sessions in the test system. public static void Initialize(ISemiconductorModuleContext tsmContext, bool resetDevice = false) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to reset device during initialization."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.InitializeAndClose.Reset.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.InitializeAndClose.Reset.html",
    "title": "Method Reset | Semiconductor Test Library",
    "keywords": "Method Reset Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Reset(ISemiconductorModuleContext, bool) Resets all NationalInstruments.ModularInstruments.NIFgen.NIFgen sessions. public static void Reset(ISemiconductorModuleContext tsmContext, bool resetDevice = false) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to perform a hard reset on the device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.InitializeAndClose.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.InitializeAndClose.html",
    "title": "Class InitializeAndClose | Semiconductor Test Library",
    "keywords": "Class InitializeAndClose Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines NationalInstruments.ModularInstruments.NIFgen.NIFgen sessions initialize and close APIs. public static class InitializeAndClose Inheritance object InitializeAndClose Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Close(ISemiconductorModuleContext, bool) Closes all NationalInstruments.ModularInstruments.NIFgen.NIFgen sessions. Initialize(ISemiconductorModuleContext, bool) Initializes NationalInstruments.ModularInstruments.NIFgen.NIFgen sessions in the test system. Reset(ISemiconductorModuleContext, bool) Resets all NationalInstruments.ModularInstruments.NIFgen.NIFgen sessions."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen.html",
    "title": "Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen | Semiconductor Test Library",
    "keywords": "Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Fgen Classes FgenSessionInformation Defines an object that contains an individual NationalInstruments.ModularInstruments.NIFgen.NIFgen session and its related information. FgenSessionsBundle Defines an object that contains one or more FgenSessionInformation objects. InitializeAndClose Defines NationalInstruments.ModularInstruments.NIFgen.NIFgen sessions initialize and close APIs."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.ISessionInformation.AssociatedSitePinList.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.ISessionInformation.AssociatedSitePinList.html",
    "title": "Property AssociatedSitePinList | Semiconductor Test Library",
    "keywords": "Property AssociatedSitePinList Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AssociatedSitePinList Gets a list of SitePinInfo objects containing information for the individual site-pin pairs associated with the driver session. IList<SitePinInfo> AssociatedSitePinList { get; } Property Value IList<SitePinInfo>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.ISessionInformation.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.ISessionInformation.html",
    "title": "Interface ISessionInformation | Semiconductor Test Library",
    "keywords": "Interface ISessionInformation Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an interface for related information associated with an individual driver session. public interface ISessionInformation Remarks Only the related information is defined by this interface. The driver-specific session should be declared within the class that implements this interface. Properties AssociatedSitePinList Gets a list of SitePinInfo objects containing information for the individual site-pin pairs associated with the driver session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.ISessionsBundle-1.AggregateSitePinList.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.ISessionsBundle-1.AggregateSitePinList.html",
    "title": "Property AggregateSitePinList | Semiconductor Test Library",
    "keywords": "Property AggregateSitePinList Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AggregateSitePinList An aggregated list of SitePinInfo objects containing information for all of the individual site-pin pairs associated with each of the session information objects within the bundle. IList<SitePinInfo> AggregateSitePinList { get; } Property Value IList<SitePinInfo>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.ISessionsBundle-1.InstrumentSessions.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.ISessionsBundle-1.InstrumentSessions.html",
    "title": "Property InstrumentSessions | Semiconductor Test Library",
    "keywords": "Property InstrumentSessions Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll InstrumentSessions An enumerable of ISessionInformation. IEnumerable<TSessionInformation> InstrumentSessions { get; } Property Value IEnumerable<TSessionInformation>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.ISessionsBundle-1.TSMContext.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.ISessionsBundle-1.TSMContext.html",
    "title": "Property TSMContext | Semiconductor Test Library",
    "keywords": "Property TSMContext Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll TSMContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. ISemiconductorModuleContext TSMContext { get; } Property Value ISemiconductorModuleContext"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.ISessionsBundle-1.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.ISessionsBundle-1.html",
    "title": "Interface ISessionsBundle<TSessionInformation> | Semiconductor Test Library",
    "keywords": "Interface ISessionsBundle<TSessionInformation> Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an interface for bundling together multiple device session information. public interface ISessionsBundle<TSessionInformation> Type Parameters TSessionInformation The type of the information for a specific device session. Extension Methods ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool[]>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double[]>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<double[], double[]>>, string, string) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult>) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1, TResult2>>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, int, TResult[]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[,]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1[], TResult2[]>>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, SitePinInfo>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int, SitePinInfo>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation>) Publish.PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[], string) Publish.PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[][], string) Properties AggregateSitePinList An aggregated list of SitePinInfo objects containing information for all of the individual site-pin pairs associated with each of the session information objects within the bundle. InstrumentSessions An enumerable of ISessionInformation. TSMContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Initialization.MapInitializedInstrumentSessions.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Initialization.MapInitializedInstrumentSessions.html",
    "title": "Method MapInitializedInstrumentSessions | Semiconductor Test Library",
    "keywords": "Method MapInitializedInstrumentSessions Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll MapInitializedInstrumentSessions(ISemiconductorModuleContext) Maps already initialized instrument sessions. public static void MapInitializedInstrumentSessions(ISemiconductorModuleContext tsmContext) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. Remarks Must be called when instruments initialization completes. This ensures any cached instrument session information is consistent between the NationalInstruments.SemiconductorTestLibrary.TestStandSteps assembly and the client assembly, as they may not share the same memory space."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Initialization.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Initialization.html",
    "title": "Class Initialization | Semiconductor Test Library",
    "keywords": "Class Initialization Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines entry points for semiconductor test steps. public static class Initialization Inheritance object Initialization Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods MapInitializedInstrumentSessions(ISemiconductorModuleContext) Maps already initialized instrument sessions."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay.Control.ApplyRelayConfiguration.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay.Control.ApplyRelayConfiguration.html",
    "title": "Method ApplyRelayConfiguration | Semiconductor Test Library",
    "keywords": "Method ApplyRelayConfiguration Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ApplyRelayConfiguration(ISemiconductorModuleContext, string) Performs the relay actions on the relays in the relay configuration. public static void ApplyRelayConfiguration(ISemiconductorModuleContext tsmContext, string relayConfiguration) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. relayConfiguration string The name of the relay configuration to apply."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay.Control.ControlRelay.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay.Control.ControlRelay.html",
    "title": "Method ControlRelay | Semiconductor Test Library",
    "keywords": "Method ControlRelay Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll ControlRelay(ISemiconductorModuleContext, string, RelayDriverAction) Performs the relay action on the relay. public static void ControlRelay(ISemiconductorModuleContext tsmContext, string relay, RelayDriverAction relayAction) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. relay string The name of the relay to control. relayAction RelayDriverAction The relay action to perform. ControlRelay(ISemiconductorModuleContext, string[], RelayDriverAction) Performs the same relay action on multiple relays. public static void ControlRelay(ISemiconductorModuleContext tsmContext, string[] relays, RelayDriverAction relayAction) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. relays string[] The name of the relays to control. relayAction RelayDriverAction The relay action to perform. ControlRelay(ISemiconductorModuleContext, string[], RelayDriverAction[]) Performs the relay actions on the relays. public static void ControlRelay(ISemiconductorModuleContext tsmContext, string[] relays, RelayDriverAction[] relayActions) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. relays string[] The name of the relays to control. relayActions RelayDriverAction[] The relay actions to perform. ControlRelay(ISemiconductorModuleContext, IDictionary<string, RelayDriverAction>) Performs the relay actions on the relays. public static void ControlRelay(ISemiconductorModuleContext tsmContext, IDictionary<string, RelayDriverAction> relayNameToActionDictionary) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. relayNameToActionDictionary IDictionary<string, RelayDriverAction> A dictionary that maps the relay name to the relay action to apply on that relay. ControlRelay(ISemiconductorModuleContext, string[], SiteData<RelayDriverAction>) Performs the relay actions on the relays. public static void ControlRelay(ISemiconductorModuleContext tsmContext, string[] relays, SiteData<RelayDriverAction> perSiteRelayActions) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. relays string[] The name of the relays to control. perSiteRelayActions SiteData<RelayDriverAction> The per-site relay actions to perform."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay.Control.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay.Control.html",
    "title": "Class Control | Semiconductor Test Library",
    "keywords": "Class Control Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay Assembly NationalInstruments.SemiconductorTestLibrary.Extensions.dll Defines methods for relay control. public static class Control Inheritance object Control Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ApplyRelayConfiguration(ISemiconductorModuleContext, string) Performs the relay actions on the relays in the relay configuration. ControlRelay(ISemiconductorModuleContext, IDictionary<string, RelayDriverAction>) Performs the relay actions on the relays. ControlRelay(ISemiconductorModuleContext, string, RelayDriverAction) Performs the relay action on the relay. ControlRelay(ISemiconductorModuleContext, string[], SiteData<RelayDriverAction>) Performs the relay actions on the relays. ControlRelay(ISemiconductorModuleContext, string[], RelayDriverAction) Performs the same relay action on multiple relays. ControlRelay(ISemiconductorModuleContext, string[], RelayDriverAction[]) Performs the relay actions on the relays."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay.InitializeAndClose.Close.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay.InitializeAndClose.Close.html",
    "title": "Method Close | Semiconductor Test Library",
    "keywords": "Method Close Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Close(ISemiconductorModuleContext, bool, bool) Closes all NationalInstruments.ModularInstruments.NISwitch.NISwitch sessions. public static void Close(ISemiconductorModuleContext tsmContext, bool resetDevice = true, bool disable = true) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to reset the device sessions before closing. disable bool Whether to disable the device sessions before closing."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay.InitializeAndClose.Initialize.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay.InitializeAndClose.Initialize.html",
    "title": "Method Initialize | Semiconductor Test Library",
    "keywords": "Method Initialize Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Initialize(ISemiconductorModuleContext, bool) Initializes NationalInstruments.ModularInstruments.NISwitch.NISwitch sessions in the test system. public static void Initialize(ISemiconductorModuleContext tsmContext, bool resetDevice = false) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to reset device during initialization."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay.InitializeAndClose.Reset.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay.InitializeAndClose.Reset.html",
    "title": "Method Reset | Semiconductor Test Library",
    "keywords": "Method Reset Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Reset(ISemiconductorModuleContext) Resets all NationalInstruments.ModularInstruments.NISwitch.NISwitch sessions. public static void Reset(ISemiconductorModuleContext tsmContext) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay.InitializeAndClose.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay.InitializeAndClose.html",
    "title": "Class InitializeAndClose | Semiconductor Test Library",
    "keywords": "Class InitializeAndClose Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines NationalInstruments.ModularInstruments.NISwitch.NISwitch sessions initialize and close APIs. public static class InitializeAndClose Inheritance object InitializeAndClose Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Close(ISemiconductorModuleContext, bool, bool) Closes all NationalInstruments.ModularInstruments.NISwitch.NISwitch sessions. Initialize(ISemiconductorModuleContext, bool) Initializes NationalInstruments.ModularInstruments.NISwitch.NISwitch sessions in the test system. Reset(ISemiconductorModuleContext) Resets all NationalInstruments.ModularInstruments.NISwitch.NISwitch sessions."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay.html",
    "title": "Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay | Semiconductor Test Library",
    "keywords": "Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Relay Classes Control Defines methods for relay control. InitializeAndClose Defines NationalInstruments.ModularInstruments.NISwitch.NISwitch sessions initialize and close APIs."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.InitializeAndClose.Close.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.InitializeAndClose.Close.html",
    "title": "Method Close | Semiconductor Test Library",
    "keywords": "Method Close Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Close(ISemiconductorModuleContext, bool) Closes all NationalInstruments.ModularInstruments.NIScope.NIScope sessions. public static void Close(ISemiconductorModuleContext tsmContext, bool reset = true) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. reset bool Whether to reset the device sessions before closing."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.InitializeAndClose.Initialize.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.InitializeAndClose.Initialize.html",
    "title": "Method Initialize | Semiconductor Test Library",
    "keywords": "Method Initialize Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Initialize(ISemiconductorModuleContext, bool) Initializes NationalInstruments.ModularInstruments.NIScope.NIScope sessions in the test system. public static void Initialize(ISemiconductorModuleContext tsmContext, bool resetDevice = false) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to reset device during initialization."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.InitializeAndClose.Reset.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.InitializeAndClose.Reset.html",
    "title": "Method Reset | Semiconductor Test Library",
    "keywords": "Method Reset Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Reset(ISemiconductorModuleContext, bool) Resets all NationalInstruments.ModularInstruments.NIScope.NIScope sessions. public static void Reset(ISemiconductorModuleContext tsmContext, bool resetDevice = false) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to perform a hard reset on the device."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.InitializeAndClose.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.InitializeAndClose.html",
    "title": "Class InitializeAndClose | Semiconductor Test Library",
    "keywords": "Class InitializeAndClose Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines NationalInstruments.ModularInstruments.NIScope.NIScope sessions initialize and close APIs. public static class InitializeAndClose Inheritance object InitializeAndClose Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Close(ISemiconductorModuleContext, bool) Closes all NationalInstruments.ModularInstruments.NIScope.NIScope sessions. Initialize(ISemiconductorModuleContext, bool) Initializes NationalInstruments.ModularInstruments.NIScope.NIScope sessions in the test system. Reset(ISemiconductorModuleContext, bool) Resets all NationalInstruments.ModularInstruments.NIScope.NIScope sessions."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionInformation.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionInformation.-ctor.html",
    "title": "Constructor ScopeSessionInformation | Semiconductor Test Library",
    "keywords": "Constructor ScopeSessionInformation Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ScopeSessionInformation(NIScope, string) Constructs a session information object that associates with a NationalInstruments.ModularInstruments.NIScope.NIScope instrument session. public ScopeSessionInformation(NIScope session, string channelList) Parameters session NIScope The NationalInstruments.ModularInstruments.NIScope.NIScope session. channelList string The channels list associated with the NationalInstruments.ModularInstruments.NIScope.NIScope session. ScopeSessionInformation(NIScope, IList<SitePinInfo>) Constructs a session information object. public ScopeSessionInformation(NIScope session, IList<SitePinInfo> associatedSitePinList) Parameters session NIScope The NationalInstruments.ModularInstruments.NIScope.NIScope session. associatedSitePinList IList<SitePinInfo> The specified subset of channels associated with the session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionInformation.AllChannelsString.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionInformation.AllChannelsString.html",
    "title": "Property AllChannelsString | Semiconductor Test Library",
    "keywords": "Property AllChannelsString Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AllChannelsString The all channels string associated with the Session. public string AllChannelsString { get; } Property Value string Remarks It's a comma-separated string of channel numbers (when the associated Session is a single instrument session) or instrument-channel pairs (when the associated Session is a multi-instrument session. For example, \"0, 1\", \"Scope_5622_C1_S10/0, Scope_5622_C1_S11/1\", etc."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionInformation.AssociatedSitePinList.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionInformation.AssociatedSitePinList.html",
    "title": "Property AssociatedSitePinList | Semiconductor Test Library",
    "keywords": "Property AssociatedSitePinList Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AssociatedSitePinList Gets a list of SitePinInfo objects containing information for the individual site-pin pairs associated with the driver session. public IList<SitePinInfo> AssociatedSitePinList { get; } Property Value IList<SitePinInfo>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionInformation.GenerateInstrumentChannelToSitePinDictionary.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionInformation.GenerateInstrumentChannelToSitePinDictionary.html",
    "title": "Method GenerateInstrumentChannelToSitePinDictionary | Semiconductor Test Library",
    "keywords": "Method GenerateInstrumentChannelToSitePinDictionary Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll GenerateInstrumentChannelToSitePinDictionary(ISemiconductorModuleContext) Generates a dictionary that takes a channel string and returns the associated site-pin pair information. public static void GenerateInstrumentChannelToSitePinDictionary(ISemiconductorModuleContext tsmContext) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionInformation.ModelString.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionInformation.ModelString.html",
    "title": "Property ModelString | Semiconductor Test Library",
    "keywords": "Property ModelString Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ModelString The NI-Scope instrument model string. public string ModelString { get; } Property Value string"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionInformation.Session.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionInformation.Session.html",
    "title": "Property Session | Semiconductor Test Library",
    "keywords": "Property Session Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Session The NationalInstruments.ModularInstruments.NIScope.NIScope session. public NIScope Session { get; } Property Value NIScope"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionInformation.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionInformation.html",
    "title": "Class ScopeSessionInformation | Semiconductor Test Library",
    "keywords": "Class ScopeSessionInformation Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an object that contains an individual NationalInstruments.ModularInstruments.NIScope.NIScope session and its related information. public class ScopeSessionInformation : ISessionInformation Inheritance object ScopeSessionInformation Implements ISessionInformation Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ScopeSessionInformation(NIScope, IList<SitePinInfo>) Constructs a session information object. ScopeSessionInformation(NIScope, string) Constructs a session information object that associates with a NationalInstruments.ModularInstruments.NIScope.NIScope instrument session. Properties AllChannelsString The all channels string associated with the Session. AssociatedSitePinList Gets a list of SitePinInfo objects containing information for the individual site-pin pairs associated with the driver session. ModelString The NI-Scope instrument model string. Session The NationalInstruments.ModularInstruments.NIScope.NIScope session. Methods GenerateInstrumentChannelToSitePinDictionary(ISemiconductorModuleContext) Generates a dictionary that takes a channel string and returns the associated site-pin pair information."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionsBundle.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionsBundle.-ctor.html",
    "title": "Constructor ScopeSessionsBundle | Semiconductor Test Library",
    "keywords": "Constructor ScopeSessionsBundle Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ScopeSessionsBundle(ISemiconductorModuleContext, IEnumerable<ScopeSessionInformation>) Constructs a sessions bundle object that represents a bunch of ScopeSessionInformations. public ScopeSessionsBundle(ISemiconductorModuleContext tsmContext, IEnumerable<ScopeSessionInformation> allSessionInfo) Parameters tsmContext ISemiconductorModuleContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. allSessionInfo IEnumerable<ScopeSessionInformation> An enumerable of ScopeSessionInformations."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionsBundle.AggregateSitePinList.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionsBundle.AggregateSitePinList.html",
    "title": "Property AggregateSitePinList | Semiconductor Test Library",
    "keywords": "Property AggregateSitePinList Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AggregateSitePinList An aggregated list of SitePinInfo objects containing information for all of the individual site-pin pairs associated with each of the session information objects within the bundle. public IList<SitePinInfo> AggregateSitePinList { get; } Property Value IList<SitePinInfo>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionsBundle.FilterByPin.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionsBundle.FilterByPin.html",
    "title": "Method FilterByPin | Semiconductor Test Library",
    "keywords": "Method FilterByPin Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll FilterByPin(string) Filters current ScopeSessionsBundle and returns a new one with the requested pin. public ScopeSessionsBundle FilterByPin(string requestedPin) Parameters requestedPin string The requested pin. Returns ScopeSessionsBundle A new ScopeSessionsBundle object with the requested pin. FilterByPin(string[]) Filters current ScopeSessionsBundle and returns a new one with requested pins. public ScopeSessionsBundle FilterByPin(string[] requestedPins) Parameters requestedPins string[] The requested pins. Returns ScopeSessionsBundle A new ScopeSessionsBundle object with requested pins."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionsBundle.FilterBySite.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionsBundle.FilterBySite.html",
    "title": "Method FilterBySite | Semiconductor Test Library",
    "keywords": "Method FilterBySite Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll FilterBySite(int) Filters current ScopeSessionsBundle and returns a new one with the requested site. public ScopeSessionsBundle FilterBySite(int requestedSite) Parameters requestedSite int The requested site. Returns ScopeSessionsBundle A new ScopeSessionsBundle object with the requested site. FilterBySite(int[]) Filters current ScopeSessionsBundle and returns a new one with requested sites. public ScopeSessionsBundle FilterBySite(int[] requestedSites) Parameters requestedSites int[] The requested sites. Returns ScopeSessionsBundle A new ScopeSessionsBundle object with requested sites."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionsBundle.InstrumentSessions.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionsBundle.InstrumentSessions.html",
    "title": "Property InstrumentSessions | Semiconductor Test Library",
    "keywords": "Property InstrumentSessions Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll InstrumentSessions An enumerable of ISessionInformation. public IEnumerable<ScopeSessionInformation> InstrumentSessions { get; } Property Value IEnumerable<ScopeSessionInformation>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionsBundle.TSMContext.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionsBundle.TSMContext.html",
    "title": "Property TSMContext | Semiconductor Test Library",
    "keywords": "Property TSMContext Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll TSMContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. public ISemiconductorModuleContext TSMContext { get; } Property Value ISemiconductorModuleContext"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionsBundle.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.ScopeSessionsBundle.html",
    "title": "Class ScopeSessionsBundle | Semiconductor Test Library",
    "keywords": "Class ScopeSessionsBundle Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an object that contains one or more ScopeSessionInformation objects. public class ScopeSessionsBundle : ISessionsBundle<ScopeSessionInformation> Inheritance object ScopeSessionsBundle Implements ISessionsBundle<ScopeSessionInformation> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool[]>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double[]>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<double[], double[]>>, string, string) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult>) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1, TResult2>>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, int, TResult[]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[,]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1[], TResult2[]>>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, SitePinInfo>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int, SitePinInfo>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation>) Publish.PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[], string) Publish.PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[][], string) Constructors ScopeSessionsBundle(ISemiconductorModuleContext, IEnumerable<ScopeSessionInformation>) Constructs a sessions bundle object that represents a bunch of ScopeSessionInformations. Properties AggregateSitePinList An aggregated list of SitePinInfo objects containing information for all of the individual site-pin pairs associated with each of the session information objects within the bundle. InstrumentSessions An enumerable of ISessionInformation. TSMContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. Methods FilterByPin(string) Filters current ScopeSessionsBundle and returns a new one with the requested pin. FilterByPin(string[]) Filters current ScopeSessionsBundle and returns a new one with requested pins. FilterBySite(int) Filters current ScopeSessionsBundle and returns a new one with the requested site. FilterBySite(int[]) Filters current ScopeSessionsBundle and returns a new one with requested sites."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope.html",
    "title": "Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope | Semiconductor Test Library",
    "keywords": "Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Scope Classes InitializeAndClose Defines NationalInstruments.ModularInstruments.NIScope.NIScope sessions initialize and close APIs. ScopeSessionInformation Defines an object that contains an individual NationalInstruments.ModularInstruments.NIScope.NIScope session and its related information. ScopeSessionsBundle Defines an object that contains one or more ScopeSessionInformation objects."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.InitializeAndClose.Close.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.InitializeAndClose.Close.html",
    "title": "Method Close | Semiconductor Test Library",
    "keywords": "Method Close Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Close(ISemiconductorModuleContext, bool) Closes all NISync sessions. public static void Close(ISemiconductorModuleContext tsmContext, bool resetDevice = true) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to reset the device sessions before closing."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.InitializeAndClose.Initialize.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.InitializeAndClose.Initialize.html",
    "title": "Method Initialize | Semiconductor Test Library",
    "keywords": "Method Initialize Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Initialize(ISemiconductorModuleContext, bool) Initializes NISync sessions in the test system. public static void Initialize(ISemiconductorModuleContext tsmContext, bool resetDevice = false) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object. resetDevice bool Whether to reset device during initialization."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.InitializeAndClose.NISyncInstrumentTypeId.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.InitializeAndClose.NISyncInstrumentTypeId.html",
    "title": "Field NISyncInstrumentTypeId | Semiconductor Test Library",
    "keywords": "Field NISyncInstrumentTypeId Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an instrument type ID to identify NISync instruments when get/set sessions from/to the NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. public const string NISyncInstrumentTypeId = \"Sync\" Returns string Defines an instrument type ID to identify instruments when get/set sessions from/to the ."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.InitializeAndClose.Reset.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.InitializeAndClose.Reset.html",
    "title": "Method Reset | Semiconductor Test Library",
    "keywords": "Method Reset Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Reset(ISemiconductorModuleContext) Resets all NISync sessions. public static void Reset(ISemiconductorModuleContext tsmContext) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext object."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.InitializeAndClose.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.InitializeAndClose.html",
    "title": "Class InitializeAndClose | Semiconductor Test Library",
    "keywords": "Class InitializeAndClose Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines NISync sessions initialize and close APIs. public static class InitializeAndClose Inheritance object InitializeAndClose Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields NISyncInstrumentTypeId Defines an instrument type ID to identify NISync instruments when get/set sessions from/to the NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. Methods Close(ISemiconductorModuleContext, bool) Closes all NISync sessions. Initialize(ISemiconductorModuleContext, bool) Initializes NISync sessions in the test system. Reset(ISemiconductorModuleContext) Resets all NISync sessions."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.-ctor.html",
    "title": "Constructor NISync | Semiconductor Test Library",
    "keywords": "Constructor NISync Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll NISync(string, bool, bool) Creates a new NI-Sync instrument driver session. public NISync(string resourceName, bool idQuery = true, bool resetDevice = false) Parameters resourceName string The name of the NI-Sync device. idQuery bool Specifies whether to query the instrument ID to determine if the instrument is compatible with the NI-Sync driver. The default is TRUE. resetDevice bool Specifies whether to reset the NI-Sync module to its default state—including the selected time reference, any connected terminals, and all scheduled future time events—during the initialization procedure. The default is FALSE."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.Close.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.Close.html",
    "title": "Method Close | Semiconductor Test Library",
    "keywords": "Method Close Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Close() Ends an NI-Sync instrument driver session and frees the device for other operations. public void Close()"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.ConnectClkTerminals.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.ConnectClkTerminals.html",
    "title": "Method ConnectClkTerminals | Semiconductor Test Library",
    "keywords": "Method ConnectClkTerminals Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ConnectClkTerminals(string, string) Connects a source clock terminal to a destination clock terminal. A clock terminal connection is characterized by its source terminal and destination terminal. public void ConnectClkTerminals(string sourceTerminal, string destinationTerminal) Parameters sourceTerminal string Specifies the source terminal of the clock you would like to connect. destinationTerminal string Specifies where to route the clock signal specified in the source terminal."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.ConnectSoftwareTrigger.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.ConnectSoftwareTrigger.html",
    "title": "Method ConnectSoftwareTrigger | Semiconductor Test Library",
    "keywords": "Method ConnectSoftwareTrigger Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ConnectSoftwareTrigger(string, SynchronizationClock, bool, UpdateEdge, double) Connects the global software trigger to a destination trigger terminal. Once you connect the global software trigger, you can fire the trigger using SendSoftwareTrigger(string). public void ConnectSoftwareTrigger(string destinationTerminal, SynchronizationClock synchronizationClock = SynchronizationClock.FullSpeedClock, bool invertSignal = false, UpdateEdge updateEdge = UpdateEdge.RisingEdge, double delay = 0) Parameters destinationTerminal string Specifies the terminal where the Global Software Trigger will fire. synchronizationClock SynchronizationClock Specifies whether to use the full-speed or a divided synchronization clock to control when the global software trigger fires. The global software trigger will be synchronized with the rising or falling edge of the clock you select in this terminal. invertSignal bool Specifies whether to invert the digital signal of the Global Software Trigger when it reaches the destination terminal: updateEdge UpdateEdge Specifies on which update edge of the synchronization clock to propagate the global software trigger. delay double Specifies the amount of time, in seconds, to delay the global software trigger pulse. The delay must be a multiple of the synchronization clock period. The global software trigger can be delayed up to 15 clock cycles for each route."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.ConnectTriggerTerminals.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.ConnectTriggerTerminals.html",
    "title": "Method ConnectTriggerTerminals | Semiconductor Test Library",
    "keywords": "Method ConnectTriggerTerminals Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ConnectTriggerTerminals(string, string, SynchronizationClock, bool, UpdateEdge) Routes triggers through the PXI backplane, between devices, or between multiple chassis. Once a terminal route is connected, you can invert the trigger signal at the destination terminal, synchronize the trigger to the rising or falling edge of a synchronization clock, fire the trigger asynchronously, or route the trigger to other trigger terminals. You can also route clocks along some trigger lines by setting a full speed or divided synchronization clock as the source terminal. public void ConnectTriggerTerminals(string sourceTerminal, string destinationTerminal, SynchronizationClock synchronizationClock = SynchronizationClock.Asynchronous, bool invertSignal = false, UpdateEdge updateEdge = UpdateEdge.RisingEdge) Parameters sourceTerminal string Specifies the source of the trigger you want to connect to the destination terminal. destinationTerminal string Specifies the destination trigger terminal that the source terminal will connect to. synchronizationClock SynchronizationClock Specifies whether to use the full-speed or a divided synchronization clock to control when the trigger fires. The trigger will be synchronized with the rising or falling edge of the clock you select in this terminal. invertSignal bool Specifies whether to invert the source terminal signal at the destination terminal. updateEdge UpdateEdge Specifies on which update edge of the synchronization clock to propagate the trigger."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.DisconnectClkTerminals.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.DisconnectClkTerminals.html",
    "title": "Method DisconnectClkTerminals | Semiconductor Test Library",
    "keywords": "Method DisconnectClkTerminals Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll DisconnectClkTerminals(string, string) Closes a route between a source clock terminal and a destination clock terminal. public void DisconnectClkTerminals(string sourceTerminal, string destinationTerminal) Parameters sourceTerminal string Specifies the source clock terminal to disconnect from the destination terminal. destinationTerminal string Specifies the destination clock terminal to disconnect from the source terminal."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.DisconnectSoftwareTrigger.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.DisconnectSoftwareTrigger.html",
    "title": "Method DisconnectSoftwareTrigger | Semiconductor Test Library",
    "keywords": "Method DisconnectSoftwareTrigger Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll DisconnectSoftwareTrigger(string) Closes a route between the global software trigger and a destination trigger terminal. public void DisconnectSoftwareTrigger(string destinationTerminal) Parameters destinationTerminal string Specifies the destination trigger terminal to disconnect the global software trigger terminal from. The global software trigger must be connected to the destination terminal for this operation to succeed."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.DisconnectTriggerTerminals.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.DisconnectTriggerTerminals.html",
    "title": "Method DisconnectTriggerTerminals | Semiconductor Test Library",
    "keywords": "Method DisconnectTriggerTerminals Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll DisconnectTriggerTerminals(string, string) Closes a route between a source trigger terminal and a destination trigger terminal. public void DisconnectTriggerTerminals(string sourceTerminal, string destinationTerminal) Parameters sourceTerminal string Specifies the source terminal you would like to disconnect from the destination terminal. The source and destination terminals must be connected for this operation to succeed. destinationTerminal string Specifies the destination trigger terminal to disconnect from the source terminal. The source and destination terminals must be connected for this operation to succeed."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.Reset.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.Reset.html",
    "title": "Method Reset | Semiconductor Test Library",
    "keywords": "Method Reset Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Reset() Resets the specified device. You can also reset a device before the program starts by using the reset device parameter of niSync Initialize. public void Reset()"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.ResourceName.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.ResourceName.html",
    "title": "Property ResourceName | Semiconductor Test Library",
    "keywords": "Property ResourceName Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll ResourceName Indicates the name of the NI-Sync device. public string ResourceName { get; } Property Value string"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.SendSoftwareTrigger.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.SendSoftwareTrigger.html",
    "title": "Method SendSoftwareTrigger | Semiconductor Test Library",
    "keywords": "Method SendSoftwareTrigger Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll SendSoftwareTrigger() Sends a trigger pulse using the global software trigger. You must first route the global software trigger to at least one destination terminal using ConnectSoftwareTrigger(string, string, string, int, int, double) for this operation to have any effect. public void SendSoftwareTrigger()"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.NISync.html",
    "title": "Class NISync | Semiconductor Test Library",
    "keywords": "Class NISync Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Wraps the NI-Sync C driver. public class NISync Inheritance object NISync Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors NISync(string, bool, bool) Creates a new NI-Sync instrument driver session. Properties ResourceName Indicates the name of the NI-Sync device. Methods Close() Ends an NI-Sync instrument driver session and frees the device for other operations. ConnectClkTerminals(string, string) Connects a source clock terminal to a destination clock terminal. A clock terminal connection is characterized by its source terminal and destination terminal. ConnectSoftwareTrigger(string, SynchronizationClock, bool, UpdateEdge, double) Connects the global software trigger to a destination trigger terminal. Once you connect the global software trigger, you can fire the trigger using SendSoftwareTrigger(string). ConnectTriggerTerminals(string, string, SynchronizationClock, bool, UpdateEdge) Routes triggers through the PXI backplane, between devices, or between multiple chassis. Once a terminal route is connected, you can invert the trigger signal at the destination terminal, synchronize the trigger to the rising or falling edge of a synchronization clock, fire the trigger asynchronously, or route the trigger to other trigger terminals. You can also route clocks along some trigger lines by setting a full speed or divided synchronization clock as the source terminal. DisconnectClkTerminals(string, string) Closes a route between a source clock terminal and a destination clock terminal. DisconnectSoftwareTrigger(string) Closes a route between the global software trigger and a destination trigger terminal. DisconnectTriggerTerminals(string, string) Closes a route between a source trigger terminal and a destination trigger terminal. Reset() Resets the specified device. You can also reset a device before the program starts by using the reset device parameter of niSync Initialize. SendSoftwareTrigger() Sends a trigger pulse using the global software trigger. You must first route the global software trigger to at least one destination terminal using ConnectSoftwareTrigger(string, string, string, int, int, double) for this operation to have any effect."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionInformation.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionInformation.-ctor.html",
    "title": "Constructor SyncSessionInformation | Semiconductor Test Library",
    "keywords": "Constructor SyncSessionInformation Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll SyncSessionInformation(NISync) Constructs a session information object that associates with a NISync instrument session. public SyncSessionInformation(NISync session) Parameters session NISync The NISync session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionInformation.AssociatedSitePinList.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionInformation.AssociatedSitePinList.html",
    "title": "Property AssociatedSitePinList | Semiconductor Test Library",
    "keywords": "Property AssociatedSitePinList Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AssociatedSitePinList Gets a list of SitePinInfo objects containing information for the individual site-pin pairs associated with the driver session. public IList<SitePinInfo> AssociatedSitePinList { get; } Property Value IList<SitePinInfo>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionInformation.Session.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionInformation.Session.html",
    "title": "Property Session | Semiconductor Test Library",
    "keywords": "Property Session Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Session The NISync session. public NISync Session { get; } Property Value NISync"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionInformation.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionInformation.html",
    "title": "Class SyncSessionInformation | Semiconductor Test Library",
    "keywords": "Class SyncSessionInformation Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an object that contains an individual NISync session and its related information. public class SyncSessionInformation : ISessionInformation Inheritance object SyncSessionInformation Implements ISessionInformation Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SyncSessionInformation(NISync) Constructs a session information object that associates with a NISync instrument session. Properties AssociatedSitePinList Gets a list of SitePinInfo objects containing information for the individual site-pin pairs associated with the driver session. Session The NISync session."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionsBundle.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionsBundle.-ctor.html",
    "title": "Constructor SyncSessionsBundle | Semiconductor Test Library",
    "keywords": "Constructor SyncSessionsBundle Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll SyncSessionsBundle(ISemiconductorModuleContext, IEnumerable<SyncSessionInformation>) Constructs a sessions bundle object that represents a bunch of SyncSessionInformations. public SyncSessionsBundle(ISemiconductorModuleContext tsmContext, IEnumerable<SyncSessionInformation> allSessionInfo) Parameters tsmContext ISemiconductorModuleContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. allSessionInfo IEnumerable<SyncSessionInformation> An enumerable of SyncSessionInformations."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionsBundle.AggregateSitePinList.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionsBundle.AggregateSitePinList.html",
    "title": "Property AggregateSitePinList | Semiconductor Test Library",
    "keywords": "Property AggregateSitePinList Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll AggregateSitePinList An aggregated list of SitePinInfo objects containing information for all of the individual site-pin pairs associated with each of the session information objects within the bundle. public IList<SitePinInfo> AggregateSitePinList { get; } Property Value IList<SitePinInfo>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionsBundle.FilterBySite.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionsBundle.FilterBySite.html",
    "title": "Method FilterBySite | Semiconductor Test Library",
    "keywords": "Method FilterBySite Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll FilterBySite(int) Filters current SyncSessionsBundle and returns a new one with the requested site. public SyncSessionsBundle FilterBySite(int requestedSite) Parameters requestedSite int The requested site. Returns SyncSessionsBundle A new SyncSessionsBundle object with the requested site. FilterBySite(int[]) Filters current SyncSessionsBundle and returns a new one with requested sites. public SyncSessionsBundle FilterBySite(int[] requestedSites) Parameters requestedSites int[] The requested sites. Returns SyncSessionsBundle A new SyncSessionsBundle object with requested sites."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionsBundle.InstrumentSessions.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionsBundle.InstrumentSessions.html",
    "title": "Property InstrumentSessions | Semiconductor Test Library",
    "keywords": "Property InstrumentSessions Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll InstrumentSessions An enumerable of ISessionInformation. public IEnumerable<SyncSessionInformation> InstrumentSessions { get; } Property Value IEnumerable<SyncSessionInformation>"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionsBundle.TSMContext.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionsBundle.TSMContext.html",
    "title": "Property TSMContext | Semiconductor Test Library",
    "keywords": "Property TSMContext Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll TSMContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. public ISemiconductorModuleContext TSMContext { get; } Property Value ISemiconductorModuleContext"
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionsBundle.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SyncSessionsBundle.html",
    "title": "Class SyncSessionsBundle | Semiconductor Test Library",
    "keywords": "Class SyncSessionsBundle Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines an object that contains one or more SyncSessionInformation objects. public class SyncSessionsBundle : ISessionsBundle<SyncSessionInformation> Inheritance object SyncSessionsBundle Implements ISessionsBundle<SyncSessionInformation> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool[]>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, bool>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double[]>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, double>, string) ParallelExecution.DoAndPublishResults<TSessionInformation>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<double[], double[]>>, string, string) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult>) ParallelExecution.DoAndReturnPerInstrumentPerChannelResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1, TResult2>>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, SitePinInfo, TResult>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, int, TResult[]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[,]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, TResult[]>) ParallelExecution.DoAndReturnPerSitePerPinResults<TSessionInformation, TResult1, TResult2>(ISessionsBundle<TSessionInformation>, Func<TSessionInformation, Tuple<TResult1[], TResult2[]>>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, SitePinInfo>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int, SitePinInfo>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation, int>) ParallelExecution.Do<TSessionInformation>(ISessionsBundle<TSessionInformation>, Action<TSessionInformation>) Publish.PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[], string) Publish.PublishResults<TSessionInformation, TData>(ISessionsBundle<TSessionInformation>, TData[][], string) Constructors SyncSessionsBundle(ISemiconductorModuleContext, IEnumerable<SyncSessionInformation>) Constructs a sessions bundle object that represents a bunch of SyncSessionInformations. Properties AggregateSitePinList An aggregated list of SitePinInfo objects containing information for all of the individual site-pin pairs associated with each of the session information objects within the bundle. InstrumentSessions An enumerable of ISessionInformation. TSMContext The associated NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext. Methods FilterBySite(int) Filters current SyncSessionsBundle and returns a new one with the requested site. FilterBySite(int[]) Filters current SyncSessionsBundle and returns a new one with requested sites."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SynchronizationClock.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.SynchronizationClock.html",
    "title": "Enum SynchronizationClock | Semiconductor Test Library",
    "keywords": "Enum SynchronizationClock Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Specifies the synchronization clock options. public enum SynchronizationClock Fields Asynchronous = 0 The trigger is not synchronized to any clock. DividedClock1 = 2 Divides the synchronization clock by the value specified in the Clock Divisor 1 parameter and uses the frequency of the divided clock to synchronize the trigger. DividedClock2 = 3 Divides the synchronization clock by the value specified in the Clock Divisor 2 parameter and uses the frequency of the divided clock to synchronize the trigger. FullSpeedClock = 1 Uses the full speed frequency of the synchronization clock to synchronize the trigger."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.UpdateEdge.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.UpdateEdge.html",
    "title": "Enum UpdateEdge | Semiconductor Test Library",
    "keywords": "Enum UpdateEdge Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Specifies the update edge options. public enum UpdateEdge Fields FallingEdge = 1 Propagates the trigger when the digital signal of the synchronization clock transitions from high to low. RisingEdge = 0 Propagates the trigger when the digital signal of the synchronization clock transitions from low to high."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync.html",
    "title": "Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync | Semiconductor Test Library",
    "keywords": "Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.Sync Classes InitializeAndClose Defines NISync sessions initialize and close APIs. NISync Wraps the NI-Sync C driver. SyncSessionInformation Defines an object that contains an individual NISync session and its related information. SyncSessionsBundle Defines an object that contains one or more SyncSessionInformation objects. Enums SynchronizationClock Specifies the synchronization clock options. UpdateEdge Specifies the update edge options."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.TSMSessionManager.-ctor.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.TSMSessionManager.-ctor.html",
    "title": "Constructor TSMSessionManager | Semiconductor Test Library",
    "keywords": "Constructor TSMSessionManager Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll TSMSessionManager(ISemiconductorModuleContext) Constructs a TSM session manager. public TSMSessionManager(ISemiconductorModuleContext tsmContext) Parameters tsmContext ISemiconductorModuleContext The NationalInstruments.TestStand.SemiconductorModule.CodeModuleAPI.ISemiconductorModuleContext that associates with this manager."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.TSMSessionManager.DAQmx.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.TSMSessionManager.DAQmx.html",
    "title": "Method DAQmx | Semiconductor Test Library",
    "keywords": "Method DAQmx Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll DAQmx(string) Gets the DAQmxTasksBundle associated with the specified pin. public DAQmxTasksBundle DAQmx(string pin) Parameters pin string The given pin. Returns DAQmxTasksBundle The associated DAQmxTasksBundle. DAQmx(string[]) Gets the DAQmxTasksBundle associated with the specified pins. public DAQmxTasksBundle DAQmx(string[] pins) Parameters pins string[] The given pins. Returns DAQmxTasksBundle The associated DAQmxTasksBundle."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.TSMSessionManager.DCPower.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.TSMSessionManager.DCPower.html",
    "title": "Method DCPower | Semiconductor Test Library",
    "keywords": "Method DCPower Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll DCPower(string) Gets the DCPowerSessionsBundle associated with the specified pin. public DCPowerSessionsBundle DCPower(string pin) Parameters pin string The given pin. Returns DCPowerSessionsBundle The associated DCPowerSessionsBundle. DCPower(string[]) Gets the DCPowerSessionsBundle associated with the specified pins. public DCPowerSessionsBundle DCPower(string[] pins) Parameters pins string[] The given pins. Returns DCPowerSessionsBundle The associated DCPowerSessionsBundle."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.TSMSessionManager.DMM.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.TSMSessionManager.DMM.html",
    "title": "Method DMM | Semiconductor Test Library",
    "keywords": "Method DMM Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll DMM(string) Gets the DMMSessionsBundle associated with the specified pin. public DMMSessionsBundle DMM(string pin) Parameters pin string The given pin. Returns DMMSessionsBundle The associated DMMSessionsBundle. DMM(string[]) Gets the DMMSessionsBundle associated with the specified pins. public DMMSessionsBundle DMM(string[] pins) Parameters pins string[] The given pins. Returns DMMSessionsBundle The associated DMMSessionsBundle."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.TSMSessionManager.Digital.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.TSMSessionManager.Digital.html",
    "title": "Method Digital | Semiconductor Test Library",
    "keywords": "Method Digital Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Digital(string) Gets the DigitalSessionsBundle associated with the specified pin. public DigitalSessionsBundle Digital(string pin) Parameters pin string The given pin. Returns DigitalSessionsBundle The associated DigitalSessionsBundle. Digital(string[]) Gets the DigitalSessionsBundle associated with the specified pins. public DigitalSessionsBundle Digital(string[] pins) Parameters pins string[] The given pins. Returns DigitalSessionsBundle The associated DigitalSessionsBundle."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.TSMSessionManager.Fgen.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.TSMSessionManager.Fgen.html",
    "title": "Method Fgen | Semiconductor Test Library",
    "keywords": "Method Fgen Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Fgen(string) Gets the FgenSessionsBundle associated with the specified pin. public FgenSessionsBundle Fgen(string pin) Parameters pin string The given pin. Returns FgenSessionsBundle The associated FgenSessionsBundle. Fgen(string[]) Gets the FgenSessionsBundle associated with the specified pins. public FgenSessionsBundle Fgen(string[] pins) Parameters pins string[] The given pins. Returns FgenSessionsBundle The associated FgenSessionsBundle."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.TSMSessionManager.Scope.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.TSMSessionManager.Scope.html",
    "title": "Method Scope | Semiconductor Test Library",
    "keywords": "Method Scope Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Scope(string) Gets the ScopeSessionsBundle associated with the specified pin. public ScopeSessionsBundle Scope(string pin) Parameters pin string The given pin. Returns ScopeSessionsBundle The associated ScopeSessionsBundle. Scope(string[]) Gets the ScopeSessionsBundle associated with the specified pins. public ScopeSessionsBundle Scope(string[] pins) Parameters pins string[] The given pins. Returns ScopeSessionsBundle The associated ScopeSessionsBundle."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.TSMSessionManager.Sync.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.TSMSessionManager.Sync.html",
    "title": "Method Sync | Semiconductor Test Library",
    "keywords": "Method Sync Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Sync() Gets the SyncSessionsBundle associated with all pins. public SyncSessionsBundle Sync() Returns SyncSessionsBundle The associated SyncSessionsBundle. Sync(string) Gets the SyncSessionsBundle associated with the specified pin. public SyncSessionsBundle Sync(string pin) Parameters pin string The given pin. Returns SyncSessionsBundle The associated SyncSessionsBundle. Sync(string[]) Gets the SyncSessionsBundle associated with the specified pins. public SyncSessionsBundle Sync(string[] pins) Parameters pins string[] The given pins. Returns SyncSessionsBundle The associated SyncSessionsBundle."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.TSMSessionManager.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.TSMSessionManager.html",
    "title": "Class TSMSessionManager | Semiconductor Test Library",
    "keywords": "Class TSMSessionManager Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction Assembly NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Defines a session manager that manages device sessions through TSM. public class TSMSessionManager Inheritance object TSMSessionManager Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors TSMSessionManager(ISemiconductorModuleContext) Constructs a TSM session manager. Methods DAQmx(string) Gets the DAQmxTasksBundle associated with the specified pin. DAQmx(string[]) Gets the DAQmxTasksBundle associated with the specified pins. DCPower(string) Gets the DCPowerSessionsBundle associated with the specified pin. DCPower(string[]) Gets the DCPowerSessionsBundle associated with the specified pins. DMM(string) Gets the DMMSessionsBundle associated with the specified pin. DMM(string[]) Gets the DMMSessionsBundle associated with the specified pins. Digital(string) Gets the DigitalSessionsBundle associated with the specified pin. Digital(string[]) Gets the DigitalSessionsBundle associated with the specified pins. Fgen(string) Gets the FgenSessionsBundle associated with the specified pin. Fgen(string[]) Gets the FgenSessionsBundle associated with the specified pins. Scope(string) Gets the ScopeSessionsBundle associated with the specified pin. Scope(string[]) Gets the ScopeSessionsBundle associated with the specified pins. Sync() Gets the SyncSessionsBundle associated with all pins. Sync(string) Gets the SyncSessionsBundle associated with the specified pin. Sync(string[]) Gets the SyncSessionsBundle associated with the specified pins."
  },
  "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.html": {
    "href": "SemiconductorTestLibrary/NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.html",
    "title": "Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction | Semiconductor Test Library",
    "keywords": "Namespace NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction Classes Initialization Defines entry points for semiconductor test steps. TSMSessionManager Defines a session manager that manages device sessions through TSM. Interfaces ISessionInformation Defines an interface for related information associated with an individual driver session. ISessionsBundle<TSessionInformation> Defines an interface for bundling together multiple device session information."
  },
  "UserGuide/AddingUsingStatements.html": {
    "href": "UserGuide/AddingUsingStatements.html",
    "title": "Adding Using Directives | Semiconductor Test Library",
    "keywords": "Adding Using Directives Depending on how your Visual Studio IDE is configured, the required using directives for accessing the Semiconductor Test Library may or may not automatically populate for as you write code. Therefore, you should always ensure that you have added the appropriate namespaces as using directives to the top of your code. This is required for the code to compile and for certain IDE features to work properly, such as Visual Studio's IntelliSense. Example 1: When working with the NI DCPower instruments, make sure you are using the following using directives in your code: using NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction; using NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.DCPower; Example 2: When working with the PinSiteData or SiteData objects, make sure you are using the following using directives in your code: using NationalInstruments.SemiconductorTestLibrary.DataAbstraction; Tip Consider a static using directive when working methods in the Utilities class, such as PreciseWait. This will allow you to write PreciseWait() in your code, instead of Utilities.PreciseWait(). using static NationalInstruments.SemiconductorTestLibrary.Common.Utilities; Related information: Microsoft Learn: Using Directive"
  },
  "UserGuide/ConfiguringInstrumentSessions.html": {
    "href": "UserGuide/ConfiguringInstrumentSessions.html",
    "title": "Configuring Instrument Sessions | Semiconductor Test Library",
    "keywords": "Configuring Instrument Sessions The Semiconductor Test Library makes an attempt to configure instruments in the most efficient way possible by consolidating the most common drive properties into one a single class. An instance of this class can be created and configured with only the properties intended to be updated, and then operate on that object to update the driver within in one go. This minimizes test time as it minimizes the use of parallel for loops that get called under-the-hood. How it works It always aborts the session. Does not re-initiate or commit the sessions (this is expected to happen in proceeding code).'"
  },
  "UserGuide/InstrumentSetupAndCleanup.html": {
    "href": "UserGuide/InstrumentSetupAndCleanup.html",
    "title": "Instrument Setup and Cleanup | Semiconductor Test Library",
    "keywords": "Instrument Setup and Cleanup The Semiconductor Test Library expects instrument sessions to be created for and stored via a separate session manager. The library currently leverages the TestStand Semiconductor Module to act its session manager, where the initialization and cleanup of instrument sessions is intended to be invoked from TestStand's ProcessSetup and ProcessCleanup sequences, respectively. The Semiconductor Test Library provides instrument type specific initialization and cleanup code in the Initialization class. Note Class: Initialization Namespace: NationalInstruments.SemiconductorTestLibrary.InstrumentAbstraction.<instrument type Assembly: NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Additionally, the TestStandSteps provides the high-level, Note Namespace: NationalInstruments.SemiconductorTestLibrary.TestStandSteps Assembly: NationalInstruments.SemiconductorTestLibrary.TestStandSteps.dll Using the Map Method As of STS Software 24.5, the NationalInstruments.SemiconductorTestLibrary.TestStandSteps assembly provides method that are available as step types for you to drag-and-drop from the TestStand Insertion Pallet. These provided methods aid quick commonly suers... The source code for these steps are available on github for reference. It is expect that users can leverage It also uses abstractions, they may not be the same memory space. This is not a problem except for init code nuget inted Use the MapInitializedInstrumentSessions method from the Initialization class to ensure the cached instrument session information is consistent between the NationalInstruments.SemiconductorTestLibrary.TestStandSteps assembly and client assembly. When using the Steps provided by the the NationalInstruments.SemiconductorTestLibrary.TestStandSteps assembly in your test sequence, and writing although it uses the NationalInstruments.SemiconductorTestLibrary.Abstractions assembly is dedent on the the NationalInstruments.SemiconductorTestLibrary.Abstractions. they may not share the same memory space if the client assembly is using a newer version of the NationalInstruments.SemiconductorTestLibrary.Abstractions. If the client assembly is using a newer version of the NationalInstruments.SemiconductorTestLibrary.Abstractions, then will not share the same memory space which can cause problems. NI DCPower Session Groups The instrument abstraction for the NI DCPower drive expects that the sessions are configured in one or more groups within the loaded pin map. If the load pin map does not use session groups, the InitializeAndClose.Initialize method will throw and exception. Applicable namespace: SemiconductorTestLibrary.InstrumentAbstraction.DCPower Related information: LINK"
  },
  "UserGuide/PublishedDataIdsOfTestStandSteps.html": {
    "href": "UserGuide/PublishedDataIdsOfTestStandSteps.html",
    "title": "Published Data IDs of TestStandSteps | Semiconductor Test Library",
    "keywords": "Published Data IDs of TestStandSteps The following table shows the published data ids for the TestStandSteps provided by the Semiconductor Test Library that publish test results. Method Name PublishedDataId(s) Data Type Units AcquireAnalogInputWaveforms Minimum Numeric *Depends on task type Minimum Numeric *Depends on task type BurstPattern Pattern Pass/Fail Result Boolean N/A Pattern Fail Count Numeric N/A ContinuityTest Continuity Numeric Volts ForceCurrentMeasureVoltage Voltage Numeric Volts ForceVoltageMeasureCurrent Current Numeric Amperes LeakageTest Leakage Numeric Amperes Note When dragging and dropping a step from the TestStand Insertion Pallet into a sequence, the resulting step be linked to the version of the TestStandSteps assembly that ships with the version of STS Software you are using. However, Test tab in the Step Settings pane will not automatically be populated, as this is dependent on the number of pins used by the test. You must populate the Test tab yourself using the PublishedDataIds listed above."
  },
  "UserGuide/PublishingResults.html": {
    "href": "UserGuide/PublishingResults.html",
    "title": "Publishing Results | Semiconductor Test Library",
    "keywords": "Publishing Results The Semiconductor Test Library does not directly process or evaluate test results. It instead passes published test results to be separate results handler. The library currently leverages the TestStand Semiconductor Module (TSM) to act its results handler, where the test results are evaluated against limits at the TestStand level. Refer to the TSM documentation linked below for more information. Related information: NI TestStand Semiconductor Module: Publishing Results (TSM)"
  },
  "UserGuide/SharingPinSiteDataBetweenCodeModules.html": {
    "href": "UserGuide/SharingPinSiteDataBetweenCodeModules.html",
    "title": "Sharing SiteData and PinSiteData Between Code Modules | Semiconductor Test Library",
    "keywords": "Sharing SiteData and PinSiteData Between Code Modules During test development, it may become necessary to store some results measured in one code module with another code module later in the test sequence execution, within the same run. This can be achieved by storing the data within in the SemiconductorModuleContext in one code module and retrieving later in another code module using an ID string. For more information, refer the Sharing Data between Code Modules (TSM) topic in the TSM help documentation. The SetSiteData and GetSiteData .NET methods provided by TSM, do not currently support being passed SiteData or PinSiteData objects directly. Therefore, SiteData/PinSiteData must first be converted into a 1D array of per-site values. Where, each element in the array represents a given site values. In the case of PinSiteData, this will be each element in the array a dictionary of per-pin values that represents a given site. Note The data must be ordered to match the order of sites in the Semiconductor Module context. This order might not be sequential. Use the SiteNumbers property on the ISemiconductorModuleContext .NET object to determine the order of the sites in the Semiconductor Module context and arrange the data manually. Sharing SiteData Example The following example shows how to store a per-site measurement data for comparison in a later test step: public static void FirstCodeModule( ISemiconductorModuleContext semiconductorModuleContext, string pinName, string patternName, string waveformName, int samplesToRead) { var sessionManager = new TSMSessionManager(semiconductorModuleContext); var digitalPins = sessionManager.Digital(pinName); digitalPins.BurstPattern(patternName); SiteData<uint[]> measurement = digitalPins.FetchCaptureWaveform(waveformName, samplesToRead); var perSiteDataArray = new uint[semiconductorModuleContext.SiteNumbers.Count][]; for (int i = 0; i < perSiteDataArray.Length; i++) { perSiteDataArray[i] = measurement.GetValue(semiconductorModuleContext.SiteNumbers.ElementAt(i)); } semiconductorModuleContext.SetSiteData(\"ComparisonData\", perSiteDataArray); } public static void SecondCodeModule( ISemiconductorModuleContext semiconductorModuleContext, string pinName, string patternName, string waveformName, int samplesToRead) { var perSiteComparisonDataArray = semiconductorModuleContext.GetSiteData<uint[]>(\"ComparisonData\"); var comparisonData = new SiteData<uint[]>(perSiteComparisonDataArray); var sessionManager = new TSMSessionManager(semiconductorModuleContext); var digitalPins = sessionManager.Digital(pinName); digitalPins.BurstPattern(patternName); SiteData<uint[]> measurement = digitalPins.FetchCaptureWaveform(waveformName, 1); var comparisonResults = measurement.Compare(ComparisonType.EqualTo, comparisonData); semiconductorModuleContext.PublishResults(comparisonResults, \"ComparisonResults\"); } Sharing PinSiteData Example The following example shows how to store a per-pin per-site measurement data for comparison in a later test step: public static void FirstCodeModule(ISemiconductorModuleContext semiconductorModuleContext, string pinName) { var sessionManager = new TSMSessionManager(semiconductorModuleContext); var dcPowerPin = sessionManager.DCPower(pinName); PinSiteData<double> measurement = dcPowerPin.MeasureVoltage(); var perSiteDataArray = new IDictionary<string, double>[semiconductorModuleContext.SiteNumbers.Count]; for (int i = 0; i < perSiteDataArray.Length; i++) { perSiteDataArray[i] = measurement.ExtractSite(semiconductorModuleContext.SiteNumbers.ElementAt(i)); } semiconductorModuleContext.SetSiteData(\"ComparisonData\", perSiteDataArray); } public static void SecondCodeModule(ISemiconductorModuleContext semiconductorModuleContext, string pinName) { var perSitePinDict = semiconductorModuleContext.GetSiteData<IDictionary<string, double>>(\"ComparisonData\"); var pinSiteDictionary = new Dictionary<string, IDictionary<int, double>>(); for (int i = 0; i < semiconductorModuleContext.SiteNumbers.Count; i++) { var siteNumber = semiconductorModuleContext.SiteNumbers.ElementAt(i); foreach (var pin in perSitePinDict[i].Keys) { var singlePinSiteValue = perSitePinDict[i][pin]; if (!pinSiteDictionary.TryGetValue(pin, out IDictionary<int, double> perSitePinValues)) { perSitePinValues = new Dictionary<int, double>() { [siteNumber] = singlePinSiteValue }; pinSiteDictionary.Add(pin, perSitePinValues); continue; } if (!perSitePinValues.ContainsKey(siteNumber)) { perSitePinValues.Add(siteNumber, singlePinSiteValue); continue; } perSitePinValues[siteNumber] = singlePinSiteValue; } } var comparisonData = new PinSiteData<double>(pinSiteDictionary); var sessionManager = new TSMSessionManager(semiconductorModuleContext); var dcPowerPin = sessionManager.DCPower(pinName); PinSiteData<double> measurement = dcPowerPin.MeasureVoltage(); var comparisonResults = measurement.Subtract(comparisonData); semiconductorModuleContext.PublishResults(comparisonResults, \"ComparisonResults\"); }"
  },
  "UserGuide/SupportedInstrumentTypes.html": {
    "href": "UserGuide/SupportedInstrumentTypes.html",
    "title": "Supported Instrument Types | Semiconductor Test Library",
    "keywords": "Supported Instrument Types The Semiconductor Test Library supports the core set of modular instruments commonly used within the NI Semiconductor Test System (STS). The following table provides a list which instrument types are currently supported by the library. Table 1: List of Supported Instrument Types Instrument Type Driver Abstractions Extensions NI Source Measurement Unit (SMU) niDCPower Supported Core Support NI Programmable Power Supply (PPS) niDCPower Supported Core Support NI Multifunction I/O (DAQ) * niDAQmx Supported Limited Support + NI Sound and Vibration Module (DSA) * * niDAQmx Supported Limited Support ++ NI Digital Pattern Instrument (DPI/HSD) niDigital Supported Core Support NI Digital Multimeter (DMM) niDmm Supported Core Support NI Relay Module (RELAY) niSwitch Supported Core Support NI Function Generator (FGEN) niFgen Supported Not Yet Supported NI Digitizer/Oscilloscope (SCOPE) niScope Supported Not Yet Supported NI Timing Synchronization Module (SYNC) niSync Supported Not Yet Supported Note Core Support: the core functionality to use the instrument is supported, but some advanced features are not yet exposed with a high-level Extension method. Refer to the documentation regarding how to interact with the lower-level driver APIs using the provided Abstraction methods. Limited Support: Only the most common use cases are implemented. * Only PXIe-6368 devices are currently supported. * * Only PXIe-4467/8 devices are currently supported. + Only Analog Input, Analog Output, Digital Input, and Digital Output task types are currently supported. ++ Only Analog Input, Analog Output, and Analog Output: Function Generation task types are supported."
  },
  "UserGuide/WritingTestCode.html": {
    "href": "UserGuide/WritingTestCode.html",
    "title": "Writing Test Code | Semiconductor Test Library",
    "keywords": "Writing Test Code Complete the following steps to use Semiconductor Test Library in your test code: Create a new TSMSessionManager object and any other local variables that are necessary for your test. Use the TSMSessionManager object to query the session for the target pins. Configure the instrumentation connected to the target pins and configure the relay modules. Source and/or measure the signals. Burst the patterns required to configure the DUT. Calculate and/or publish the required test results. Repeat step 4 and 6 as necessary for your test. Clean up and restore the instrument state(s) after finishing the test. Example C# Code Snippet of Workflow public static void WorkFlowExample( ISemiconductorModuleContext semiconductorModuleContext, string[] sumPinNames, string[] digitalPinNames, string relayConfigBeforeTest, string relayConfigAfterTest, string patternName) { var sessionManager = new TSMSessionManager(semiconductorModuleContext); double voltageLevel = 3.3; double currentLimit = 0.01; double settlingTime = 0.001; var measureSettings = new DCPowerMeasureSettings() { ApertureTime = 0.001, Sense = DCPowerMeasurementSense.Remote }; var smuPins = sessionManager.DCPower(sumPinNames); var digitalPins = sessionManager.Digital(digitalPinNames); smuPins.ConfigureMeasureSettings(measureSettings); semiconductorModuleContext.ApplyRelayConfiguration(relayConfigBeforeTest, waitSeconds: settlingTime); smuPins.ForceVoltage(voltageLevel, currentLimit); PreciseWait(timeInSeconds: settlingTime); var currentBefore = smuPins.MeasureAndPublishCurrent(publishedDataId: \"CurrentBefore\"); digitalPins.BurstPatternAndPublishResults(patternName, publishedDataId: \"PatternResults\"); PreciseWait(timeInSeconds: settlingTime); var currentAfter = smuPins.MeasureAndPublishCurrent(publishedDataId: \"CurrentAfter\"); var currentDifference = currentBefore.Subtract(currentAfter).Abs(); semiconductorModuleContext.PublishResults(currentDifference, publishedDataId: \"CurrentDifference\"); smuPins.ForceVoltage(voltageLevel: 0, currentLimit: 0.001); PreciseWait(timeInSeconds: settlingTime); semiconductorModuleContext.ApplyRelayConfiguration(relayConfigAfterTest, waitSeconds: settlingTime); }"
  },
  "UserGuide/advanced/ConcurrentCodeExecution.html": {
    "href": "UserGuide/advanced/ConcurrentCodeExecution.html",
    "title": "Concurrent Code Execution | Semiconductor Test Library",
    "keywords": "Concurrent Code Execution Code statements that are independent of each other can be written to execute in concurrently. You can use the InvokeInParallel method from the Utilities class to allow separate lines of code to execute concurrently. For example, to perform operations on pins of different instrument types at the same time. Note This method uses the Parallel.Invoke method to execute multiple methods in parallel, and can be invoked in the exact same way. However, note that it also wraps the Parallel.Invoke method in a try-catch statement such that if an expectation occurs, only the first exception that is encountered will be returned to the call. This allows the exception to bubble-up and display properly by the TestStand runtime error dialog. Class: Utilities Namespace: NationalInstruments.SemiconductorTestLibrary.Common Assembly: NationalInstruments.SemiconductorTestLibrary.Abstractions.dll The following example demonstrates how to use the InvokeInParallel method from the Utilities class: public static void ConcurrentCodeExample(ISemiconductorModuleContext semiconductorModuleContext, string pinNames) { var sessionManager = new TSMSessionManager(semiconductorModuleContext); var publishDataID = \"Measurement\"; var filteredPinNamesDmm = semiconductorModuleContext.FilterPinsByInstrumentType(pinNames, InstrumentTypeIdConstants.NIDmm); var filteredPinNamesPpmu = semiconductorModuleContext.FilterPinsByInstrumentType(pinNames, InstrumentTypeIdConstants.NIDigitalPattern); var filteredPinNamesSmu = semiconductorModuleContext.FilterPinsByInstrumentType(pinNames, InstrumentTypeIdConstants.NIDCPower); var ppmuPins = sessionManager.DCPower(filteredPinNamesSmu); var smuPins = sessionManager.Digital(filteredPinNamesPpmu); var dmmPins = sessionManager.DMM(filteredPinNamesPpmu); // Assumes that the instrumentation is already configured. Utilities.InvokeInParallel( () => ppmuPins.MeasureAndPublishCurrent(publishDataID), () => smuPins.MeasureAndPublishCurrent(publishDataID), () => { var measurements = dmmPins.Read(maximumTimeInMilliseconds: 2000); semiconductorModuleContext.PublishResults(measurements, publishDataID); }); }"
  },
  "UserGuide/advanced/ExtendingTheSemiconductorTestLibrary.html": {
    "href": "UserGuide/advanced/ExtendingTheSemiconductorTestLibrary.html",
    "title": "Extending The Semiconductor Test Library | Semiconductor Test Library",
    "keywords": "Extending The Semiconductor Test Library The Semiconductor Test Library provides extension methods for abstracting common, high-level instrument operations. If you are unfamiliar Extension Methods, they are static methods that can be called as if they were instance methods for the object type they extend. For tests code being written, there's no apparent difference between calling an extension method and calling the methods defined in a type. Extension methods enable the developer to \"add\" methods to existing types without creating a new derived type, recompiling, or otherwise modifying the original type. An extension method will never be called if it has the same signature as a method defined in the type. So extension method can never be used to impersonate existing methods on a type, because all name collisions are resolved in favor of the instance or static method defined by the type itself. Extension methods cannot access any private data in the extended class. Learn more at: https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods. Writing Your Own Extension Method It is recommended that you start by creating a separate .cs file to write your project-specific extensions in, with it's own unique namespace. It must contain a static class, which should use the same name as the file name. You then write out a new static method, with the first parameter being the target class you wish to extend proceeded by the this keyword. Finally, can add other parameters to method signature and your desired logic within the method body. Refer to the example below, which extends PinSiteData to have a MaxByPin() method that calculates the per-site maximum value across each pin. // FileName: MyProjectExtensions.cs using System.Collections.Generic; using System.Linq; using NationalInstruments.SemiconductorTestLibrary.DataAbstraction; namespace NationalInstruments.MyProject.Extensions { /// <summary> /// Class containing custom extension methods for MyProject. /// </summary> public static class MyProjectExtensions { /// <summary> /// Calculates the per-site maximum value across each pin. /// </summary> /// <remarks> /// <example> /// Example usage: /// <code> /// var measurements = dcPins.MeasureVoltage(); /// var maxValueAcrossPins = measurements.MaxByPin(); /// </code> /// </example> /// </remarks> /// <typeparam name=\"T\">The base type for the per-site per-pin data</typeparam> /// <param name=\"data\">The <see cref=\"PinSiteData{T}\"/> object</param> /// <returns> /// Returns a new <see cref=\"SiteData{T}\"/> object, /// containing the per-site maximum values across all pins. /// </returns> public static SiteData<T> MaxByPin<T>(this PinSiteData<T> data) { var perSiteMax = new Dictionary<int, T>(); for (int siteIndex = 0; siteIndex < data.SiteNumbers.Length; siteIndex++) { var perPinSingleSiteValues = new T[data.PinNames.Length]; for (int pinIndex = 0; pinIndex < data.PinNames.Length; pinIndex++) { perPinSingleSiteValues[pinIndex] = data.GetValue(data.SiteNumbers[siteIndex], data.PinNames[pinIndex]); } perSiteMax.Add(data.SiteNumbers[siteIndex], perPinSingleSiteValues.Max()); } return new SiteData<T>(perSiteMax); } } }"
  },
  "UserGuide/advanced/MakingLowLevelDriverCalls.html": {
    "href": "UserGuide/advanced/MakingLowLevelDriverCalls.html",
    "title": "Making Low-level Driver Calls | Semiconductor Test Library",
    "keywords": "Making Low-level Driver Calls During test program development, you may be a low-level driver function or capability that is not directly exposed as a high-level extension method by the Semiconductor Test Library. In such cases, it may be necessary to use the low-level driver API to implement the desired test code. The ParallelExecution methods provided by the Semiconductor Test Library can be leveraged to directly access to the low-level driver sessions enabling you to implement ad-hoc driver calls inline with other high-level methods in your test code. How-to Make Low-level Driver API Calls To invoke a low-level driver API call, use the Do methods provided within the ParallelExecution class within the NationalInstruments.SemiconductorTestLibrary.Common namespace. The following example highlights how use the Do method with an existing DigitalSessionsBundle object to start clock generation by invoking the ClockGenerator.GenerateClock method from the niDigital driver API on the underlying PinSet of the niDigital driver session. Note that if you need to invoke a method on the driver session object, rather than simply access a property, you must also include a using declaration for the namespace of the driver API at the top of your code file. In the example below requires the following using directive: using NationalInstruments.ModularInstruments.NIDigital; public static void GenerateClock(DigitalSessionsBundle sessionsBundle, double frequency) { sessionsBundle.Do((DigitalSessionInformation sessionInfo) => { sessionInfo.PinSet.ClockGenerator.GenerateClock(frequency, selectDigitalFunction: true); }); }; Similarly, you may want to return values from low-level driver properties. The following example demonstrates how to get the configured the voltage level for the target DCPower instruments by accessing the VoltageLevel property of the low-level niDCPower driver session by using the DoAndReturnPerPinPerSiteData method. public static PinSiteData<double> GetVoltageLevel(DCPowerSessionsBundle sessionsBundle) { return sessionsBundle.DoAndReturnPerSitePerPinResults( (DCPowerSessionInformation sessionInfo, SitePinInfo sitePinInfo) => { return sessionInfo.Session.Outputs[sitePinInfo.IndividualChannelString].Source.Voltage.VoltageLevel; }); } Related concepts: Extending The Semiconductor Test Library"
  },
  "UserGuide/advanced/ParallelExecution.html": {
    "href": "UserGuide/advanced/ParallelExecution.html",
    "title": "Parallelization Methods | Semiconductor Test Library",
    "keywords": "Parallelization Methods The Semiconductor Test Library provides extension methods for abstracting parallel for loops that are required to iterate of each of the various instrument sessions within a given pin sessions bundle. Note that the Parallelization methods can be used with any class that inherits from the ISessionsBundle interface, such as the DCPowerSessionsBundle class. These methods can be used to perform one or more driver operation(s) across each instrument session associated with the pin(s) queried. There are overloads to allow you to specify if an operation is to be performed across each session or across each pin and site. These methods should only be used when needing to write low-level driver calls to implement instrument capabilities not yet exposed by the Semiconductor Test Library. Note Class: ParallelExecution Namespace: NationalInstruments.SemiconductorTestLibrary.Common Assembly: NationalInstruments.SemiconductorTestLibrary.Abstractions.dll Related concepts: Making Low-level Driver Calls"
  },
  "index.html": {
    "href": "index.html",
    "title": "Semiconductor Test Library | Semiconductor Test Library",
    "keywords": "Semiconductor Test Library Welcome to the documentation site for the Semiconductor Test Library! The Semiconductor Test Library simplifies programming on the NI Semiconductor Test System (STS) and enables users to develop test programs efficiently using C#/.NET. The Semiconductor Test Library includes the following high-level features: Interfaces and classes—Abstract instrument sessions and encapsulate the necessary pin and site awareness. Pin- and site-aware data types— Simplify instrument configuration and measurement results processing. Extension methods—Abstract common, high-level instrument operations. Parallelization methods—Abstract parallel for loops required to iterate over multiple instrument sessions regardless of how sessions map to pins or sites. Publishing methods—Simplify results publishing and add support for the SiteData and PinSiteData types. Utilities methods—Provide utility methods commonly required for writing test code. TestStand step types—Perform common operations, such as setting up and closing instruments, powering up a DUT, or executing common tests. Software Requirements You must have the following software to use the Semiconductor Test Library: STS Software 24.5 or later .NET Framework 4.8 or later Visual Studio 2022 is highly recommended."
  }
}