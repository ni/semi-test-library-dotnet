name: Comment on Fixed Issues

on:
  create:
    branches:
      - 'releases/*'

jobs:
  comment-on-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Process issues for new release
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const branchRef = context.ref;
            const version = branchRef.replace('refs/heads/releases/', '');
            const releaseLink = `https://github.com/${owner}/${repo}/tree/releases/${version}`;
            const targetUser = "Tanish-NI";

            let latestRelease;
            let previousReleaseDate;
            try {
              latestRelease = await github.rest.repos.getLatestRelease({ owner, repo });
              previousReleaseDate = new Date(latestRelease.data.published_at);
              console.log("Latest release published at:", previousReleaseDate);
            }catch (error) {
              console.log("No previous release found; defaulting to epoch start.");
              previousReleaseDate = new Date(0); // Fallback if no release exists.
            }
            
            const searchQuery = `repo:${owner}/${repo} is:issue "The corresponding work item has been closed. The fix should be available in the next release." in:comments`;
            console.log("Search query:", searchQuery);

            const issues = await github.paginate(github.rest.search.issuesAndPullRequests, {
              q: `repo:${owner}/${repo} is:issue "The corresponding work item has been closed. The fix should be available in the next release." in:comments`,
              per_page: 100,
            });
            console.log(`Found ${issues.length} issues with matching comment.`);

            for (const issue of issues) {
              const comments = await github.paginate(github.rest.issues.listComments, {
              owner,
              repo,
              issue_number: issue.number,
              per_page: 100,
              });
                
              let eligible = false;
              for (const comment of comments) {
                console.log(`Evaluating comment ${comment.id} on issue #${issue.number}`);
                const containsText = comment.body.includes("The corresponding work item has been closed. The fix should be available in the next release.");
                const isFromTargetUser = comment.user.login === targetUser;

                const createdAfter = new Date(comment.created_at) > previousReleaseDate;
                console.log(`Comment ${comment.id}: Contains required text? ${containsText}, Is from target user? ${isFromTargetUser}, Created after last release? ${createdAfter}`);
                  
                if (containsText && isFromTargetUser && createdAfter) {
                  eligible = true;
                  break;
                }
              }
                
              if (eligible) {
                const commentBody = `The fix for this issue is included in version ${version}, which has now been released ([click here](${releaseLink})). This issue will auto close within the next 30 days.`;
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: issue.number,
                  body: commentBody,
                });
                console.log(`Comment added to issue #${issue.number}`);
              } else {
                console.log(`Issue #${issue.number} is not eligible; skipping.`);
              }
            }